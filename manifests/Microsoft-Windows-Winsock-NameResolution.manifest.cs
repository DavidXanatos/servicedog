using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWinsockNameResolution;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftWindowsWinsockNameResolutionTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-Winsock-NameResolution";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x55404e71), unchecked((short) 0x4db9), unchecked((short) 0x4deb), 0xa5, 0xf5, 0x8f, 0x86, 0xe4, 0x6d, 0xde, 0x56);
        public enum Keywords : long
        {
        };

        public MicrosoftWindowsWinsockNameResolutionTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<WinsockGaiArgs> WinsockGai
        {
            add
            {
                source.RegisterEventTemplate(WinsockGaiTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1000, ProviderGuid);
            }
        }
        public event Action<WinsockGai1001Args> WinsockGai1001
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1001Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
            }
        }
        public event Action<WinsockGai1002Args> WinsockGai1002
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1002Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
            }
        }
        public event Action<WinsockGai1003Args> WinsockGai1003
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1003Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
            }
        }
        public event Action<WinsockGai1001Args> WinsockGai1004
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1004Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1004, ProviderGuid);
            }
        }
        public event Action<WinsockGai1005Args> WinsockGai1005
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1005Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1005, ProviderGuid);
            }
        }
        public event Action<WinsockGai1006Args> WinsockGai1006
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1006Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1006, ProviderGuid);
            }
        }
        public event Action<WinsockGai1007Args> WinsockGai1007
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1007Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1007, ProviderGuid);
            }
        }
        public event Action<WinsockGai1008Args> WinsockGai1008
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1008Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1008, ProviderGuid);
            }
        }
        public event Action<WinsockGai1009Args> WinsockGai1009
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1009Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1009, ProviderGuid);
            }
        }
        public event Action<WinsockGai1010Args> WinsockGai1010
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1010Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1010, ProviderGuid);
            }
        }
        public event Action<WinsockGai1011Args> WinsockGai1011
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1011Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
            }
        }
        public event Action<WinsockGai1012Args> WinsockGai1012
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1012Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
            }
        }
        public event Action<WinsockGai1013Args> WinsockGai1013
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1013Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
            }
        }
        public event Action<WinsockGai1014Args> WinsockGai1014
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1014Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1014, ProviderGuid);
            }
        }
        public event Action<WinsockGai1014Args> WinsockGai1015
        {
            add
            {
                source.RegisterEventTemplate(WinsockGai1015Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private WinsockGaiArgs WinsockGaiTemplate(Action<WinsockGaiArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGaiArgs(action, 1000, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1001Args WinsockGai1001Template(Action<WinsockGai1001Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1001Args(action, 1001, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1002Args WinsockGai1002Template(Action<WinsockGai1002Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1002Args(action, 1002, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1003Args WinsockGai1003Template(Action<WinsockGai1003Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1003Args(action, 1003, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1001Args WinsockGai1004Template(Action<WinsockGai1001Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1001Args(action, 1004, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1005Args WinsockGai1005Template(Action<WinsockGai1005Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1005Args(action, 1005, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1006Args WinsockGai1006Template(Action<WinsockGai1006Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1006Args(action, 1006, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1007Args WinsockGai1007Template(Action<WinsockGai1007Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1007Args(action, 1007, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1008Args WinsockGai1008Template(Action<WinsockGai1008Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1008Args(action, 1008, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1009Args WinsockGai1009Template(Action<WinsockGai1009Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1009Args(action, 1009, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1010Args WinsockGai1010Template(Action<WinsockGai1010Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1010Args(action, 1010, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1011Args WinsockGai1011Template(Action<WinsockGai1011Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1011Args(action, 1011, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1012Args WinsockGai1012Template(Action<WinsockGai1012Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1012Args(action, 1012, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1013Args WinsockGai1013Template(Action<WinsockGai1013Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1013Args(action, 1013, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1014Args WinsockGai1014Template(Action<WinsockGai1014Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1014Args(action, 1014, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WinsockGai1014Args WinsockGai1015Template(Action<WinsockGai1014Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WinsockGai1014Args(action, 1015, 1000, "WinsockGai", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[16];
                templates[0] = WinsockGaiTemplate(null);
                templates[1] = WinsockGaiTemplate(null);
                templates[2] = WinsockGaiTemplate(null);
                templates[3] = WinsockGaiTemplate(null);
                templates[4] = WinsockGaiTemplate(null);
                templates[5] = WinsockGaiTemplate(null);
                templates[6] = WinsockGaiTemplate(null);
                templates[7] = WinsockGaiTemplate(null);
                templates[8] = WinsockGaiTemplate(null);
                templates[9] = WinsockGaiTemplate(null);
                templates[10] = WinsockGaiTemplate(null);
                templates[11] = WinsockGaiTemplate(null);
                templates[12] = WinsockGaiTemplate(null);
                templates[13] = WinsockGaiTemplate(null);
                templates[14] = WinsockGaiTemplate(null);
                templates[15] = WinsockGaiTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWinsockNameResolution
{
    public sealed class WinsockGaiArgs : TraceEvent
    {
        public string NodeName { get { return GetUnicodeStringAt(0); } }
        public string ServiceName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Location { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public int Family { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public int SocketType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+12); } }
        public int Protocol { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+16); } }

        #region Private
        internal WinsockGaiArgs(Action<WinsockGaiArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+20));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGaiArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeName", NodeName);
             XmlAttrib(sb, "ServiceName", ServiceName);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "Family", Family);
             XmlAttrib(sb, "SocketType", SocketType);
             XmlAttrib(sb, "Protocol", Protocol);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeName", "ServiceName", "Location", "Flags", "Family", "SocketType", "Protocol"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeName;
                case 1:
                    return ServiceName;
                case 2:
                    return Location;
                case 3:
                    return Flags;
                case 4:
                    return Family;
                case 5:
                    return SocketType;
                case 6:
                    return Protocol;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGaiArgs> m_target;
        #endregion
    }
    public sealed class WinsockGai1001Args : TraceEvent
    {
        public string NodeName { get { return GetUnicodeStringAt(0); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string Result { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal WinsockGai1001Args(Action<WinsockGai1001Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1001Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeName", NodeName);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeName", "Status", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeName;
                case 1:
                    return Status;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1001Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1002Args : TraceEvent
    {
        public string NodeName { get { return GetUnicodeStringAt(0); } }
        public string ServiceName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Location { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int NameSpace { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public Guid NameSpaceGuid { get { return GetGuidAt(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+24); } }
        public int Family { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+28); } }
        public int SocketType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+32); } }
        public int protocol { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+36); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+40); } }
        public int TimeOutInSec { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+44); } }
        public int AsyncWithCallback { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+48); } }
        public int AsyncWithOverlapped { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+52); } }

        #region Private
        internal WinsockGai1002Args(Action<WinsockGai1002Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+56));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+56));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1002Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeName", NodeName);
             XmlAttrib(sb, "ServiceName", ServiceName);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "NameSpace", NameSpace);
             XmlAttrib(sb, "NameSpaceGuid", NameSpaceGuid);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "Family", Family);
             XmlAttrib(sb, "SocketType", SocketType);
             XmlAttrib(sb, "protocol", protocol);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "TimeOutInSec", TimeOutInSec);
             XmlAttrib(sb, "AsyncWithCallback", AsyncWithCallback);
             XmlAttrib(sb, "AsyncWithOverlapped", AsyncWithOverlapped);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeName", "ServiceName", "Location", "NameSpace", "NameSpaceGuid", "Flags", "Family", "SocketType", "protocol", "InterfaceIndex", "TimeOutInSec", "AsyncWithCallback", "AsyncWithOverlapped"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeName;
                case 1:
                    return ServiceName;
                case 2:
                    return Location;
                case 3:
                    return NameSpace;
                case 4:
                    return NameSpaceGuid;
                case 5:
                    return Flags;
                case 6:
                    return Family;
                case 7:
                    return SocketType;
                case 8:
                    return protocol;
                case 9:
                    return InterfaceIndex;
                case 10:
                    return TimeOutInSec;
                case 11:
                    return AsyncWithCallback;
                case 12:
                    return AsyncWithOverlapped;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1002Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1003Args : TraceEvent
    {
        public string NodeName { get { return GetUnicodeStringAt(0); } }
        public long CancelHandle { get { return GetInt64At(SkipUnicodeString(0)); } }

        #region Private
        internal WinsockGai1003Args(Action<WinsockGai1003Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1003Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeName", NodeName);
             XmlAttrib(sb, "CancelHandle", CancelHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeName", "CancelHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeName;
                case 1:
                    return CancelHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1003Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1005Args : TraceEvent
    {
        public long CancelHandle { get { return GetInt64At(0); } }
        public int Location { get { return GetInt32At(8); } }

        #region Private
        internal WinsockGai1005Args(Action<WinsockGai1005Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1005Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CancelHandle", CancelHandle);
             XmlAttrib(sb, "Location", Location);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CancelHandle", "Location"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CancelHandle;
                case 1:
                    return Location;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1005Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1006Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public string QueryName { get { return GetUnicodeStringAt(16); } }
        public Guid ServiceGUID { get { return GetGuidAt(SkipUnicodeString(16)); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(16)+16); } }
        public int ControlFlags { get { return GetInt32At(SkipUnicodeString(16)+20); } }

        #region Private
        internal WinsockGai1006Args(Action<WinsockGai1006Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(16)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(16)+24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1006Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "ServiceGUID", ServiceGUID);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "ControlFlags", ControlFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "QueryName", "ServiceGUID", "InterfaceIndex", "ControlFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return QueryName;
                case 2:
                    return ServiceGUID;
                case 3:
                    return InterfaceIndex;
                case 4:
                    return ControlFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1006Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1007Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public string QueryName { get { return GetUnicodeStringAt(16); } }
        public Guid ServiceGUID { get { return GetGuidAt(SkipUnicodeString(16)); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(16)+16); } }
        public int ControlFlags { get { return GetInt32At(SkipUnicodeString(16)+20); } }
        public long LookupHandle { get { return GetInt64At(SkipUnicodeString(16)+24); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(16)+32); } }

        #region Private
        internal WinsockGai1007Args(Action<WinsockGai1007Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(16)+36));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(16)+36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1007Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "ServiceGUID", ServiceGUID);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "ControlFlags", ControlFlags);
             XmlAttrib(sb, "LookupHandle", LookupHandle);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "QueryName", "ServiceGUID", "InterfaceIndex", "ControlFlags", "LookupHandle", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return QueryName;
                case 2:
                    return ServiceGUID;
                case 3:
                    return InterfaceIndex;
                case 4:
                    return ControlFlags;
                case 5:
                    return LookupHandle;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1007Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1008Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public int ControlFlags { get { return GetInt32At(16); } }
        public long LookupHandle { get { return GetInt64At(20); } }

        #region Private
        internal WinsockGai1008Args(Action<WinsockGai1008Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1008Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "ControlFlags", ControlFlags);
             XmlAttrib(sb, "LookupHandle", LookupHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "ControlFlags", "LookupHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return ControlFlags;
                case 2:
                    return LookupHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1008Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1009Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public int ControlFlags { get { return GetInt32At(16); } }
        public long LookupHandle { get { return GetInt64At(20); } }
        public int Status { get { return GetInt32At(28); } }
        public string Result { get { return GetUnicodeStringAt(32); } }

        #region Private
        internal WinsockGai1009Args(Action<WinsockGai1009Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(32)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(32)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1009Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "ControlFlags", ControlFlags);
             XmlAttrib(sb, "LookupHandle", LookupHandle);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "ControlFlags", "LookupHandle", "Status", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return ControlFlags;
                case 2:
                    return LookupHandle;
                case 3:
                    return Status;
                case 4:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1009Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1010Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public long LookupHandle { get { return GetInt64At(16); } }

        #region Private
        internal WinsockGai1010Args(Action<WinsockGai1010Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1010Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "LookupHandle", LookupHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "LookupHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return LookupHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1010Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1011Args : TraceEvent
    {
        public Guid ProviderGUID { get { return GetGuidAt(0); } }
        public long LookupHandle { get { return GetInt64At(16); } }
        public int Status { get { return GetInt32At(24); } }

        #region Private
        internal WinsockGai1011Args(Action<WinsockGai1011Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1011Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProviderGUID", ProviderGUID);
             XmlAttrib(sb, "LookupHandle", LookupHandle);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProviderGUID", "LookupHandle", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProviderGUID;
                case 1:
                    return LookupHandle;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1011Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1012Args : TraceEvent
    {
        public string NodeName { get { return GetUnicodeStringAt(0); } }
        public string ServiceName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Location { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int NameSpace { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public Guid NameSpaceGuid { get { return GetGuidAt(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+24); } }
        public int Family { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+28); } }
        public int SocketType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+32); } }
        public int protocol { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+36); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+40); } }
        public int TimeOutInSec { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+44); } }
        public int AsyncWithCallback { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+48); } }
        public int AsyncWithOverlapped { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+52); } }
        public int Error { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+56); } }

        #region Private
        internal WinsockGai1012Args(Action<WinsockGai1012Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+60));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+60));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1012Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeName", NodeName);
             XmlAttrib(sb, "ServiceName", ServiceName);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "NameSpace", NameSpace);
             XmlAttrib(sb, "NameSpaceGuid", NameSpaceGuid);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "Family", Family);
             XmlAttrib(sb, "SocketType", SocketType);
             XmlAttrib(sb, "protocol", protocol);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "TimeOutInSec", TimeOutInSec);
             XmlAttrib(sb, "AsyncWithCallback", AsyncWithCallback);
             XmlAttrib(sb, "AsyncWithOverlapped", AsyncWithOverlapped);
             XmlAttrib(sb, "Error", Error);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeName", "ServiceName", "Location", "NameSpace", "NameSpaceGuid", "Flags", "Family", "SocketType", "protocol", "InterfaceIndex", "TimeOutInSec", "AsyncWithCallback", "AsyncWithOverlapped", "Error"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeName;
                case 1:
                    return ServiceName;
                case 2:
                    return Location;
                case 3:
                    return NameSpace;
                case 4:
                    return NameSpaceGuid;
                case 5:
                    return Flags;
                case 6:
                    return Family;
                case 7:
                    return SocketType;
                case 8:
                    return protocol;
                case 9:
                    return InterfaceIndex;
                case 10:
                    return TimeOutInSec;
                case 11:
                    return AsyncWithCallback;
                case 12:
                    return AsyncWithOverlapped;
                case 13:
                    return Error;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1012Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1013Args : TraceEvent
    {
        public int Location { get { return GetInt32At(0); } }

        #region Private
        internal WinsockGai1013Args(Action<WinsockGai1013Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1013Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Location", Location);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1013Args> m_target;
        #endregion
    }
    public sealed class WinsockGai1014Args : TraceEvent
    {
        public int Location { get { return GetInt32At(0); } }
        public int RefCount { get { return GetInt32At(4); } }

        #region Private
        internal WinsockGai1014Args(Action<WinsockGai1014Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WinsockGai1014Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "RefCount", RefCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location", "RefCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                case 1:
                    return RefCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinsockGai1014Args> m_target;
        #endregion
    }
}
