using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsDotNETRuntime;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftWindowsDotNETRuntimeTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-DotNETRuntime";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xe13c0d23), unchecked((short) 0xccbc), unchecked((short) 0x4e12), 0x93, 0x1b, 0xd9, 0xcc, 0x2e, 0xee, 0x27, 0xe4);
        public enum Keywords : long
        {
            Gckeyword = 0x1,
            Gchandlekeyword = 0x2,
            Fusionkeyword = 0x4,
            Loaderkeyword = 0x8,
            Jitkeyword = 0x10,
            Ngenkeyword = 0x20,
            Startenumerationkeyword = 0x40,
            Endenumerationkeyword = 0x80,
            Securitykeyword = 0x400,
            Appdomainresourcemanagementkeyword = 0x800,
            Jittracingkeyword = 0x1000,
            Interopkeyword = 0x2000,
            Contentionkeyword = 0x4000,
            Exceptionkeyword = 0x8000,
            Threadingkeyword = 0x10000,
            Jittedmethodiltonativemapkeyword = 0x20000,
            Overrideandsuppressngeneventskeyword = 0x40000,
            Typekeyword = 0x80000,
            Gcheapdumpkeyword = 0x100000,
            Gcsampledobjectallocationhighkeyword = 0x200000,
            Gcheapsurvivalandmovementkeyword = 0x400000,
            Gcheapcollectkeyword = 0x800000,
            Gcheapandtypenameskeyword = 0x1000000,
            Gcsampledobjectallocationlowkeyword = 0x2000000,
            Perftrackkeyword = 0x20000000,
            Stackkeyword = 0x40000000,
            Threadtransferkeyword = 0x80000000,
            Debuggerkeyword = 0x100000000,
            Monitoringkeyword = 0x200000000,
        };

        public MicrosoftWindowsDotNETRuntimeTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<AppDomainResourceManagementThreadTerminatedArgs> AppDomainResourceManagementDomainEnter
        {
            add
            {
                source.RegisterEventTemplate(AppDomainResourceManagementDomainEnterTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 87, ProviderGuid);
            }
        }
        public event Action<AppDomainResourceManagementMemAllocatedArgs> AppDomainResourceManagementMemAllocated
        {
            add
            {
                source.RegisterEventTemplate(AppDomainResourceManagementMemAllocatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
            }
        }
        public event Action<AppDomainResourceManagementMemSurvivedArgs> AppDomainResourceManagementMemSurvived
        {
            add
            {
                source.RegisterEventTemplate(AppDomainResourceManagementMemSurvivedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
            }
        }
        public event Action<AppDomainResourceManagementThreadCreatedArgs> AppDomainResourceManagementThreadCreated
        {
            add
            {
                source.RegisterEventTemplate(AppDomainResourceManagementThreadCreatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 85, ProviderGuid);
            }
        }
        public event Action<AppDomainResourceManagementThreadTerminatedArgs> AppDomainResourceManagementThreadTerminated
        {
            add
            {
                source.RegisterEventTemplate(AppDomainResourceManagementThreadTerminatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 86, ProviderGuid);
            }
        }
        public event Action<AuthenticodeVerificationStartArgs> AuthenticodeVerificationStart
        {
            add
            {
                source.RegisterEventTemplate(AuthenticodeVerificationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 183, ProviderGuid);
            }
        }
        public event Action<AuthenticodeVerificationStartArgs> AuthenticodeVerificationStop
        {
            add
            {
                source.RegisterEventTemplate(AuthenticodeVerificationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 184, ProviderGuid);
            }
        }
        public event Action<ClrPerfTrackModuleRangeLoadArgs> ClrPerfTrackModuleRangeLoad
        {
            add
            {
                source.RegisterEventTemplate(ClrPerfTrackModuleRangeLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 158, ProviderGuid);
            }
        }
        public event Action<ClrStackWalkArgs> ClrStackWalk
        {
            add
            {
                source.RegisterEventTemplate(ClrStackWalkTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ContentionStart
        {
            add
            {
                source.RegisterEventTemplate(ContentionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
            }
        }
        public event Action<ContentionStopArgs> ContentionStop
        {
            add
            {
                source.RegisterEventTemplate(ContentionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DebugExceptionProcessingStart
        {
            add
            {
                source.RegisterEventTemplate(DebugExceptionProcessingStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 242, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DebugExceptionProcessingStop
        {
            add
            {
                source.RegisterEventTemplate(DebugExceptionProcessingStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 243, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DebugIPCEventStart
        {
            add
            {
                source.RegisterEventTemplate(DebugIPCEventStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 240, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DebugIPCEventStop
        {
            add
            {
                source.RegisterEventTemplate(DebugIPCEventStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 241, ProviderGuid);
            }
        }
        public event Action<ExceptionCatchStartArgs> ExceptionCatchStart
        {
            add
            {
                source.RegisterEventTemplate(ExceptionCatchStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 250, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ExceptionCatchStop
        {
            add
            {
                source.RegisterEventTemplate(ExceptionCatchStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 251, ProviderGuid);
            }
        }
        public event Action<ExceptionCatchStartArgs> ExceptionFilterStart
        {
            add
            {
                source.RegisterEventTemplate(ExceptionFilterStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 254, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ExceptionFilterStop
        {
            add
            {
                source.RegisterEventTemplate(ExceptionFilterStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 255, ProviderGuid);
            }
        }
        public event Action<ExceptionCatchStartArgs> ExceptionFinallyStart
        {
            add
            {
                source.RegisterEventTemplate(ExceptionFinallyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 252, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ExceptionFinallyStop
        {
            add
            {
                source.RegisterEventTemplate(ExceptionFinallyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 253, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ExceptionStart
        {
            add
            {
                source.RegisterEventTemplate(ExceptionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ExceptionStop
        {
            add
            {
                source.RegisterEventTemplate(ExceptionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 256, ProviderGuid);
            }
        }
        public event Action<GCAllocationTickArgs> GCAllocationTick
        {
            add
            {
                source.RegisterEventTemplate(GCAllocationTickTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCCreateConcurrentThread
        {
            add
            {
                source.RegisterEventTemplate(GCCreateConcurrentThreadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<GCCreateSegmentArgs> GCCreateSegment
        {
            add
            {
                source.RegisterEventTemplate(GCCreateSegmentTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<GCDecreaseMemoryPressureArgs> GCDecreaseMemoryPressure
        {
            add
            {
                source.RegisterEventTemplate(GCDecreaseMemoryPressureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 201, ProviderGuid);
            }
        }
        public event Action<GCDestoryGCHandleArgs> GCDestoryGCHandle
        {
            add
            {
                source.RegisterEventTemplate(GCDestoryGCHandleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<GCFinalizeObjectArgs> GCFinalizeObject
        {
            add
            {
                source.RegisterEventTemplate(GCFinalizeObjectTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCFinalizersStart
        {
            add
            {
                source.RegisterEventTemplate(GCFinalizersStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<GCFinalizersStopArgs> GCFinalizersStop
        {
            add
            {
                source.RegisterEventTemplate(GCFinalizersStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<GCFreeSegmentArgs> GCFreeSegment
        {
            add
            {
                source.RegisterEventTemplate(GCFreeSegmentTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkEdge
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkEdgeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkMovedObjectRanges
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkMovedObjectRangesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkNode
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkNodeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<TypeBulkTypeArgs> GCGCBulkRCW
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkRCWTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<TypeBulkTypeArgs> GCGCBulkRootCCW
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkRootCCWTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkRootConditionalWeakTableElementEdge
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkRootConditionalWeakTableElementEdgeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkRootEdge
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkRootEdgeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootStaticVarArgs> GCGCBulkRootStaticVar
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkRootStaticVarTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<GCGCBulkRootEdgeArgs> GCGCBulkSurvivingObjectRanges
        {
            add
            {
                source.RegisterEventTemplate(GCGCBulkSurvivingObjectRangesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<GCGCGenerationRangeArgs> GCGCGenerationRange
        {
            add
            {
                source.RegisterEventTemplate(GCGCGenerationRangeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<GCGCJoinArgs_V2> GCGCJoin
        {
            add
            {
                source.RegisterEventTemplate(GCGCJoinTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 203, ProviderGuid);
            }
        }
        public event Action<GCGCSampledObjectAllocationArgs> GCGCSampledObjectAllocation
        {
            add
            {
                source.RegisterEventTemplate(GCGCSampledObjectAllocationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<GCGCSampledObjectAllocationArgs> GCGCSampledObjectAllocation32
        {
            add
            {
                source.RegisterEventTemplate(GCGCSampledObjectAllocation32Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<GCGlobalHeapHistoryArgs_V2> GCGlobalHeapHistory
        {
            add
            {
                source.RegisterEventTemplate(GCGlobalHeapHistoryTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 205, ProviderGuid);
            }
        }
        public event Action<GCHeapStatsArgs> GCHeapStats
        {
            add
            {
                source.RegisterEventTemplate(GCHeapStatsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<GCIncreaseMemoryPressureArgs> GCIncreaseMemoryPressure
        {
            add
            {
                source.RegisterEventTemplate(GCIncreaseMemoryPressureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 200, ProviderGuid);
            }
        }
        public event Action<GCMarkArgs> GCMark
        {
            add
            {
                source.RegisterEventTemplate(GCMarkTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 202, ProviderGuid);
            }
        }
        public event Action<GCMarkStackRootsArgs> GCMarkCards
        {
            add
            {
                source.RegisterEventTemplate(GCMarkCardsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<GCMarkStackRootsArgs> GCMarkFinalizeQueueRoots
        {
            add
            {
                source.RegisterEventTemplate(GCMarkFinalizeQueueRootsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<GCMarkStackRootsArgs> GCMarkHandles
        {
            add
            {
                source.RegisterEventTemplate(GCMarkHandlesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<GCMarkStackRootsArgs> GCMarkStackRoots
        {
            add
            {
                source.RegisterEventTemplate(GCMarkStackRootsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<GCPerHeapHistoryArgs_V3> GCPerHeapHistory
        {
            add
            {
                source.RegisterEventTemplate(GCPerHeapHistoryTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 204, ProviderGuid);
            }
        }
        public event Action<GCPinObjectAtGCTimeArgs> GCPinObjectAtGCTime
        {
            add
            {
                source.RegisterEventTemplate(GCPinObjectAtGCTimeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCRestartEEStart
        {
            add
            {
                source.RegisterEventTemplate(GCRestartEEStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCRestartEEStop
        {
            add
            {
                source.RegisterEventTemplate(GCRestartEEStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<GCSetGCHandleArgs> GCSetGCHandle
        {
            add
            {
                source.RegisterEventTemplate(GCSetGCHandleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<GCStartArgs> GCStart
        {
            add
            {
                source.RegisterEventTemplate(GCStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<GCStopArgs> GCStop
        {
            add
            {
                source.RegisterEventTemplate(GCStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<GCSuspendEEStartArgs> GCSuspendEEStart
        {
            add
            {
                source.RegisterEventTemplate(GCSuspendEEStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCSuspendEEStop
        {
            add
            {
                source.RegisterEventTemplate(GCSuspendEEStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GCTerminateConcurrentThread
        {
            add
            {
                source.RegisterEventTemplate(GCTerminateConcurrentThreadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<GCTriggeredArgs> GCTriggered
        {
            add
            {
                source.RegisterEventTemplate(GCTriggeredTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<ILStubStubCacheHitArgs> ILStubStubCacheHit
        {
            add
            {
                source.RegisterEventTemplate(ILStubStubCacheHitTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 89, ProviderGuid);
            }
        }
        public event Action<ILStubStubGeneratedArgs> ILStubStubGenerated
        {
            add
            {
                source.RegisterEventTemplate(ILStubStubGeneratedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 88, ProviderGuid);
            }
        }
        public event Action<IOThreadCreationStartArgs> IOThreadCreationStart
        {
            add
            {
                source.RegisterEventTemplate(IOThreadCreationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }
        public event Action<IOThreadCreationStartArgs> IOThreadCreationStop
        {
            add
            {
                source.RegisterEventTemplate(IOThreadCreationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<IOThreadCreationStartArgs> IOThreadRetirementStart
        {
            add
            {
                source.RegisterEventTemplate(IOThreadRetirementStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<IOThreadCreationStartArgs> IOThreadRetirementStop
        {
            add
            {
                source.RegisterEventTemplate(IOThreadRetirementStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<LoaderAppDomainLoadArgs> LoaderAppDomainLoad
        {
            add
            {
                source.RegisterEventTemplate(LoaderAppDomainLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
            }
        }
        public event Action<LoaderAppDomainUnloadArgs> LoaderAppDomainUnload
        {
            add
            {
                source.RegisterEventTemplate(LoaderAppDomainUnloadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 157, ProviderGuid);
            }
        }
        public event Action<LoaderAssemblyLoadArgs> LoaderAssemblyLoad
        {
            add
            {
                source.RegisterEventTemplate(LoaderAssemblyLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
            }
        }
        public event Action<LoaderAssemblyUnloadArgs> LoaderAssemblyUnload
        {
            add
            {
                source.RegisterEventTemplate(LoaderAssemblyUnloadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
            }
        }
        public event Action<LoaderDomainModuleLoadArgs> LoaderDomainModuleLoad
        {
            add
            {
                source.RegisterEventTemplate(LoaderDomainModuleLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
            }
        }
        public event Action<LoaderModuleDCStartV2Args> LoaderModuleDCStartV2
        {
            add
            {
                source.RegisterEventTemplate(LoaderModuleDCStartV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 149, ProviderGuid);
            }
        }
        public event Action<LoaderModuleDCStopV2Args> LoaderModuleDCStopV2
        {
            add
            {
                source.RegisterEventTemplate(LoaderModuleDCStopV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 150, ProviderGuid);
            }
        }
        public event Action<LoaderModuleDCStopV2Args> LoaderModuleLoad
        {
            add
            {
                source.RegisterEventTemplate(LoaderModuleLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
            }
        }
        public event Action<LoaderModuleDCStopV2Args> LoaderModuleUnload
        {
            add
            {
                source.RegisterEventTemplate(LoaderModuleUnloadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> MethodDCEndCompleteV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCEndCompleteV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 136, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> MethodDCStartCompleteV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCStartCompleteV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 135, ProviderGuid);
            }
        }
        public event Action<MethodDCStartV2Args> MethodDCStartV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCStartV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 137, ProviderGuid);
            }
        }
        public event Action<MethodDCStartVerboseV2Args> MethodDCStartVerboseV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCStartVerboseV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 139, ProviderGuid);
            }
        }
        public event Action<MethodDCStopV2Args> MethodDCStopV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCStopV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 138, ProviderGuid);
            }
        }
        public event Action<MethodDCStartVerboseV2Args> MethodDCStopVerboseV2
        {
            add
            {
                source.RegisterEventTemplate(MethodDCStopVerboseV2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 140, ProviderGuid);
            }
        }
        public event Action<MethodInliningFailedArgs> MethodInliningFailed
        {
            add
            {
                source.RegisterEventTemplate(MethodInliningFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 186, ProviderGuid);
            }
        }
        public event Action<MethodInliningSucceededArgs> MethodInliningSucceeded
        {
            add
            {
                source.RegisterEventTemplate(MethodInliningSucceededTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 185, ProviderGuid);
            }
        }
        public event Action<MethodJittingStartedArgs> MethodJittingStarted
        {
            add
            {
                source.RegisterEventTemplate(MethodJittingStartedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 145, ProviderGuid);
            }
        }
        public event Action<MethodDCStartV2Args> MethodLoad
        {
            add
            {
                source.RegisterEventTemplate(MethodLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 141, ProviderGuid);
            }
        }
        public event Action<MethodDCStartVerboseV2Args> MethodLoadVerbose
        {
            add
            {
                source.RegisterEventTemplate(MethodLoadVerboseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 143, ProviderGuid);
            }
        }
        public event Action<MethodMethodILToNativeMapArgs> MethodMethodILToNativeMap
        {
            add
            {
                source.RegisterEventTemplate(MethodMethodILToNativeMapTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 190, ProviderGuid);
            }
        }
        public event Action<MethodTailCallFailedArgs> MethodTailCallFailed
        {
            add
            {
                source.RegisterEventTemplate(MethodTailCallFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 189, ProviderGuid);
            }
        }
        public event Action<MethodTailCallSucceededArgs> MethodTailCallSucceeded
        {
            add
            {
                source.RegisterEventTemplate(MethodTailCallSucceededTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 188, ProviderGuid);
            }
        }
        public event Action<MethodDCStartV2Args> MethodUnload
        {
            add
            {
                source.RegisterEventTemplate(MethodUnloadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 142, ProviderGuid);
            }
        }
        public event Action<MethodDCStartVerboseV2Args> MethodUnloadVerbose
        {
            add
            {
                source.RegisterEventTemplate(MethodUnloadVerboseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 144, ProviderGuid);
            }
        }
        public event Action<RuntimeStartArgs> RuntimeStart
        {
            add
            {
                source.RegisterEventTemplate(RuntimeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 187, ProviderGuid);
            }
        }
        public event Action<StrongNameVerificationStartArgs> StrongNameVerificationStart
        {
            add
            {
                source.RegisterEventTemplate(StrongNameVerificationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 181, ProviderGuid);
            }
        }
        public event Action<StrongNameVerificationStartArgs> StrongNameVerificationStop
        {
            add
            {
                source.RegisterEventTemplate(StrongNameVerificationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 182, ProviderGuid);
            }
        }
        public event Action<ThreadCreatingArgs> ThreadCreating
        {
            add
            {
                source.RegisterEventTemplate(ThreadCreatingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
            }
        }
        public event Action<ThreadPoolEnqueueArgs> ThreadPoolDequeue
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolDequeueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
            }
        }
        public event Action<ThreadPoolEnqueueArgs> ThreadPoolEnqueue
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolEnqueueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
            }
        }
        public event Action<ThreadPoolIODequeueArgs> ThreadPoolIODequeue
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolIODequeueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, ProviderGuid);
            }
        }
        public event Action<ThreadPoolIOEnqueueArgs> ThreadPoolIOEnqueue
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolIOEnqueueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, ProviderGuid);
            }
        }
        public event Action<ThreadPoolIODequeueArgs> ThreadPoolIOPack
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolIOPackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, ProviderGuid);
            }
        }
        public event Action<ThreadpoolSuspensionV2StartArgs> ThreadpoolSuspensionV2Start
        {
            add
            {
                source.RegisterEventTemplate(ThreadpoolSuspensionV2StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<ThreadpoolSuspensionV2StartArgs> ThreadpoolSuspensionV2Stop
        {
            add
            {
                source.RegisterEventTemplate(ThreadpoolSuspensionV2StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadAdjustmentArgs> ThreadPoolWorkerThreadAdjustment
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadAdjustmentTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 55, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadAdjustmentSampleArgs> ThreadPoolWorkerThreadAdjustmentSample
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadAdjustmentSampleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 54, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadAdjustmentStatsArgs> ThreadPoolWorkerThreadAdjustmentStats
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadAdjustmentStatsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadStartArgs> ThreadPoolWorkerThreadRetirementStart
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadRetirementStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadStartArgs> ThreadPoolWorkerThreadRetirementStop
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadRetirementStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadStartArgs> ThreadPoolWorkerThreadStart
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadStartArgs> ThreadPoolWorkerThreadStop
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkerThreadStartArgs> ThreadPoolWorkerThreadWait
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkerThreadWaitTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, ProviderGuid);
            }
        }
        public event Action<ThreadPoolWorkingThreadCountStartArgs> ThreadPoolWorkingThreadCountStart
        {
            add
            {
                source.RegisterEventTemplate(ThreadPoolWorkingThreadCountStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
            }
        }
        public event Action<ThreadCreatingArgs> ThreadRunning
        {
            add
            {
                source.RegisterEventTemplate(ThreadRunningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
            }
        }
        public event Action<TypeBulkTypeArgs> TypeBulkType
        {
            add
            {
                source.RegisterEventTemplate(TypeBulkTypeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<WorkerThreadCreationV2StartArgs> WorkerThreadCreationV2Start
        {
            add
            {
                source.RegisterEventTemplate(WorkerThreadCreationV2StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<WorkerThreadCreationV2StartArgs> WorkerThreadCreationV2Stop
        {
            add
            {
                source.RegisterEventTemplate(WorkerThreadCreationV2StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<WorkerThreadCreationV2StartArgs> WorkerThreadRetirementV2Start
        {
            add
            {
                source.RegisterEventTemplate(WorkerThreadRetirementV2StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<WorkerThreadCreationV2StartArgs> WorkerThreadRetirementV2Stop
        {
            add
            {
                source.RegisterEventTemplate(WorkerThreadRetirementV2StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AppDomainResourceManagementThreadTerminatedArgs AppDomainResourceManagementDomainEnterTemplate(Action<AppDomainResourceManagementThreadTerminatedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AppDomainResourceManagementThreadTerminatedArgs(action, 87, 14, "AppDomainResourceManagement", Guid.Empty, 52, "DomainEnter", ProviderGuid, ProviderName );
        }
        static private AppDomainResourceManagementMemAllocatedArgs AppDomainResourceManagementMemAllocatedTemplate(Action<AppDomainResourceManagementMemAllocatedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AppDomainResourceManagementMemAllocatedArgs(action, 83, 14, "AppDomainResourceManagement", Guid.Empty, 48, "MemAllocated", ProviderGuid, ProviderName );
        }
        static private AppDomainResourceManagementMemSurvivedArgs AppDomainResourceManagementMemSurvivedTemplate(Action<AppDomainResourceManagementMemSurvivedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AppDomainResourceManagementMemSurvivedArgs(action, 84, 14, "AppDomainResourceManagement", Guid.Empty, 49, "MemSurvived", ProviderGuid, ProviderName );
        }
        static private AppDomainResourceManagementThreadCreatedArgs AppDomainResourceManagementThreadCreatedTemplate(Action<AppDomainResourceManagementThreadCreatedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AppDomainResourceManagementThreadCreatedArgs(action, 85, 14, "AppDomainResourceManagement", Guid.Empty, 50, "ThreadCreated", ProviderGuid, ProviderName );
        }
        static private AppDomainResourceManagementThreadTerminatedArgs AppDomainResourceManagementThreadTerminatedTemplate(Action<AppDomainResourceManagementThreadTerminatedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AppDomainResourceManagementThreadTerminatedArgs(action, 86, 14, "AppDomainResourceManagement", Guid.Empty, 51, "ThreadTerminated", ProviderGuid, ProviderName );
        }
        static private AuthenticodeVerificationStartArgs AuthenticodeVerificationStartTemplate(Action<AuthenticodeVerificationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuthenticodeVerificationStartArgs(action, 183, 13, "AuthenticodeVerification", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private AuthenticodeVerificationStartArgs AuthenticodeVerificationStopTemplate(Action<AuthenticodeVerificationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuthenticodeVerificationStartArgs(action, 184, 13, "AuthenticodeVerification", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ClrPerfTrackModuleRangeLoadArgs ClrPerfTrackModuleRangeLoadTemplate(Action<ClrPerfTrackModuleRangeLoadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ClrPerfTrackModuleRangeLoadArgs(action, 158, 20, "ClrPerfTrack", Guid.Empty, 10, "ModuleRangeLoad", ProviderGuid, ProviderName );
        }
        static private ClrStackWalkArgs ClrStackWalkTemplate(Action<ClrStackWalkArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ClrStackWalkArgs(action, 82, 11, "ClrStack", Guid.Empty, 82, "Walk", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ContentionStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 81, 8, "Contention", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ContentionStopArgs ContentionStopTemplate(Action<ContentionStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ContentionStopArgs(action, 91, 8, "Contention", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DebugExceptionProcessingStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 242, 26, "DebugExceptionProcessing", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DebugExceptionProcessingStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 243, 26, "DebugExceptionProcessing", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DebugIPCEventStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 240, 25, "DebugIPCEvent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DebugIPCEventStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 241, 25, "DebugIPCEvent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ExceptionCatchStartArgs ExceptionCatchStartTemplate(Action<ExceptionCatchStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExceptionCatchStartArgs(action, 250, 27, "ExceptionCatch", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ExceptionCatchStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 251, 27, "ExceptionCatch", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ExceptionCatchStartArgs ExceptionFilterStartTemplate(Action<ExceptionCatchStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExceptionCatchStartArgs(action, 254, 29, "ExceptionFilter", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ExceptionFilterStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 255, 29, "ExceptionFilter", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ExceptionCatchStartArgs ExceptionFinallyStartTemplate(Action<ExceptionCatchStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExceptionCatchStartArgs(action, 252, 28, "ExceptionFinally", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ExceptionFinallyStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 253, 28, "ExceptionFinally", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ExceptionStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 80, 7, "Exception", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ExceptionStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 256, 7, "Exception", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private GCAllocationTickArgs GCAllocationTickTemplate(Action<GCAllocationTickArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCAllocationTickArgs(action, 10, 1, "GC", Guid.Empty, 11, "AllocationTick", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCCreateConcurrentThreadTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11, 1, "GC", Guid.Empty, 12, "CreateConcurrentThread", ProviderGuid, ProviderName );
        }
        static private GCCreateSegmentArgs GCCreateSegmentTemplate(Action<GCCreateSegmentArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCCreateSegmentArgs(action, 5, 1, "GC", Guid.Empty, 134, "CreateSegment", ProviderGuid, ProviderName );
        }
        static private GCDecreaseMemoryPressureArgs GCDecreaseMemoryPressureTemplate(Action<GCDecreaseMemoryPressureArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCDecreaseMemoryPressureArgs(action, 201, 1, "GC", Guid.Empty, 201, "DecreaseMemoryPressure", ProviderGuid, ProviderName );
        }
        static private GCDestoryGCHandleArgs GCDestoryGCHandleTemplate(Action<GCDestoryGCHandleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCDestoryGCHandleArgs(action, 31, 1, "GC", Guid.Empty, 34, "DestoryGCHandle", ProviderGuid, ProviderName );
        }
        static private GCFinalizeObjectArgs GCFinalizeObjectTemplate(Action<GCFinalizeObjectArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCFinalizeObjectArgs(action, 29, 1, "GC", Guid.Empty, 32, "FinalizeObject", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCFinalizersStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 14, 1, "GC", Guid.Empty, 19, "FinalizersStart", ProviderGuid, ProviderName );
        }
        static private GCFinalizersStopArgs GCFinalizersStopTemplate(Action<GCFinalizersStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCFinalizersStopArgs(action, 13, 1, "GC", Guid.Empty, 15, "FinalizersStop", ProviderGuid, ProviderName );
        }
        static private GCFreeSegmentArgs GCFreeSegmentTemplate(Action<GCFreeSegmentArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCFreeSegmentArgs(action, 6, 1, "GC", Guid.Empty, 135, "FreeSegment", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkEdgeTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 19, 1, "GC", Guid.Empty, 23, "GCBulkEdge", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkMovedObjectRangesTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 22, 1, "GC", Guid.Empty, 26, "GCBulkMovedObjectRanges", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkNodeTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 18, 1, "GC", Guid.Empty, 22, "GCBulkNode", ProviderGuid, ProviderName );
        }
        static private TypeBulkTypeArgs GCGCBulkRCWTemplate(Action<TypeBulkTypeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TypeBulkTypeArgs(action, 37, 1, "GC", Guid.Empty, 39, "GCBulkRCW", ProviderGuid, ProviderName );
        }
        static private TypeBulkTypeArgs GCGCBulkRootCCWTemplate(Action<TypeBulkTypeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TypeBulkTypeArgs(action, 36, 1, "GC", Guid.Empty, 38, "GCBulkRootCCW", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkRootConditionalWeakTableElementEdgeTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 17, 1, "GC", Guid.Empty, 21, "GCBulkRootConditionalWeakTableElementEdge", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkRootEdgeTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 16, 1, "GC", Guid.Empty, 20, "GCBulkRootEdge", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootStaticVarArgs GCGCBulkRootStaticVarTemplate(Action<GCGCBulkRootStaticVarArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootStaticVarArgs(action, 38, 1, "GC", Guid.Empty, 40, "GCBulkRootStaticVar", ProviderGuid, ProviderName );
        }
        static private GCGCBulkRootEdgeArgs GCGCBulkSurvivingObjectRangesTemplate(Action<GCGCBulkRootEdgeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCBulkRootEdgeArgs(action, 21, 1, "GC", Guid.Empty, 25, "GCBulkSurvivingObjectRanges", ProviderGuid, ProviderName );
        }
        static private GCGCGenerationRangeArgs GCGCGenerationRangeTemplate(Action<GCGCGenerationRangeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCGenerationRangeArgs(action, 23, 1, "GC", Guid.Empty, 27, "GCGenerationRange", ProviderGuid, ProviderName );
        }
        static private GCGCJoinArgs_V2 GCGCJoinTemplate(Action<GCGCJoinArgs_V2> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCJoinArgs_V2(action, 203, 1, "GC", Guid.Empty, 203, "GCJoin", ProviderGuid, ProviderName );
        }
        static private GCGCSampledObjectAllocationArgs GCGCSampledObjectAllocationTemplate(Action<GCGCSampledObjectAllocationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCSampledObjectAllocationArgs(action, 20, 1, "GC", Guid.Empty, 24, "GCSampledObjectAllocation", ProviderGuid, ProviderName );
        }
        static private GCGCSampledObjectAllocationArgs GCGCSampledObjectAllocation32Template(Action<GCGCSampledObjectAllocationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGCSampledObjectAllocationArgs(action, 32, 1, "GC", Guid.Empty, 24, "GCSampledObjectAllocation", ProviderGuid, ProviderName );
        }
        static private GCGlobalHeapHistoryArgs_V2 GCGlobalHeapHistoryTemplate(Action<GCGlobalHeapHistoryArgs_V2> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCGlobalHeapHistoryArgs_V2(action, 205, 1, "GC", Guid.Empty, 205, "GlobalHeapHistory", ProviderGuid, ProviderName );
        }
        static private GCHeapStatsArgs GCHeapStatsTemplate(Action<GCHeapStatsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCHeapStatsArgs(action, 4, 1, "GC", Guid.Empty, 133, "HeapStats", ProviderGuid, ProviderName );
        }
        static private GCIncreaseMemoryPressureArgs GCIncreaseMemoryPressureTemplate(Action<GCIncreaseMemoryPressureArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCIncreaseMemoryPressureArgs(action, 200, 1, "GC", Guid.Empty, 200, "IncreaseMemoryPressure", ProviderGuid, ProviderName );
        }
        static private GCMarkArgs GCMarkTemplate(Action<GCMarkArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCMarkArgs(action, 202, 1, "GC", Guid.Empty, 202, "Mark", ProviderGuid, ProviderName );
        }
        static private GCMarkStackRootsArgs GCMarkCardsTemplate(Action<GCMarkStackRootsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCMarkStackRootsArgs(action, 28, 1, "GC", Guid.Empty, 31, "MarkCards", ProviderGuid, ProviderName );
        }
        static private GCMarkStackRootsArgs GCMarkFinalizeQueueRootsTemplate(Action<GCMarkStackRootsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCMarkStackRootsArgs(action, 26, 1, "GC", Guid.Empty, 29, "MarkFinalizeQueueRoots", ProviderGuid, ProviderName );
        }
        static private GCMarkStackRootsArgs GCMarkHandlesTemplate(Action<GCMarkStackRootsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCMarkStackRootsArgs(action, 27, 1, "GC", Guid.Empty, 30, "MarkHandles", ProviderGuid, ProviderName );
        }
        static private GCMarkStackRootsArgs GCMarkStackRootsTemplate(Action<GCMarkStackRootsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCMarkStackRootsArgs(action, 25, 1, "GC", Guid.Empty, 28, "MarkStackRoots", ProviderGuid, ProviderName );
        }
        static private GCPerHeapHistoryArgs_V3 GCPerHeapHistoryTemplate(Action<GCPerHeapHistoryArgs_V3> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCPerHeapHistoryArgs_V3(action, 204, 1, "GC", Guid.Empty, 204, "PerHeapHistory", ProviderGuid, ProviderName );
        }
        static private GCPinObjectAtGCTimeArgs GCPinObjectAtGCTimeTemplate(Action<GCPinObjectAtGCTimeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCPinObjectAtGCTimeArgs(action, 33, 1, "GC", Guid.Empty, 36, "PinObjectAtGCTime", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCRestartEEStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7, 1, "GC", Guid.Empty, 136, "RestartEEStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCRestartEEStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3, 1, "GC", Guid.Empty, 132, "RestartEEStop", ProviderGuid, ProviderName );
        }
        static private GCSetGCHandleArgs GCSetGCHandleTemplate(Action<GCSetGCHandleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCSetGCHandleArgs(action, 30, 1, "GC", Guid.Empty, 33, "SetGCHandle", ProviderGuid, ProviderName );
        }
        static private GCStartArgs GCStartTemplate(Action<GCStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCStartArgs(action, 1, 1, "GC", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private GCStopArgs GCStopTemplate(Action<GCStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCStopArgs(action, 2, 1, "GC", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private GCSuspendEEStartArgs GCSuspendEEStartTemplate(Action<GCSuspendEEStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCSuspendEEStartArgs(action, 9, 1, "GC", Guid.Empty, 10, "SuspendEEStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCSuspendEEStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 8, 1, "GC", Guid.Empty, 137, "SuspendEEStop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GCTerminateConcurrentThreadTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 12, 1, "GC", Guid.Empty, 13, "TerminateConcurrentThread", ProviderGuid, ProviderName );
        }
        static private GCTriggeredArgs GCTriggeredTemplate(Action<GCTriggeredArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GCTriggeredArgs(action, 35, 1, "GC", Guid.Empty, 35, "Triggered", ProviderGuid, ProviderName );
        }
        static private ILStubStubCacheHitArgs ILStubStubCacheHitTemplate(Action<ILStubStubCacheHitArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ILStubStubCacheHitArgs(action, 89, 15, "ILStub", Guid.Empty, 89, "StubCacheHit", ProviderGuid, ProviderName );
        }
        static private ILStubStubGeneratedArgs ILStubStubGeneratedTemplate(Action<ILStubStubGeneratedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ILStubStubGeneratedArgs(action, 88, 15, "ILStub", Guid.Empty, 88, "StubGenerated", ProviderGuid, ProviderName );
        }
        static private IOThreadCreationStartArgs IOThreadCreationStartTemplate(Action<IOThreadCreationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IOThreadCreationStartArgs(action, 44, 3, "IOThreadCreation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private IOThreadCreationStartArgs IOThreadCreationStopTemplate(Action<IOThreadCreationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IOThreadCreationStartArgs(action, 45, 3, "IOThreadCreation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private IOThreadCreationStartArgs IOThreadRetirementStartTemplate(Action<IOThreadCreationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IOThreadCreationStartArgs(action, 46, 5, "IOThreadRetirement", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private IOThreadCreationStartArgs IOThreadRetirementStopTemplate(Action<IOThreadCreationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IOThreadCreationStartArgs(action, 47, 5, "IOThreadRetirement", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private LoaderAppDomainLoadArgs LoaderAppDomainLoadTemplate(Action<LoaderAppDomainLoadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderAppDomainLoadArgs(action, 156, 10, "Loader", Guid.Empty, 41, "AppDomainLoad", ProviderGuid, ProviderName );
        }
        static private LoaderAppDomainUnloadArgs LoaderAppDomainUnloadTemplate(Action<LoaderAppDomainUnloadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderAppDomainUnloadArgs(action, 157, 10, "Loader", Guid.Empty, 42, "AppDomainUnload", ProviderGuid, ProviderName );
        }
        static private LoaderAssemblyLoadArgs LoaderAssemblyLoadTemplate(Action<LoaderAssemblyLoadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderAssemblyLoadArgs(action, 154, 10, "Loader", Guid.Empty, 37, "AssemblyLoad", ProviderGuid, ProviderName );
        }
        static private LoaderAssemblyUnloadArgs LoaderAssemblyUnloadTemplate(Action<LoaderAssemblyUnloadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderAssemblyUnloadArgs(action, 155, 10, "Loader", Guid.Empty, 38, "AssemblyUnload", ProviderGuid, ProviderName );
        }
        static private LoaderDomainModuleLoadArgs LoaderDomainModuleLoadTemplate(Action<LoaderDomainModuleLoadArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderDomainModuleLoadArgs(action, 151, 10, "Loader", Guid.Empty, 45, "DomainModuleLoad", ProviderGuid, ProviderName );
        }
        static private LoaderModuleDCStartV2Args LoaderModuleDCStartV2Template(Action<LoaderModuleDCStartV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderModuleDCStartV2Args(action, 149, 10, "Loader", Guid.Empty, 35, "ModuleDCStartV2", ProviderGuid, ProviderName );
        }
        static private LoaderModuleDCStopV2Args LoaderModuleDCStopV2Template(Action<LoaderModuleDCStopV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderModuleDCStopV2Args(action, 150, 10, "Loader", Guid.Empty, 36, "ModuleDCStopV2", ProviderGuid, ProviderName );
        }
        static private LoaderModuleDCStopV2Args LoaderModuleLoadTemplate(Action<LoaderModuleDCStopV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderModuleDCStopV2Args(action, 152, 10, "Loader", Guid.Empty, 33, "ModuleLoad", ProviderGuid, ProviderName );
        }
        static private LoaderModuleDCStopV2Args LoaderModuleUnloadTemplate(Action<LoaderModuleDCStopV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LoaderModuleDCStopV2Args(action, 153, 10, "Loader", Guid.Empty, 34, "ModuleUnload", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData MethodDCEndCompleteV2Template(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 136, 9, "Method", Guid.Empty, 15, "DCEndCompleteV2", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData MethodDCStartCompleteV2Template(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 135, 9, "Method", Guid.Empty, 14, "DCStartCompleteV2", ProviderGuid, ProviderName );
        }
        static private MethodDCStartV2Args MethodDCStartV2Template(Action<MethodDCStartV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartV2Args(action, 137, 9, "Method", Guid.Empty, 35, "DCStartV2", ProviderGuid, ProviderName );
        }
        static private MethodDCStartVerboseV2Args MethodDCStartVerboseV2Template(Action<MethodDCStartVerboseV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartVerboseV2Args(action, 139, 9, "Method", Guid.Empty, 39, "DCStartVerboseV2", ProviderGuid, ProviderName );
        }
        static private MethodDCStopV2Args MethodDCStopV2Template(Action<MethodDCStopV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStopV2Args(action, 138, 9, "Method", Guid.Empty, 36, "DCStopV2", ProviderGuid, ProviderName );
        }
        static private MethodDCStartVerboseV2Args MethodDCStopVerboseV2Template(Action<MethodDCStartVerboseV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartVerboseV2Args(action, 140, 9, "Method", Guid.Empty, 40, "DCStopVerboseV2", ProviderGuid, ProviderName );
        }
        static private MethodInliningFailedArgs MethodInliningFailedTemplate(Action<MethodInliningFailedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodInliningFailedArgs(action, 186, 9, "Method", Guid.Empty, 84, "InliningFailed", ProviderGuid, ProviderName );
        }
        static private MethodInliningSucceededArgs MethodInliningSucceededTemplate(Action<MethodInliningSucceededArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodInliningSucceededArgs(action, 185, 9, "Method", Guid.Empty, 83, "InliningSucceeded", ProviderGuid, ProviderName );
        }
        static private MethodJittingStartedArgs MethodJittingStartedTemplate(Action<MethodJittingStartedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodJittingStartedArgs(action, 145, 9, "Method", Guid.Empty, 42, "JittingStarted", ProviderGuid, ProviderName );
        }
        static private MethodDCStartV2Args MethodLoadTemplate(Action<MethodDCStartV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartV2Args(action, 141, 9, "Method", Guid.Empty, 33, "Load", ProviderGuid, ProviderName );
        }
        static private MethodDCStartVerboseV2Args MethodLoadVerboseTemplate(Action<MethodDCStartVerboseV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartVerboseV2Args(action, 143, 9, "Method", Guid.Empty, 37, "LoadVerbose", ProviderGuid, ProviderName );
        }
        static private MethodMethodILToNativeMapArgs MethodMethodILToNativeMapTemplate(Action<MethodMethodILToNativeMapArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodMethodILToNativeMapArgs(action, 190, 9, "Method", Guid.Empty, 87, "MethodILToNativeMap", ProviderGuid, ProviderName );
        }
        static private MethodTailCallFailedArgs MethodTailCallFailedTemplate(Action<MethodTailCallFailedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodTailCallFailedArgs(action, 189, 9, "Method", Guid.Empty, 86, "TailCallFailed", ProviderGuid, ProviderName );
        }
        static private MethodTailCallSucceededArgs MethodTailCallSucceededTemplate(Action<MethodTailCallSucceededArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodTailCallSucceededArgs(action, 188, 9, "Method", Guid.Empty, 85, "TailCallSucceeded", ProviderGuid, ProviderName );
        }
        static private MethodDCStartV2Args MethodUnloadTemplate(Action<MethodDCStartV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartV2Args(action, 142, 9, "Method", Guid.Empty, 34, "Unload", ProviderGuid, ProviderName );
        }
        static private MethodDCStartVerboseV2Args MethodUnloadVerboseTemplate(Action<MethodDCStartVerboseV2Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MethodDCStartVerboseV2Args(action, 144, 9, "Method", Guid.Empty, 38, "UnloadVerbose", ProviderGuid, ProviderName );
        }
        static private RuntimeStartArgs RuntimeStartTemplate(Action<RuntimeStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RuntimeStartArgs(action, 187, 19, "Runtime", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private StrongNameVerificationStartArgs StrongNameVerificationStartTemplate(Action<StrongNameVerificationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StrongNameVerificationStartArgs(action, 181, 12, "StrongNameVerification", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private StrongNameVerificationStartArgs StrongNameVerificationStopTemplate(Action<StrongNameVerificationStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StrongNameVerificationStartArgs(action, 182, 12, "StrongNameVerification", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ThreadCreatingArgs ThreadCreatingTemplate(Action<ThreadCreatingArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadCreatingArgs(action, 70, 24, "Thread", Guid.Empty, 11, "Creating", ProviderGuid, ProviderName );
        }
        static private ThreadPoolEnqueueArgs ThreadPoolDequeueTemplate(Action<ThreadPoolEnqueueArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolEnqueueArgs(action, 62, 23, "ThreadPool", Guid.Empty, 12, "Dequeue", ProviderGuid, ProviderName );
        }
        static private ThreadPoolEnqueueArgs ThreadPoolEnqueueTemplate(Action<ThreadPoolEnqueueArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolEnqueueArgs(action, 61, 23, "ThreadPool", Guid.Empty, 11, "Enqueue", ProviderGuid, ProviderName );
        }
        static private ThreadPoolIODequeueArgs ThreadPoolIODequeueTemplate(Action<ThreadPoolIODequeueArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolIODequeueArgs(action, 64, 23, "ThreadPool", Guid.Empty, 14, "IODequeue", ProviderGuid, ProviderName );
        }
        static private ThreadPoolIOEnqueueArgs ThreadPoolIOEnqueueTemplate(Action<ThreadPoolIOEnqueueArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolIOEnqueueArgs(action, 63, 23, "ThreadPool", Guid.Empty, 13, "IOEnqueue", ProviderGuid, ProviderName );
        }
        static private ThreadPoolIODequeueArgs ThreadPoolIOPackTemplate(Action<ThreadPoolIODequeueArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolIODequeueArgs(action, 65, 23, "ThreadPool", Guid.Empty, 15, "IOPack", ProviderGuid, ProviderName );
        }
        static private ThreadpoolSuspensionV2StartArgs ThreadpoolSuspensionV2StartTemplate(Action<ThreadpoolSuspensionV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadpoolSuspensionV2StartArgs(action, 48, 6, "ThreadpoolSuspensionV2", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ThreadpoolSuspensionV2StartArgs ThreadpoolSuspensionV2StopTemplate(Action<ThreadpoolSuspensionV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadpoolSuspensionV2StartArgs(action, 49, 6, "ThreadpoolSuspensionV2", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadAdjustmentArgs ThreadPoolWorkerThreadAdjustmentTemplate(Action<ThreadPoolWorkerThreadAdjustmentArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadAdjustmentArgs(action, 55, 18, "ThreadPoolWorkerThreadAdjustment", Guid.Empty, 101, "Adjustment", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadAdjustmentSampleArgs ThreadPoolWorkerThreadAdjustmentSampleTemplate(Action<ThreadPoolWorkerThreadAdjustmentSampleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadAdjustmentSampleArgs(action, 54, 18, "ThreadPoolWorkerThreadAdjustment", Guid.Empty, 100, "Sample", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadAdjustmentStatsArgs ThreadPoolWorkerThreadAdjustmentStatsTemplate(Action<ThreadPoolWorkerThreadAdjustmentStatsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadAdjustmentStatsArgs(action, 56, 18, "ThreadPoolWorkerThreadAdjustment", Guid.Empty, 102, "Stats", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadStartArgs ThreadPoolWorkerThreadRetirementStartTemplate(Action<ThreadPoolWorkerThreadStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadStartArgs(action, 52, 17, "ThreadPoolWorkerThreadRetirement", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadStartArgs ThreadPoolWorkerThreadRetirementStopTemplate(Action<ThreadPoolWorkerThreadStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadStartArgs(action, 53, 17, "ThreadPoolWorkerThreadRetirement", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadStartArgs ThreadPoolWorkerThreadStartTemplate(Action<ThreadPoolWorkerThreadStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadStartArgs(action, 50, 16, "ThreadPoolWorkerThread", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadStartArgs ThreadPoolWorkerThreadStopTemplate(Action<ThreadPoolWorkerThreadStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadStartArgs(action, 51, 16, "ThreadPoolWorkerThread", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkerThreadStartArgs ThreadPoolWorkerThreadWaitTemplate(Action<ThreadPoolWorkerThreadStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkerThreadStartArgs(action, 57, 16, "ThreadPoolWorkerThread", Guid.Empty, 90, "Wait", ProviderGuid, ProviderName );
        }
        static private ThreadPoolWorkingThreadCountStartArgs ThreadPoolWorkingThreadCountStartTemplate(Action<ThreadPoolWorkingThreadCountStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadPoolWorkingThreadCountStartArgs(action, 60, 22, "ThreadPoolWorkingThreadCount", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ThreadCreatingArgs ThreadRunningTemplate(Action<ThreadCreatingArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadCreatingArgs(action, 71, 24, "Thread", Guid.Empty, 12, "Running", ProviderGuid, ProviderName );
        }
        static private TypeBulkTypeArgs TypeBulkTypeTemplate(Action<TypeBulkTypeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TypeBulkTypeArgs(action, 15, 21, "Type", Guid.Empty, 10, "BulkType", ProviderGuid, ProviderName );
        }
        static private WorkerThreadCreationV2StartArgs WorkerThreadCreationV2StartTemplate(Action<WorkerThreadCreationV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WorkerThreadCreationV2StartArgs(action, 40, 2, "WorkerThreadCreationV2", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private WorkerThreadCreationV2StartArgs WorkerThreadCreationV2StopTemplate(Action<WorkerThreadCreationV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WorkerThreadCreationV2StartArgs(action, 41, 2, "WorkerThreadCreationV2", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private WorkerThreadCreationV2StartArgs WorkerThreadRetirementV2StartTemplate(Action<WorkerThreadCreationV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WorkerThreadCreationV2StartArgs(action, 42, 4, "WorkerThreadRetirementV2", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private WorkerThreadCreationV2StartArgs WorkerThreadRetirementV2StopTemplate(Action<WorkerThreadCreationV2StartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WorkerThreadCreationV2StartArgs(action, 43, 4, "WorkerThreadRetirementV2", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[166];
                templates[0] = GCStartTemplate(null);
                templates[1] = GCStartTemplate(null);
                templates[2] = GCStartTemplate(null);
                templates[3] = GCStopTemplate(null);
                templates[4] = GCStopTemplate(null);
                templates[5] = GCRestartEEStopTemplate(null);
                templates[6] = GCRestartEEStopTemplate(null);
                templates[7] = GCHeapStatsTemplate(null);
                templates[8] = GCHeapStatsTemplate(null);
                templates[9] = GCCreateSegmentTemplate(null);
                templates[10] = GCCreateSegmentTemplate(null);
                templates[11] = GCFreeSegmentTemplate(null);
                templates[12] = GCFreeSegmentTemplate(null);
                templates[13] = GCRestartEEStartTemplate(null);
                templates[14] = GCRestartEEStartTemplate(null);
                templates[15] = GCSuspendEEStopTemplate(null);
                templates[16] = GCSuspendEEStopTemplate(null);
                templates[17] = GCSuspendEEStartTemplate(null);
                templates[18] = GCSuspendEEStartTemplate(null);
                templates[19] = GCAllocationTickTemplate(null);
                templates[20] = GCAllocationTickTemplate(null);
                templates[21] = GCAllocationTickTemplate(null);
                templates[22] = GCAllocationTickTemplate(null);
                templates[23] = GCCreateConcurrentThreadTemplate(null);
                templates[24] = GCCreateConcurrentThreadTemplate(null);
                templates[25] = GCTerminateConcurrentThreadTemplate(null);
                templates[26] = GCTerminateConcurrentThreadTemplate(null);
                templates[27] = GCFinalizersStopTemplate(null);
                templates[28] = GCFinalizersStopTemplate(null);
                templates[29] = GCFinalizersStartTemplate(null);
                templates[30] = GCFinalizersStartTemplate(null);
                templates[31] = TypeBulkTypeTemplate(null);
                templates[32] = GCGCBulkRootEdgeTemplate(null);
                templates[33] = GCGCBulkRootConditionalWeakTableElementEdgeTemplate(null);
                templates[34] = GCGCBulkNodeTemplate(null);
                templates[35] = GCGCBulkEdgeTemplate(null);
                templates[36] = GCGCSampledObjectAllocationTemplate(null);
                templates[37] = GCGCBulkSurvivingObjectRangesTemplate(null);
                templates[38] = GCGCBulkMovedObjectRangesTemplate(null);
                templates[39] = GCGCGenerationRangeTemplate(null);
                templates[40] = GCMarkStackRootsTemplate(null);
                templates[41] = GCMarkFinalizeQueueRootsTemplate(null);
                templates[42] = GCMarkHandlesTemplate(null);
                templates[43] = GCMarkCardsTemplate(null);
                templates[44] = GCFinalizeObjectTemplate(null);
                templates[45] = GCSetGCHandleTemplate(null);
                templates[46] = GCDestoryGCHandleTemplate(null);
                templates[47] = GCGCSampledObjectAllocationTemplate(null);
                templates[48] = GCPinObjectAtGCTimeTemplate(null);
                templates[49] = GCTriggeredTemplate(null);
                templates[50] = GCGCBulkRootCCWTemplate(null);
                templates[51] = GCGCBulkRCWTemplate(null);
                templates[52] = GCGCBulkRootStaticVarTemplate(null);
                templates[53] = WorkerThreadCreationV2StartTemplate(null);
                templates[54] = WorkerThreadCreationV2StopTemplate(null);
                templates[55] = WorkerThreadRetirementV2StartTemplate(null);
                templates[56] = WorkerThreadRetirementV2StopTemplate(null);
                templates[57] = IOThreadCreationStartTemplate(null);
                templates[58] = IOThreadCreationStartTemplate(null);
                templates[59] = IOThreadCreationStopTemplate(null);
                templates[60] = IOThreadCreationStopTemplate(null);
                templates[61] = IOThreadRetirementStartTemplate(null);
                templates[62] = IOThreadRetirementStartTemplate(null);
                templates[63] = IOThreadRetirementStopTemplate(null);
                templates[64] = IOThreadRetirementStopTemplate(null);
                templates[65] = ThreadpoolSuspensionV2StartTemplate(null);
                templates[66] = ThreadpoolSuspensionV2StopTemplate(null);
                templates[67] = ThreadPoolWorkerThreadStartTemplate(null);
                templates[68] = ThreadPoolWorkerThreadStopTemplate(null);
                templates[69] = ThreadPoolWorkerThreadRetirementStartTemplate(null);
                templates[70] = ThreadPoolWorkerThreadRetirementStopTemplate(null);
                templates[71] = ThreadPoolWorkerThreadAdjustmentSampleTemplate(null);
                templates[72] = ThreadPoolWorkerThreadAdjustmentTemplate(null);
                templates[73] = ThreadPoolWorkerThreadAdjustmentStatsTemplate(null);
                templates[74] = ThreadPoolWorkerThreadWaitTemplate(null);
                templates[75] = ThreadPoolWorkingThreadCountStartTemplate(null);
                templates[76] = ThreadPoolEnqueueTemplate(null);
                templates[77] = ThreadPoolDequeueTemplate(null);
                templates[78] = ThreadPoolIOEnqueueTemplate(null);
                templates[79] = ThreadPoolIODequeueTemplate(null);
                templates[80] = ThreadPoolIOPackTemplate(null);
                templates[81] = ThreadCreatingTemplate(null);
                templates[82] = ThreadRunningTemplate(null);
                templates[83] = ExceptionStartTemplate(null);
                templates[84] = ExceptionStartTemplate(null);
                templates[85] = ContentionStartTemplate(null);
                templates[86] = ContentionStartTemplate(null);
                templates[87] = ClrStackWalkTemplate(null);
                templates[88] = AppDomainResourceManagementMemAllocatedTemplate(null);
                templates[89] = AppDomainResourceManagementMemSurvivedTemplate(null);
                templates[90] = AppDomainResourceManagementThreadCreatedTemplate(null);
                templates[91] = AppDomainResourceManagementThreadTerminatedTemplate(null);
                templates[92] = AppDomainResourceManagementDomainEnterTemplate(null);
                templates[93] = ILStubStubGeneratedTemplate(null);
                templates[94] = ILStubStubCacheHitTemplate(null);
                templates[95] = ContentionStopTemplate(null);
                templates[96] = MethodDCStartCompleteV2Template(null);
                templates[97] = MethodDCEndCompleteV2Template(null);
                templates[98] = MethodDCStartV2Template(null);
                templates[99] = MethodDCStopV2Template(null);
                templates[100] = MethodDCStartVerboseV2Template(null);
                templates[101] = MethodDCStopVerboseV2Template(null);
                templates[102] = MethodLoadTemplate(null);
                templates[103] = MethodLoadTemplate(null);
                templates[104] = MethodLoadTemplate(null);
                templates[105] = MethodUnloadTemplate(null);
                templates[106] = MethodUnloadTemplate(null);
                templates[107] = MethodUnloadTemplate(null);
                templates[108] = MethodLoadVerboseTemplate(null);
                templates[109] = MethodLoadVerboseTemplate(null);
                templates[110] = MethodLoadVerboseTemplate(null);
                templates[111] = MethodUnloadVerboseTemplate(null);
                templates[112] = MethodUnloadVerboseTemplate(null);
                templates[113] = MethodUnloadVerboseTemplate(null);
                templates[114] = MethodJittingStartedTemplate(null);
                templates[115] = MethodJittingStartedTemplate(null);
                templates[116] = LoaderModuleDCStartV2Template(null);
                templates[117] = LoaderModuleDCStopV2Template(null);
                templates[118] = LoaderDomainModuleLoadTemplate(null);
                templates[119] = LoaderDomainModuleLoadTemplate(null);
                templates[120] = LoaderModuleLoadTemplate(null);
                templates[121] = LoaderModuleLoadTemplate(null);
                templates[122] = LoaderModuleLoadTemplate(null);
                templates[123] = LoaderModuleUnloadTemplate(null);
                templates[124] = LoaderModuleUnloadTemplate(null);
                templates[125] = LoaderModuleUnloadTemplate(null);
                templates[126] = LoaderAssemblyLoadTemplate(null);
                templates[127] = LoaderAssemblyLoadTemplate(null);
                templates[128] = LoaderAssemblyUnloadTemplate(null);
                templates[129] = LoaderAssemblyUnloadTemplate(null);
                templates[130] = LoaderAppDomainLoadTemplate(null);
                templates[131] = LoaderAppDomainLoadTemplate(null);
                templates[132] = LoaderAppDomainUnloadTemplate(null);
                templates[133] = LoaderAppDomainUnloadTemplate(null);
                templates[134] = ClrPerfTrackModuleRangeLoadTemplate(null);
                templates[135] = StrongNameVerificationStartTemplate(null);
                templates[136] = StrongNameVerificationStartTemplate(null);
                templates[137] = StrongNameVerificationStopTemplate(null);
                templates[138] = StrongNameVerificationStopTemplate(null);
                templates[139] = AuthenticodeVerificationStartTemplate(null);
                templates[140] = AuthenticodeVerificationStartTemplate(null);
                templates[141] = AuthenticodeVerificationStopTemplate(null);
                templates[142] = AuthenticodeVerificationStopTemplate(null);
                templates[143] = MethodInliningSucceededTemplate(null);
                templates[144] = MethodInliningFailedTemplate(null);
                templates[145] = RuntimeStartTemplate(null);
                templates[146] = MethodTailCallSucceededTemplate(null);
                templates[147] = MethodTailCallFailedTemplate(null);
                templates[148] = MethodMethodILToNativeMapTemplate(null);
                templates[149] = GCIncreaseMemoryPressureTemplate(null);
                templates[150] = GCDecreaseMemoryPressureTemplate(null);
                templates[151] = GCMarkTemplate(null);
                templates[152] = GCGCJoinTemplate(null);
                templates[153] = GCPerHeapHistoryTemplate(null);
                templates[154] = GCGlobalHeapHistoryTemplate(null);
                templates[155] = DebugIPCEventStartTemplate(null);
                templates[156] = DebugIPCEventStopTemplate(null);
                templates[157] = DebugExceptionProcessingStartTemplate(null);
                templates[158] = DebugExceptionProcessingStopTemplate(null);
                templates[159] = ExceptionCatchStartTemplate(null);
                templates[160] = ExceptionCatchStopTemplate(null);
                templates[161] = ExceptionFinallyStartTemplate(null);
                templates[162] = ExceptionFinallyStopTemplate(null);
                templates[163] = ExceptionFilterStartTemplate(null);
                templates[164] = ExceptionFilterStopTemplate(null);
                templates[165] = ExceptionStopTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsDotNETRuntime
{
    public sealed class AppDomainResourceManagementThreadTerminatedArgs : TraceEvent
    {
        public long ManagedThreadID { get { return GetInt64At(0); } }
        public long AppDomainID { get { return GetInt64At(8); } }
        public int ClrInstanceID { get { return GetInt16At(16); } }

        #region Private
        internal AppDomainResourceManagementThreadTerminatedArgs(Action<AppDomainResourceManagementThreadTerminatedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AppDomainResourceManagementThreadTerminatedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ManagedThreadID", ManagedThreadID);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ManagedThreadID", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ManagedThreadID;
                case 1:
                    return AppDomainID;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppDomainResourceManagementThreadTerminatedArgs> m_target;
        #endregion
    }
    public sealed class AppDomainResourceManagementMemAllocatedArgs : TraceEvent
    {
        public long AppDomainID { get { return GetInt64At(0); } }
        public long Allocated { get { return GetInt64At(8); } }
        public int ClrInstanceID { get { return GetInt16At(16); } }

        #region Private
        internal AppDomainResourceManagementMemAllocatedArgs(Action<AppDomainResourceManagementMemAllocatedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AppDomainResourceManagementMemAllocatedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "Allocated", Allocated);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppDomainID", "Allocated", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppDomainID;
                case 1:
                    return Allocated;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppDomainResourceManagementMemAllocatedArgs> m_target;
        #endregion
    }
    public sealed class AppDomainResourceManagementMemSurvivedArgs : TraceEvent
    {
        public long AppDomainID { get { return GetInt64At(0); } }
        public long Survived { get { return GetInt64At(8); } }
        public long ProcessSurvived { get { return GetInt64At(16); } }
        public int ClrInstanceID { get { return GetInt16At(24); } }

        #region Private
        internal AppDomainResourceManagementMemSurvivedArgs(Action<AppDomainResourceManagementMemSurvivedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 26));
            Debug.Assert(!(Version > 0 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AppDomainResourceManagementMemSurvivedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "Survived", Survived);
             XmlAttrib(sb, "ProcessSurvived", ProcessSurvived);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppDomainID", "Survived", "ProcessSurvived", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppDomainID;
                case 1:
                    return Survived;
                case 2:
                    return ProcessSurvived;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppDomainResourceManagementMemSurvivedArgs> m_target;
        #endregion
    }
    public sealed class AppDomainResourceManagementThreadCreatedArgs : TraceEvent
    {
        public long ManagedThreadID { get { return GetInt64At(0); } }
        public long AppDomainID { get { return GetInt64At(8); } }
        public ThreadFlags Flags { get { return (ThreadFlags)GetInt32At(16); } }
        public int ManagedThreadIndex { get { return GetInt32At(20); } }
        public int OSThreadID { get { return GetInt32At(24); } }
        public int ClrInstanceID { get { return GetInt16At(28); } }

        #region Private
        internal AppDomainResourceManagementThreadCreatedArgs(Action<AppDomainResourceManagementThreadCreatedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 30));
            Debug.Assert(!(Version > 0 && EventDataLength < 30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AppDomainResourceManagementThreadCreatedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ManagedThreadID", ManagedThreadID);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "ManagedThreadIndex", ManagedThreadIndex);
             XmlAttrib(sb, "OSThreadID", OSThreadID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ManagedThreadID", "AppDomainID", "Flags", "ManagedThreadIndex", "OSThreadID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ManagedThreadID;
                case 1:
                    return AppDomainID;
                case 2:
                    return Flags;
                case 3:
                    return ManagedThreadIndex;
                case 4:
                    return OSThreadID;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppDomainResourceManagementThreadCreatedArgs> m_target;
        #endregion
    }
    public sealed class AuthenticodeVerificationStartArgs : TraceEvent
    {
        public int VerificationFlags { get { return GetInt32At(0); } }
        public int ErrorCode { get { return GetInt32At(4); } }
        public string ModulePath { get { return GetUnicodeStringAt(8); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(8)); return 0; } }

        #region Private
        internal AuthenticodeVerificationStartArgs(Action<AuthenticodeVerificationStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(8)+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(8)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AuthenticodeVerificationStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VerificationFlags", VerificationFlags);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "ModulePath", ModulePath);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VerificationFlags", "ErrorCode", "ModulePath", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VerificationFlags;
                case 1:
                    return ErrorCode;
                case 2:
                    return ModulePath;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AuthenticodeVerificationStartArgs> m_target;
        #endregion
    }
    public sealed class ClrPerfTrackModuleRangeLoadArgs : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public long ModuleID { get { return GetInt64At(2); } }
        public int RangeBegin { get { return GetInt32At(10); } }
        public int RangeSize { get { return GetInt32At(14); } }
        public ModuleRangeType RangeType { get { return (ModuleRangeType)GetByteAt(18); } }

        #region Private
        internal ClrPerfTrackModuleRangeLoadArgs(Action<ClrPerfTrackModuleRangeLoadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 19));
            Debug.Assert(!(Version > 0 && EventDataLength < 19));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ClrPerfTrackModuleRangeLoadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "RangeBegin", RangeBegin);
             XmlAttrib(sb, "RangeSize", RangeSize);
             XmlAttrib(sb, "RangeType", RangeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "ModuleID", "RangeBegin", "RangeSize", "RangeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return ModuleID;
                case 2:
                    return RangeBegin;
                case 3:
                    return RangeSize;
                case 4:
                    return RangeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ClrPerfTrackModuleRangeLoadArgs> m_target;
        #endregion
    }
    public sealed class ClrStackWalkArgs : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        // Skipping Reserved1
        // Skipping Reserved2
        public int FrameCount { get { return GetInt32At(4); } }
        public Address Stack { get { return GetAddressAt(8); } }

        #region Private
        internal ClrStackWalkArgs(Action<ClrStackWalkArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ClrStackWalkArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "FrameCount", FrameCount);
             XmlAttribHex(sb, "Stack", Stack);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "FrameCount", "Stack"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return FrameCount;
                case 2:
                    return Stack;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ClrStackWalkArgs> m_target;
        #endregion
    }
    public sealed class EmptyTraceData : TraceEvent
    {
        public int ContentionFlags { get { if (Version >= 1) return GetByteAt(0); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(1); return 0; } }

        #region Private
        internal EmptyTraceData(Action<EmptyTraceData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 3));
            Debug.Assert(!(Version > 1 && EventDataLength < 3));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EmptyTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContentionFlags", ContentionFlags);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContentionFlags", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContentionFlags;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EmptyTraceData> m_target;
        #endregion
    }
    public sealed class ContentionStopArgs : TraceEvent
    {
        public ContentionFlags ContentionFlags { get { return (ContentionFlags)GetByteAt(0); } }
        public int ClrInstanceID { get { return GetInt16At(1); } }

        #region Private
        internal ContentionStopArgs(Action<ContentionStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 3));
            Debug.Assert(!(Version > 0 && EventDataLength < 3));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ContentionStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContentionFlags", ContentionFlags);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContentionFlags", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContentionFlags;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ContentionStopArgs> m_target;
        #endregion
    }
    public sealed class ExceptionCatchStartArgs : TraceEvent
    {
        public long EntryEIP { get { return GetInt64At(0); } }
        public long MethodID { get { return GetInt64At(8); } }
        public string MethodName { get { return GetUnicodeStringAt(16); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(16)); } }

        #region Private
        internal ExceptionCatchStartArgs(Action<ExceptionCatchStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(16)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(16)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ExceptionCatchStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryEIP", EntryEIP);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "MethodName", MethodName);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryEIP", "MethodID", "MethodName", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryEIP;
                case 1:
                    return MethodID;
                case 2:
                    return MethodName;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ExceptionCatchStartArgs> m_target;
        #endregion
    }
    public sealed class GCAllocationTickArgs : TraceEvent
    {
        public int AllocationAmount { get { return GetInt32At(0); } }
        public BAD_MERGE_OF_int_AND_BAD_MERGE_OF_int_AND_BAD_MERGE_OF_int_AND_GCAllocationKind AllocationKind { get { if (Version >= 1) return GetInt32At(4); return (GCAllocationKind)GetInt32At(4); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }
        public long AllocationAmount64 { get { if (Version >= 2) return GetInt64At(10); return 0; } }
        public Address TypeID { get { if (Version >= 2) return GetAddressAt(18); return 0; } }
        public string TypeName { get { if (Version >= 2) return GetUnicodeStringAt(HostOffset(22, 1)); return ""; } }
        public int HeapIndex { get { if (Version >= 2) return GetInt32At(SkipUnicodeString(HostOffset(22, 1))); return 0; } }
        public Address Address { get { if (Version >= 3) return GetAddressAt(SkipUnicodeString(HostOffset(22, 1))+4); return 0; } }

        #region Private
        internal GCAllocationTickArgs(Action<GCAllocationTickArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(HostOffset(22, 1))+4));
            Debug.Assert(!(Version == 3 && EventDataLength != HostOffset(SkipUnicodeString(HostOffset(22, 1))+8, 1)));
            Debug.Assert(!(Version > 3 && EventDataLength < HostOffset(SkipUnicodeString(HostOffset(22, 1))+8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCAllocationTickArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AllocationAmount", AllocationAmount);
             XmlAttrib(sb, "AllocationKind", AllocationKind);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "AllocationAmount64", AllocationAmount64);
             XmlAttribHex(sb, "TypeID", TypeID);
             XmlAttrib(sb, "TypeName", TypeName);
             XmlAttrib(sb, "HeapIndex", HeapIndex);
             XmlAttribHex(sb, "Address", Address);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AllocationAmount", "AllocationKind", "ClrInstanceID", "AllocationAmount64", "TypeID", "TypeName", "HeapIndex", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AllocationAmount;
                case 1:
                    return AllocationKind;
                case 2:
                    return ClrInstanceID;
                case 3:
                    return AllocationAmount64;
                case 4:
                    return TypeID;
                case 5:
                    return TypeName;
                case 6:
                    return HeapIndex;
                case 7:
                    return Address;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCAllocationTickArgs> m_target;
        #endregion
    }
    public sealed class GCCreateSegmentArgs : TraceEvent
    {
        public long Address { get { return GetInt64At(0); } }
        public long Size { get { return GetInt64At(8); } }
        public BAD_MERGE_OF_int_AND_GCSegmentType Type { get { if (Version >= 1) return GetInt32At(16); return (GCSegmentType)GetInt32At(16); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(20); return 0; } }

        #region Private
        internal GCCreateSegmentArgs(Action<GCCreateSegmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version == 1 && EventDataLength != 22));
            Debug.Assert(!(Version > 1 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCCreateSegmentArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Address", "Size", "Type", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Address;
                case 1:
                    return Size;
                case 2:
                    return Type;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCCreateSegmentArgs> m_target;
        #endregion
    }
    public sealed class GCDecreaseMemoryPressureArgs : TraceEvent
    {
        public long BytesFreed { get { return GetInt64At(0); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }

        #region Private
        internal GCDecreaseMemoryPressureArgs(Action<GCDecreaseMemoryPressureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCDecreaseMemoryPressureArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BytesFreed", BytesFreed);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BytesFreed", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BytesFreed;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCDecreaseMemoryPressureArgs> m_target;
        #endregion
    }
    public sealed class GCDestoryGCHandleArgs : TraceEvent
    {
        public Address HandleID { get { return GetAddressAt(0); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(4, 1)); } }

        #region Private
        internal GCDestoryGCHandleArgs(Action<GCDestoryGCHandleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(6, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(6, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCDestoryGCHandleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HandleID", HandleID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HandleID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HandleID;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCDestoryGCHandleArgs> m_target;
        #endregion
    }
    public sealed class GCFinalizeObjectArgs : TraceEvent
    {
        public Address TypeID { get { return GetAddressAt(0); } }
        public Address ObjectID { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(8, 2)); } }

        #region Private
        internal GCFinalizeObjectArgs(Action<GCFinalizeObjectArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(10, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(10, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCFinalizeObjectArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "TypeID", TypeID);
             XmlAttribHex(sb, "ObjectID", ObjectID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TypeID", "ObjectID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TypeID;
                case 1:
                    return ObjectID;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCFinalizeObjectArgs> m_target;
        #endregion
    }
    public sealed class GCFinalizersStopArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(4); return 0; } }

        #region Private
        internal GCFinalizersStopArgs(Action<GCFinalizersStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version == 1 && EventDataLength != 6));
            Debug.Assert(!(Version > 1 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCFinalizersStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCFinalizersStopArgs> m_target;
        #endregion
    }
    public sealed class GCFreeSegmentArgs : TraceEvent
    {
        public long Address { get { return GetInt64At(0); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }

        #region Private
        internal GCFreeSegmentArgs(Action<GCFreeSegmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCFreeSegmentArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Address", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Address;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCFreeSegmentArgs> m_target;
        #endregion
    }
    public sealed class GCGCBulkRootEdgeArgs : TraceEvent
    {
        public int Index { get { return GetInt32At(0); } }
        public int Count { get { return GetInt32At(4); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }
        public int Values(int arrayIndex) { return GetByteAt(10 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal GCGCBulkRootEdgeArgs(Action<GCGCBulkRootEdgeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Count*1)+10));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Count*1)+10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGCBulkRootEdgeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Index", "Count", "ClrInstanceID", "Values"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Index;
                case 1:
                    return Count;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGCBulkRootEdgeArgs> m_target;
        #endregion
    }
    public sealed class TypeBulkTypeArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }
        public int Values(int arrayIndex) { return GetByteAt(6 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TypeBulkTypeArgs(Action<TypeBulkTypeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Count*1)+6));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Count*1)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TypeBulkTypeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "ClrInstanceID", "Values"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TypeBulkTypeArgs> m_target;
        #endregion
    }
    public sealed class GCGCBulkRootStaticVarArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public long AppDomainID { get { return GetInt64At(4); } }
        public int ClrInstanceID { get { return GetInt16At(12); } }
        public int Values(int arrayIndex) { return GetByteAt(14 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal GCGCBulkRootStaticVarArgs(Action<GCGCBulkRootStaticVarArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Count*1)+14));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Count*1)+14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGCBulkRootStaticVarArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "AppDomainID", "ClrInstanceID", "Values"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return AppDomainID;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGCBulkRootStaticVarArgs> m_target;
        #endregion
    }
    public sealed class GCGCGenerationRangeArgs : TraceEvent
    {
        public int Generation { get { return GetByteAt(0); } }
        public Address RangeStart { get { return GetAddressAt(1); } }
        public long RangeUsedLength { get { return GetInt64At(HostOffset(5, 1)); } }
        public long RangeReservedLength { get { return GetInt64At(HostOffset(13, 1)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(21, 1)); } }

        #region Private
        internal GCGCGenerationRangeArgs(Action<GCGCGenerationRangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(23, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(23, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGCGenerationRangeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Generation", Generation);
             XmlAttribHex(sb, "RangeStart", RangeStart);
             XmlAttrib(sb, "RangeUsedLength", RangeUsedLength);
             XmlAttrib(sb, "RangeReservedLength", RangeReservedLength);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Generation", "RangeStart", "RangeUsedLength", "RangeReservedLength", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Generation;
                case 1:
                    return RangeStart;
                case 2:
                    return RangeUsedLength;
                case 3:
                    return RangeReservedLength;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGCGenerationRangeArgs> m_target;
        #endregion
    }
    public sealed class GCGCJoinArgs_V2 : TraceEvent
    {
        public int Heap { get { return GetInt32At(0); } }
        public int JoinTime { get { return GetInt32At(4); } }
        public int JoinType { get { return GetInt32At(8); } }
        public int ClrInstanceID { get { return GetInt16At(12); } }
        public int JoinID { get { return GetInt32At(14); } }

        #region Private
        internal GCGCJoinArgs_V2(Action<GCGCJoinArgs_V2> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 18));
            Debug.Assert(!(Version > 2 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGCJoinArgs_V2>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Heap", Heap);
             XmlAttrib(sb, "JoinTime", JoinTime);
             XmlAttrib(sb, "JoinType", JoinType);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "JoinID", JoinID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Heap", "JoinTime", "JoinType", "ClrInstanceID", "JoinID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Heap;
                case 1:
                    return JoinTime;
                case 2:
                    return JoinType;
                case 3:
                    return ClrInstanceID;
                case 4:
                    return JoinID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGCJoinArgs_V2> m_target;
        #endregion
    }
    public sealed class GCGCSampledObjectAllocationArgs : TraceEvent
    {
        public Address Address { get { return GetAddressAt(0); } }
        public Address TypeID { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int ObjectCountForTypeSample { get { return GetInt32At(HostOffset(8, 2)); } }
        public long TotalSizeForTypeSample { get { return GetInt64At(HostOffset(12, 2)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(20, 2)); } }

        #region Private
        internal GCGCSampledObjectAllocationArgs(Action<GCGCSampledObjectAllocationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(22, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(22, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGCSampledObjectAllocationArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Address", Address);
             XmlAttribHex(sb, "TypeID", TypeID);
             XmlAttrib(sb, "ObjectCountForTypeSample", ObjectCountForTypeSample);
             XmlAttrib(sb, "TotalSizeForTypeSample", TotalSizeForTypeSample);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Address", "TypeID", "ObjectCountForTypeSample", "TotalSizeForTypeSample", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Address;
                case 1:
                    return TypeID;
                case 2:
                    return ObjectCountForTypeSample;
                case 3:
                    return TotalSizeForTypeSample;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGCSampledObjectAllocationArgs> m_target;
        #endregion
    }
    public sealed class GCGlobalHeapHistoryArgs_V2 : TraceEvent
    {
        public long FinalYoungestDesired { get { return GetInt64At(0); } }
        public int NumHeaps { get { return GetInt32At(8); } }
        public int CondemnedGeneration { get { return GetInt32At(12); } }
        public int Gen0ReductionCount { get { return GetInt32At(16); } }
        public int Reason { get { return GetInt32At(20); } }
        public int GlobalMechanisms { get { return GetInt32At(24); } }
        public int ClrInstanceID { get { return GetInt16At(28); } }
        public int PauseMode { get { return GetInt32At(30); } }
        public int MemoryPressure { get { return GetInt32At(34); } }

        #region Private
        internal GCGlobalHeapHistoryArgs_V2(Action<GCGlobalHeapHistoryArgs_V2> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 38));
            Debug.Assert(!(Version > 2 && EventDataLength < 38));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCGlobalHeapHistoryArgs_V2>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FinalYoungestDesired", FinalYoungestDesired);
             XmlAttrib(sb, "NumHeaps", NumHeaps);
             XmlAttrib(sb, "CondemnedGeneration", CondemnedGeneration);
             XmlAttrib(sb, "Gen0ReductionCount", Gen0ReductionCount);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "GlobalMechanisms", GlobalMechanisms);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "PauseMode", PauseMode);
             XmlAttrib(sb, "MemoryPressure", MemoryPressure);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FinalYoungestDesired", "NumHeaps", "CondemnedGeneration", "Gen0ReductionCount", "Reason", "GlobalMechanisms", "ClrInstanceID", "PauseMode", "MemoryPressure"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FinalYoungestDesired;
                case 1:
                    return NumHeaps;
                case 2:
                    return CondemnedGeneration;
                case 3:
                    return Gen0ReductionCount;
                case 4:
                    return Reason;
                case 5:
                    return GlobalMechanisms;
                case 6:
                    return ClrInstanceID;
                case 7:
                    return PauseMode;
                case 8:
                    return MemoryPressure;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGlobalHeapHistoryArgs_V2> m_target;
        #endregion
    }
    public sealed class GCHeapStatsArgs : TraceEvent
    {
        public long GenerationSize0 { get { return GetInt64At(0); } }
        public long TotalPromotedSize0 { get { return GetInt64At(8); } }
        public long GenerationSize1 { get { return GetInt64At(16); } }
        public long TotalPromotedSize1 { get { return GetInt64At(24); } }
        public long GenerationSize2 { get { return GetInt64At(32); } }
        public long TotalPromotedSize2 { get { return GetInt64At(40); } }
        public long GenerationSize3 { get { return GetInt64At(48); } }
        public long TotalPromotedSize3 { get { return GetInt64At(56); } }
        public long FinalizationPromotedSize { get { return GetInt64At(64); } }
        public long FinalizationPromotedCount { get { return GetInt64At(72); } }
        public int PinnedObjectCount { get { return GetInt32At(80); } }
        public int SinkBlockCount { get { return GetInt32At(84); } }
        public int GCHandleCount { get { return GetInt32At(88); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(92); return 0; } }

        #region Private
        internal GCHeapStatsArgs(Action<GCHeapStatsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 92));
            Debug.Assert(!(Version == 1 && EventDataLength != 94));
            Debug.Assert(!(Version > 1 && EventDataLength < 94));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCHeapStatsArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GenerationSize0", GenerationSize0);
             XmlAttrib(sb, "TotalPromotedSize0", TotalPromotedSize0);
             XmlAttrib(sb, "GenerationSize1", GenerationSize1);
             XmlAttrib(sb, "TotalPromotedSize1", TotalPromotedSize1);
             XmlAttrib(sb, "GenerationSize2", GenerationSize2);
             XmlAttrib(sb, "TotalPromotedSize2", TotalPromotedSize2);
             XmlAttrib(sb, "GenerationSize3", GenerationSize3);
             XmlAttrib(sb, "TotalPromotedSize3", TotalPromotedSize3);
             XmlAttrib(sb, "FinalizationPromotedSize", FinalizationPromotedSize);
             XmlAttrib(sb, "FinalizationPromotedCount", FinalizationPromotedCount);
             XmlAttrib(sb, "PinnedObjectCount", PinnedObjectCount);
             XmlAttrib(sb, "SinkBlockCount", SinkBlockCount);
             XmlAttrib(sb, "GCHandleCount", GCHandleCount);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GenerationSize0", "TotalPromotedSize0", "GenerationSize1", "TotalPromotedSize1", "GenerationSize2", "TotalPromotedSize2", "GenerationSize3", "TotalPromotedSize3", "FinalizationPromotedSize", "FinalizationPromotedCount", "PinnedObjectCount", "SinkBlockCount", "GCHandleCount", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GenerationSize0;
                case 1:
                    return TotalPromotedSize0;
                case 2:
                    return GenerationSize1;
                case 3:
                    return TotalPromotedSize1;
                case 4:
                    return GenerationSize2;
                case 5:
                    return TotalPromotedSize2;
                case 6:
                    return GenerationSize3;
                case 7:
                    return TotalPromotedSize3;
                case 8:
                    return FinalizationPromotedSize;
                case 9:
                    return FinalizationPromotedCount;
                case 10:
                    return PinnedObjectCount;
                case 11:
                    return SinkBlockCount;
                case 12:
                    return GCHandleCount;
                case 13:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCHeapStatsArgs> m_target;
        #endregion
    }
    public sealed class GCIncreaseMemoryPressureArgs : TraceEvent
    {
        public long BytesAllocated { get { return GetInt64At(0); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }

        #region Private
        internal GCIncreaseMemoryPressureArgs(Action<GCIncreaseMemoryPressureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCIncreaseMemoryPressureArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BytesAllocated", BytesAllocated);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BytesAllocated", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BytesAllocated;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCIncreaseMemoryPressureArgs> m_target;
        #endregion
    }
    public sealed class GCMarkArgs : TraceEvent
    {
        public int HeapNum { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }
        public int Type { get { return GetInt32At(6); } }
        public long Bytes { get { return GetInt64At(10); } }

        #region Private
        internal GCMarkArgs(Action<GCMarkArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCMarkArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HeapNum", HeapNum);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Bytes", Bytes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HeapNum", "ClrInstanceID", "Type", "Bytes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HeapNum;
                case 1:
                    return ClrInstanceID;
                case 2:
                    return Type;
                case 3:
                    return Bytes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCMarkArgs> m_target;
        #endregion
    }
    public sealed class GCMarkStackRootsArgs : TraceEvent
    {
        public int HeapNum { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }

        #region Private
        internal GCMarkStackRootsArgs(Action<GCMarkStackRootsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCMarkStackRootsArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HeapNum", HeapNum);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HeapNum", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HeapNum;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCMarkStackRootsArgs> m_target;
        #endregion
    }
    public sealed class GCPerHeapHistoryArgs_V3 : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public Address FreeListAllocated { get { return GetAddressAt(2); } }
        public Address FreeListRejected { get { return GetAddressAt(HostOffset(6, 1)); } }
        public Address EndOfSegAllocated { get { return GetAddressAt(HostOffset(10, 2)); } }
        public Address CondemnedAllocated { get { return GetAddressAt(HostOffset(14, 3)); } }
        public Address PinnedAllocated { get { return GetAddressAt(HostOffset(18, 4)); } }
        public Address PinnedAllocatedAdvance { get { return GetAddressAt(HostOffset(22, 5)); } }
        public int RunningFreeListEfficiency { get { return GetInt32At(HostOffset(26, 6)); } }
        public int CondemnReasons0 { get { return GetInt32At(HostOffset(30, 6)); } }
        public int CondemnReasons1 { get { return GetInt32At(HostOffset(34, 6)); } }
        public int CompactMechanisms { get { return GetInt32At(HostOffset(38, 6)); } }
        public int ExpandMechanisms { get { return GetInt32At(HostOffset(42, 6)); } }
        public int HeapIndex { get { return GetInt32At(HostOffset(46, 6)); } }
        public Address ExtraGen0Commit { get { return GetAddressAt(HostOffset(50, 6)); } }
        public int Count { get { return GetInt32At(HostOffset(54, 7)); } }
        public Address Values(int arrayIndex) { return GetAddressAt(HostOffset(58, 7) + (arrayIndex * HostOffset(4, 1))); }

        #region Private
        internal GCPerHeapHistoryArgs_V3(Action<GCPerHeapHistoryArgs_V3> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != HostOffset(0+ (Count*4)+58, 8)));
            Debug.Assert(!(Version > 3 && EventDataLength < HostOffset(0+ (Count*4)+58, 8)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCPerHeapHistoryArgs_V3>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttribHex(sb, "FreeListAllocated", FreeListAllocated);
             XmlAttribHex(sb, "FreeListRejected", FreeListRejected);
             XmlAttribHex(sb, "EndOfSegAllocated", EndOfSegAllocated);
             XmlAttribHex(sb, "CondemnedAllocated", CondemnedAllocated);
             XmlAttribHex(sb, "PinnedAllocated", PinnedAllocated);
             XmlAttribHex(sb, "PinnedAllocatedAdvance", PinnedAllocatedAdvance);
             XmlAttrib(sb, "RunningFreeListEfficiency", RunningFreeListEfficiency);
             XmlAttrib(sb, "CondemnReasons0", CondemnReasons0);
             XmlAttrib(sb, "CondemnReasons1", CondemnReasons1);
             XmlAttrib(sb, "CompactMechanisms", CompactMechanisms);
             XmlAttrib(sb, "ExpandMechanisms", ExpandMechanisms);
             XmlAttrib(sb, "HeapIndex", HeapIndex);
             XmlAttribHex(sb, "ExtraGen0Commit", ExtraGen0Commit);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "FreeListAllocated", "FreeListRejected", "EndOfSegAllocated", "CondemnedAllocated", "PinnedAllocated", "PinnedAllocatedAdvance", "RunningFreeListEfficiency", "CondemnReasons0", "CondemnReasons1", "CompactMechanisms", "ExpandMechanisms", "HeapIndex", "ExtraGen0Commit", "Count", "Values"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return FreeListAllocated;
                case 2:
                    return FreeListRejected;
                case 3:
                    return EndOfSegAllocated;
                case 4:
                    return CondemnedAllocated;
                case 5:
                    return PinnedAllocated;
                case 6:
                    return PinnedAllocatedAdvance;
                case 7:
                    return RunningFreeListEfficiency;
                case 8:
                    return CondemnReasons0;
                case 9:
                    return CondemnReasons1;
                case 10:
                    return CompactMechanisms;
                case 11:
                    return ExpandMechanisms;
                case 12:
                    return HeapIndex;
                case 13:
                    return ExtraGen0Commit;
                case 14:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCPerHeapHistoryArgs_V3> m_target;
        #endregion
    }
    public sealed class GCPinObjectAtGCTimeArgs : TraceEvent
    {
        public Address HandleID { get { return GetAddressAt(0); } }
        public Address ObjectID { get { return GetAddressAt(HostOffset(4, 1)); } }
        public long ObjectSize { get { return GetInt64At(HostOffset(8, 2)); } }
        public string TypeName { get { return GetUnicodeStringAt(HostOffset(16, 2)); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(HostOffset(16, 2))); } }

        #region Private
        internal GCPinObjectAtGCTimeArgs(Action<GCPinObjectAtGCTimeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(16, 2))+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(16, 2))+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCPinObjectAtGCTimeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HandleID", HandleID);
             XmlAttribHex(sb, "ObjectID", ObjectID);
             XmlAttrib(sb, "ObjectSize", ObjectSize);
             XmlAttrib(sb, "TypeName", TypeName);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HandleID", "ObjectID", "ObjectSize", "TypeName", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HandleID;
                case 1:
                    return ObjectID;
                case 2:
                    return ObjectSize;
                case 3:
                    return TypeName;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCPinObjectAtGCTimeArgs> m_target;
        #endregion
    }
    public sealed class GCSetGCHandleArgs : TraceEvent
    {
        public Address HandleID { get { return GetAddressAt(0); } }
        public Address ObjectID { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Kind { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Generation { get { return GetInt32At(HostOffset(12, 2)); } }
        public long AppDomainID { get { return GetInt64At(HostOffset(16, 2)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(24, 2)); } }

        #region Private
        internal GCSetGCHandleArgs(Action<GCSetGCHandleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(26, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(26, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCSetGCHandleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HandleID", HandleID);
             XmlAttribHex(sb, "ObjectID", ObjectID);
             XmlAttrib(sb, "Kind", Kind);
             XmlAttrib(sb, "Generation", Generation);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HandleID", "ObjectID", "Kind", "Generation", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HandleID;
                case 1:
                    return ObjectID;
                case 2:
                    return Kind;
                case 3:
                    return Generation;
                case 4:
                    return AppDomainID;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCSetGCHandleArgs> m_target;
        #endregion
    }
    public sealed class GCStartArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public BAD_MERGE_OF_int_AND_BAD_MERGE_OF_int_AND_GCReason Reason { get { if (Version >= 1) return GetInt32At(8); return (GCReason)GetInt32At(4); } }
        public int Depth { get { if (Version >= 1) return GetInt32At(4); return 0; } }
        public BAD_MERGE_OF_int_AND_GCType Type { get { if (Version >= 2) return GetInt32At(12); if (Version >= 1) return (GCType)GetInt32At(12); return (GCType)0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(16); return 0; } }
        public long ClientSequenceNumber { get { if (Version >= 2) return GetInt64At(18); return 0; } }

        #region Private
        internal GCStartArgs(Action<GCStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version == 1 && EventDataLength != 18));
            Debug.Assert(!(Version == 2 && EventDataLength != 26));
            Debug.Assert(!(Version > 2 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "Depth", Depth);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "ClientSequenceNumber", ClientSequenceNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "Reason", "Depth", "Type", "ClrInstanceID", "ClientSequenceNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return Reason;
                case 2:
                    return Depth;
                case 3:
                    return Type;
                case 4:
                    return ClrInstanceID;
                case 5:
                    return ClientSequenceNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCStartArgs> m_target;
        #endregion
    }
    public sealed class GCStopArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int Depth { get { if (Version >= 1) return GetInt32At(4); return GetInt16At(4); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }

        #region Private
        internal GCStopArgs(Action<GCStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "Depth", Depth);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "Depth", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return Depth;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCStopArgs> m_target;
        #endregion
    }
    public sealed class GCSuspendEEStartArgs : TraceEvent
    {
        public int Reason { get { if (Version >= 1) return GetInt32At(0); return GetInt16At(0); } }
        public int Count { get { if (Version >= 1) return GetInt32At(4); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }

        #region Private
        internal GCSuspendEEStartArgs(Action<GCSuspendEEStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCSuspendEEStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason", "Count", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                case 1:
                    return Count;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCSuspendEEStartArgs> m_target;
        #endregion
    }
    public sealed class GCTriggeredArgs : TraceEvent
    {
        public int Reason { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }

        #region Private
        internal GCTriggeredArgs(Action<GCTriggeredArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GCTriggeredArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCTriggeredArgs> m_target;
        #endregion
    }
    public sealed class ILStubStubCacheHitArgs : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public long ModuleID { get { return GetInt64At(2); } }
        public long StubMethodID { get { return GetInt64At(10); } }
        public int ManagedInteropMethodToken { get { return GetInt32At(18); } }
        public string ManagedInteropMethodNamespace { get { return GetUnicodeStringAt(22); } }
        public string ManagedInteropMethodName { get { return GetUnicodeStringAt(SkipUnicodeString(22)); } }
        public string ManagedInteropMethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(22))); } }

        #region Private
        internal ILStubStubCacheHitArgs(Action<ILStubStubCacheHitArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(22)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(22)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ILStubStubCacheHitArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "StubMethodID", StubMethodID);
             XmlAttrib(sb, "ManagedInteropMethodToken", ManagedInteropMethodToken);
             XmlAttrib(sb, "ManagedInteropMethodNamespace", ManagedInteropMethodNamespace);
             XmlAttrib(sb, "ManagedInteropMethodName", ManagedInteropMethodName);
             XmlAttrib(sb, "ManagedInteropMethodSignature", ManagedInteropMethodSignature);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "ModuleID", "StubMethodID", "ManagedInteropMethodToken", "ManagedInteropMethodNamespace", "ManagedInteropMethodName", "ManagedInteropMethodSignature"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return ModuleID;
                case 2:
                    return StubMethodID;
                case 3:
                    return ManagedInteropMethodToken;
                case 4:
                    return ManagedInteropMethodNamespace;
                case 5:
                    return ManagedInteropMethodName;
                case 6:
                    return ManagedInteropMethodSignature;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ILStubStubCacheHitArgs> m_target;
        #endregion
    }
    public sealed class ILStubStubGeneratedArgs : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public long ModuleID { get { return GetInt64At(2); } }
        public long StubMethodID { get { return GetInt64At(10); } }
        public int StubFlags { get { return GetInt32At(18); } }
        public int ManagedInteropMethodToken { get { return GetInt32At(22); } }
        public string ManagedInteropMethodNamespace { get { return GetUnicodeStringAt(26); } }
        public string ManagedInteropMethodName { get { return GetUnicodeStringAt(SkipUnicodeString(26)); } }
        public string ManagedInteropMethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(26))); } }
        public string NativeMethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(26)))); } }
        public string StubMethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(26))))); } }
        public string StubMethodILCode { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(26)))))); } }

        #region Private
        internal ILStubStubGeneratedArgs(Action<ILStubStubGeneratedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(26))))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(26))))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ILStubStubGeneratedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "StubMethodID", StubMethodID);
             XmlAttrib(sb, "StubFlags", StubFlags);
             XmlAttrib(sb, "ManagedInteropMethodToken", ManagedInteropMethodToken);
             XmlAttrib(sb, "ManagedInteropMethodNamespace", ManagedInteropMethodNamespace);
             XmlAttrib(sb, "ManagedInteropMethodName", ManagedInteropMethodName);
             XmlAttrib(sb, "ManagedInteropMethodSignature", ManagedInteropMethodSignature);
             XmlAttrib(sb, "NativeMethodSignature", NativeMethodSignature);
             XmlAttrib(sb, "StubMethodSignature", StubMethodSignature);
             XmlAttrib(sb, "StubMethodILCode", StubMethodILCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "ModuleID", "StubMethodID", "StubFlags", "ManagedInteropMethodToken", "ManagedInteropMethodNamespace", "ManagedInteropMethodName", "ManagedInteropMethodSignature", "NativeMethodSignature", "StubMethodSignature", "StubMethodILCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return ModuleID;
                case 2:
                    return StubMethodID;
                case 3:
                    return StubFlags;
                case 4:
                    return ManagedInteropMethodToken;
                case 5:
                    return ManagedInteropMethodNamespace;
                case 6:
                    return ManagedInteropMethodName;
                case 7:
                    return ManagedInteropMethodSignature;
                case 8:
                    return NativeMethodSignature;
                case 9:
                    return StubMethodSignature;
                case 10:
                    return StubMethodILCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ILStubStubGeneratedArgs> m_target;
        #endregion
    }
    public sealed class IOThreadCreationStartArgs : TraceEvent
    {
        public int IOThreadCount { get { return GetInt32At(0); } }
        public int RetiredIOThreads { get { return GetInt32At(4); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }

        #region Private
        internal IOThreadCreationStartArgs(Action<IOThreadCreationStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IOThreadCreationStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IOThreadCount", IOThreadCount);
             XmlAttrib(sb, "RetiredIOThreads", RetiredIOThreads);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IOThreadCount", "RetiredIOThreads", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IOThreadCount;
                case 1:
                    return RetiredIOThreads;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IOThreadCreationStartArgs> m_target;
        #endregion
    }
    public sealed class LoaderAppDomainLoadArgs : TraceEvent
    {
        public long AppDomainID { get { return GetInt64At(0); } }
        public BAD_MERGE_OF_int_AND_AppDomainFlags AppDomainFlags { get { if (Version >= 1) return GetInt32At(8); return (AppDomainFlags)GetInt32At(8); } }
        public string AppDomainName { get { return GetUnicodeStringAt(12); } }
        public int AppDomainIndex { get { if (Version >= 1) return GetInt32At(SkipUnicodeString(12)); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(12)+4); return 0; } }

        #region Private
        internal LoaderAppDomainLoadArgs(Action<LoaderAppDomainLoadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(12)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(12)+6));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(12)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderAppDomainLoadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "AppDomainFlags", AppDomainFlags);
             XmlAttrib(sb, "AppDomainName", AppDomainName);
             XmlAttrib(sb, "AppDomainIndex", AppDomainIndex);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppDomainID", "AppDomainFlags", "AppDomainName", "AppDomainIndex", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppDomainID;
                case 1:
                    return AppDomainFlags;
                case 2:
                    return AppDomainName;
                case 3:
                    return AppDomainIndex;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderAppDomainLoadArgs> m_target;
        #endregion
    }
    public sealed class LoaderAppDomainUnloadArgs : TraceEvent
    {
        public long AppDomainID { get { return GetInt64At(0); } }
        public int AppDomainFlags { get { return GetInt32At(8); } }
        public string AppDomainName { get { return GetUnicodeStringAt(12); } }
        public int AppDomainIndex { get { if (Version >= 1) return GetInt32At(SkipUnicodeString(12)); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(12)+4); return 0; } }

        #region Private
        internal LoaderAppDomainUnloadArgs(Action<LoaderAppDomainUnloadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(12)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(12)+6));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(12)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderAppDomainUnloadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "AppDomainFlags", AppDomainFlags);
             XmlAttrib(sb, "AppDomainName", AppDomainName);
             XmlAttrib(sb, "AppDomainIndex", AppDomainIndex);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppDomainID", "AppDomainFlags", "AppDomainName", "AppDomainIndex", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppDomainID;
                case 1:
                    return AppDomainFlags;
                case 2:
                    return AppDomainName;
                case 3:
                    return AppDomainIndex;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderAppDomainUnloadArgs> m_target;
        #endregion
    }
    public sealed class LoaderAssemblyLoadArgs : TraceEvent
    {
        public long AssemblyID { get { return GetInt64At(0); } }
        public long AppDomainID { get { return GetInt64At(8); } }
        public int AssemblyFlags { get { if (Version >= 1) return GetInt32At(24); return GetInt32At(16); } }
        public string FullyQualifiedAssemblyName { get { if (Version >= 1) return GetUnicodeStringAt(28); return GetUnicodeStringAt(20); } }
        public long BindingID { get { if (Version >= 1) return GetInt64At(16); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(28)); return 0; } }

        #region Private
        internal LoaderAssemblyLoadArgs(Action<LoaderAssemblyLoadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(28)+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(28)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderAssemblyLoadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "AssemblyFlags", AssemblyFlags);
             XmlAttrib(sb, "FullyQualifiedAssemblyName", FullyQualifiedAssemblyName);
             XmlAttrib(sb, "BindingID", BindingID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AssemblyID", "AppDomainID", "AssemblyFlags", "FullyQualifiedAssemblyName", "BindingID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AssemblyID;
                case 1:
                    return AppDomainID;
                case 2:
                    return AssemblyFlags;
                case 3:
                    return FullyQualifiedAssemblyName;
                case 4:
                    return BindingID;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderAssemblyLoadArgs> m_target;
        #endregion
    }
    public sealed class LoaderAssemblyUnloadArgs : TraceEvent
    {
        public long AssemblyID { get { return GetInt64At(0); } }
        public long AppDomainID { get { return GetInt64At(8); } }
        public BAD_MERGE_OF_int_AND_AssemblyFlags AssemblyFlags { get { if (Version >= 1) return GetInt32At(24); return (AssemblyFlags)GetInt32At(16); } }
        public string FullyQualifiedAssemblyName { get { if (Version >= 1) return GetUnicodeStringAt(28); return GetUnicodeStringAt(20); } }
        public long BindingID { get { if (Version >= 1) return GetInt64At(16); return 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(28)); return 0; } }

        #region Private
        internal LoaderAssemblyUnloadArgs(Action<LoaderAssemblyUnloadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(28)+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(28)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderAssemblyUnloadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "AssemblyFlags", AssemblyFlags);
             XmlAttrib(sb, "FullyQualifiedAssemblyName", FullyQualifiedAssemblyName);
             XmlAttrib(sb, "BindingID", BindingID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AssemblyID", "AppDomainID", "AssemblyFlags", "FullyQualifiedAssemblyName", "BindingID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AssemblyID;
                case 1:
                    return AppDomainID;
                case 2:
                    return AssemblyFlags;
                case 3:
                    return FullyQualifiedAssemblyName;
                case 4:
                    return BindingID;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderAssemblyUnloadArgs> m_target;
        #endregion
    }
    public sealed class LoaderDomainModuleLoadArgs : TraceEvent
    {
        public long ModuleID { get { return GetInt64At(0); } }
        public long AssemblyID { get { return GetInt64At(8); } }
        public long AppDomainID { get { return GetInt64At(16); } }
        public int ModuleFlags { get { return GetInt32At(24); } }
        // Skipping Reserved1
        public string ModuleILPath { get { return GetUnicodeStringAt(32); } }
        public string ModuleNativePath { get { return GetUnicodeStringAt(SkipUnicodeString(32)); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(SkipUnicodeString(32))); return 0; } }

        #region Private
        internal LoaderDomainModuleLoadArgs(Action<LoaderDomainModuleLoadArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(32))));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(32))+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(32))+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderDomainModuleLoadArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             XmlAttrib(sb, "AppDomainID", AppDomainID);
             XmlAttrib(sb, "ModuleFlags", ModuleFlags);
             XmlAttrib(sb, "ModuleILPath", ModuleILPath);
             XmlAttrib(sb, "ModuleNativePath", ModuleNativePath);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ModuleID", "AssemblyID", "AppDomainID", "ModuleFlags", "ModuleILPath", "ModuleNativePath", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ModuleID;
                case 1:
                    return AssemblyID;
                case 2:
                    return AppDomainID;
                case 3:
                    return ModuleFlags;
                case 4:
                    return ModuleILPath;
                case 5:
                    return ModuleNativePath;
                case 6:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderDomainModuleLoadArgs> m_target;
        #endregion
    }
    public sealed class LoaderModuleDCStartV2Args : TraceEvent
    {
        public long ModuleID { get { return GetInt64At(0); } }
        public long AssemblyID { get { return GetInt64At(8); } }
        public ModuleFlags ModuleFlags { get { return (ModuleFlags)GetInt32At(16); } }
        // Skipping Reserved1
        public string ModuleILPath { get { return GetUnicodeStringAt(24); } }
        public string ModuleNativePath { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal LoaderModuleDCStartV2Args(Action<LoaderModuleDCStartV2Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderModuleDCStartV2Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             XmlAttrib(sb, "ModuleFlags", ModuleFlags);
             XmlAttrib(sb, "ModuleILPath", ModuleILPath);
             XmlAttrib(sb, "ModuleNativePath", ModuleNativePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ModuleID", "AssemblyID", "ModuleFlags", "ModuleILPath", "ModuleNativePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ModuleID;
                case 1:
                    return AssemblyID;
                case 2:
                    return ModuleFlags;
                case 3:
                    return ModuleILPath;
                case 4:
                    return ModuleNativePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderModuleDCStartV2Args> m_target;
        #endregion
    }
    public sealed class LoaderModuleDCStopV2Args : TraceEvent
    {
        public long ModuleID { get { return GetInt64At(0); } }
        public long AssemblyID { get { return GetInt64At(8); } }
        public int ModuleFlags { get { return GetInt32At(16); } }
        // Skipping Reserved1
        public string ModuleILPath { get { return GetUnicodeStringAt(24); } }
        public string ModuleNativePath { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal LoaderModuleDCStopV2Args(Action<LoaderModuleDCStopV2Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LoaderModuleDCStopV2Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             XmlAttrib(sb, "ModuleFlags", ModuleFlags);
             XmlAttrib(sb, "ModuleILPath", ModuleILPath);
             XmlAttrib(sb, "ModuleNativePath", ModuleNativePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ModuleID", "AssemblyID", "ModuleFlags", "ModuleILPath", "ModuleNativePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ModuleID;
                case 1:
                    return AssemblyID;
                case 2:
                    return ModuleFlags;
                case 3:
                    return ModuleILPath;
                case 4:
                    return ModuleNativePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderModuleDCStopV2Args> m_target;
        #endregion
    }
    public sealed class MethodDCStartV2Args : TraceEvent
    {
        public long MethodID { get { return GetInt64At(0); } }
        public long ModuleID { get { return GetInt64At(8); } }
        public long MethodStartAddress { get { return GetInt64At(16); } }
        public int MethodSize { get { return GetInt32At(24); } }
        public int MethodToken { get { return GetInt32At(28); } }
        public int MethodFlags { get { return GetInt32At(32); } }

        #region Private
        internal MethodDCStartV2Args(Action<MethodDCStartV2Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodDCStartV2Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "MethodStartAddress", MethodStartAddress);
             XmlAttrib(sb, "MethodSize", MethodSize);
             XmlAttrib(sb, "MethodToken", MethodToken);
             XmlAttrib(sb, "MethodFlags", MethodFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodID", "ModuleID", "MethodStartAddress", "MethodSize", "MethodToken", "MethodFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodID;
                case 1:
                    return ModuleID;
                case 2:
                    return MethodStartAddress;
                case 3:
                    return MethodSize;
                case 4:
                    return MethodToken;
                case 5:
                    return MethodFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodDCStartV2Args> m_target;
        #endregion
    }
    public sealed class MethodDCStartVerboseV2Args : TraceEvent
    {
        public long MethodID { get { return GetInt64At(0); } }
        public long ModuleID { get { return GetInt64At(8); } }
        public long MethodStartAddress { get { return GetInt64At(16); } }
        public int MethodSize { get { return GetInt32At(24); } }
        public int MethodToken { get { return GetInt32At(28); } }
        public int MethodFlags { get { return GetInt32At(32); } }
        public string MethodNamespace { get { return GetUnicodeStringAt(36); } }
        public string MethodName { get { return GetUnicodeStringAt(SkipUnicodeString(36)); } }
        public string MethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(36))); } }

        #region Private
        internal MethodDCStartVerboseV2Args(Action<MethodDCStartVerboseV2Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(36)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(36)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodDCStartVerboseV2Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "MethodStartAddress", MethodStartAddress);
             XmlAttrib(sb, "MethodSize", MethodSize);
             XmlAttrib(sb, "MethodToken", MethodToken);
             XmlAttrib(sb, "MethodFlags", MethodFlags);
             XmlAttrib(sb, "MethodNamespace", MethodNamespace);
             XmlAttrib(sb, "MethodName", MethodName);
             XmlAttrib(sb, "MethodSignature", MethodSignature);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodID", "ModuleID", "MethodStartAddress", "MethodSize", "MethodToken", "MethodFlags", "MethodNamespace", "MethodName", "MethodSignature"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodID;
                case 1:
                    return ModuleID;
                case 2:
                    return MethodStartAddress;
                case 3:
                    return MethodSize;
                case 4:
                    return MethodToken;
                case 5:
                    return MethodFlags;
                case 6:
                    return MethodNamespace;
                case 7:
                    return MethodName;
                case 8:
                    return MethodSignature;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodDCStartVerboseV2Args> m_target;
        #endregion
    }
    public sealed class MethodDCStopV2Args : TraceEvent
    {
        public long MethodID { get { return GetInt64At(0); } }
        public long ModuleID { get { return GetInt64At(8); } }
        public long MethodStartAddress { get { return GetInt64At(16); } }
        public int MethodSize { get { return GetInt32At(24); } }
        public int MethodToken { get { return GetInt32At(28); } }
        public MethodFlags MethodFlags { get { return (MethodFlags)GetInt32At(32); } }

        #region Private
        internal MethodDCStopV2Args(Action<MethodDCStopV2Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodDCStopV2Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "MethodStartAddress", MethodStartAddress);
             XmlAttrib(sb, "MethodSize", MethodSize);
             XmlAttrib(sb, "MethodToken", MethodToken);
             XmlAttrib(sb, "MethodFlags", MethodFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodID", "ModuleID", "MethodStartAddress", "MethodSize", "MethodToken", "MethodFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodID;
                case 1:
                    return ModuleID;
                case 2:
                    return MethodStartAddress;
                case 3:
                    return MethodSize;
                case 4:
                    return MethodToken;
                case 5:
                    return MethodFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodDCStopV2Args> m_target;
        #endregion
    }
    public sealed class MethodInliningFailedArgs : TraceEvent
    {
        public string MethodBeingCompiledNamespace { get { return GetUnicodeStringAt(0); } }
        public string MethodBeingCompiledName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string MethodBeingCompiledNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string InlinerNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string InlinerName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string InlinerNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public string InlineeNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }
        public string InlineeName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))); } }
        public string InlineeNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))))); } }
        public bool FailAlways { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))) != 0; } }
        public string FailReason { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)); } }

        #region Private
        internal MethodInliningFailedArgs(Action<MethodInliningFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodInliningFailedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodBeingCompiledNamespace", MethodBeingCompiledNamespace);
             XmlAttrib(sb, "MethodBeingCompiledName", MethodBeingCompiledName);
             XmlAttrib(sb, "MethodBeingCompiledNameSignature", MethodBeingCompiledNameSignature);
             XmlAttrib(sb, "InlinerNamespace", InlinerNamespace);
             XmlAttrib(sb, "InlinerName", InlinerName);
             XmlAttrib(sb, "InlinerNameSignature", InlinerNameSignature);
             XmlAttrib(sb, "InlineeNamespace", InlineeNamespace);
             XmlAttrib(sb, "InlineeName", InlineeName);
             XmlAttrib(sb, "InlineeNameSignature", InlineeNameSignature);
             XmlAttrib(sb, "FailAlways", FailAlways);
             XmlAttrib(sb, "FailReason", FailReason);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodBeingCompiledNamespace", "MethodBeingCompiledName", "MethodBeingCompiledNameSignature", "InlinerNamespace", "InlinerName", "InlinerNameSignature", "InlineeNamespace", "InlineeName", "InlineeNameSignature", "FailAlways", "FailReason", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodBeingCompiledNamespace;
                case 1:
                    return MethodBeingCompiledName;
                case 2:
                    return MethodBeingCompiledNameSignature;
                case 3:
                    return InlinerNamespace;
                case 4:
                    return InlinerName;
                case 5:
                    return InlinerNameSignature;
                case 6:
                    return InlineeNamespace;
                case 7:
                    return InlineeName;
                case 8:
                    return InlineeNameSignature;
                case 9:
                    return FailAlways;
                case 10:
                    return FailReason;
                case 11:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodInliningFailedArgs> m_target;
        #endregion
    }
    public sealed class MethodInliningSucceededArgs : TraceEvent
    {
        public string MethodBeingCompiledNamespace { get { return GetUnicodeStringAt(0); } }
        public string MethodBeingCompiledName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string MethodBeingCompiledNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string InlinerNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string InlinerName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string InlinerNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public string InlineeNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }
        public string InlineeName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))); } }
        public string InlineeNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))))); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))); } }

        #region Private
        internal MethodInliningSucceededArgs(Action<MethodInliningSucceededArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodInliningSucceededArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodBeingCompiledNamespace", MethodBeingCompiledNamespace);
             XmlAttrib(sb, "MethodBeingCompiledName", MethodBeingCompiledName);
             XmlAttrib(sb, "MethodBeingCompiledNameSignature", MethodBeingCompiledNameSignature);
             XmlAttrib(sb, "InlinerNamespace", InlinerNamespace);
             XmlAttrib(sb, "InlinerName", InlinerName);
             XmlAttrib(sb, "InlinerNameSignature", InlinerNameSignature);
             XmlAttrib(sb, "InlineeNamespace", InlineeNamespace);
             XmlAttrib(sb, "InlineeName", InlineeName);
             XmlAttrib(sb, "InlineeNameSignature", InlineeNameSignature);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodBeingCompiledNamespace", "MethodBeingCompiledName", "MethodBeingCompiledNameSignature", "InlinerNamespace", "InlinerName", "InlinerNameSignature", "InlineeNamespace", "InlineeName", "InlineeNameSignature", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodBeingCompiledNamespace;
                case 1:
                    return MethodBeingCompiledName;
                case 2:
                    return MethodBeingCompiledNameSignature;
                case 3:
                    return InlinerNamespace;
                case 4:
                    return InlinerName;
                case 5:
                    return InlinerNameSignature;
                case 6:
                    return InlineeNamespace;
                case 7:
                    return InlineeName;
                case 8:
                    return InlineeNameSignature;
                case 9:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodInliningSucceededArgs> m_target;
        #endregion
    }
    public sealed class MethodJittingStartedArgs : TraceEvent
    {
        public long MethodID { get { return GetInt64At(0); } }
        public long ModuleID { get { return GetInt64At(8); } }
        public int MethodToken { get { return GetInt32At(16); } }
        public int MethodILSize { get { return GetInt32At(20); } }
        public string MethodNamespace { get { return GetUnicodeStringAt(24); } }
        public string MethodName { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string MethodSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))); return 0; } }

        #region Private
        internal MethodJittingStartedArgs(Action<MethodJittingStartedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodJittingStartedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "ModuleID", ModuleID);
             XmlAttrib(sb, "MethodToken", MethodToken);
             XmlAttrib(sb, "MethodILSize", MethodILSize);
             XmlAttrib(sb, "MethodNamespace", MethodNamespace);
             XmlAttrib(sb, "MethodName", MethodName);
             XmlAttrib(sb, "MethodSignature", MethodSignature);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodID", "ModuleID", "MethodToken", "MethodILSize", "MethodNamespace", "MethodName", "MethodSignature", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodID;
                case 1:
                    return ModuleID;
                case 2:
                    return MethodToken;
                case 3:
                    return MethodILSize;
                case 4:
                    return MethodNamespace;
                case 5:
                    return MethodName;
                case 6:
                    return MethodSignature;
                case 7:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodJittingStartedArgs> m_target;
        #endregion
    }
    public sealed class MethodMethodILToNativeMapArgs : TraceEvent
    {
        public long MethodID { get { return GetInt64At(0); } }
        public long ReJITID { get { return GetInt64At(8); } }
        public int MethodExtent { get { return GetByteAt(16); } }
        public int CountOfMapEntries { get { return GetInt16At(17); } }
        public int ILOffsets(int arrayIndex) { return GetInt32At(19 + (arrayIndex * HostOffset(4, 0))); }
        public int NativeOffsets(int arrayIndex) { return GetInt32At(0+ (CountOfMapEntries*4)+19 + (arrayIndex * HostOffset(4, 0))); }
        public int ClrInstanceID { get { return GetInt16At(0+ (CountOfMapEntries*4)+ (CountOfMapEntries*4)+19); } }

        #region Private
        internal MethodMethodILToNativeMapArgs(Action<MethodMethodILToNativeMapArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (CountOfMapEntries*4)+ (CountOfMapEntries*4)+21));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (CountOfMapEntries*4)+ (CountOfMapEntries*4)+21));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodMethodILToNativeMapArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodID", MethodID);
             XmlAttrib(sb, "ReJITID", ReJITID);
             XmlAttrib(sb, "MethodExtent", MethodExtent);
             XmlAttrib(sb, "CountOfMapEntries", CountOfMapEntries);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodID", "ReJITID", "MethodExtent", "CountOfMapEntries", "ILOffsets", "NativeOffsets", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodID;
                case 1:
                    return ReJITID;
                case 2:
                    return MethodExtent;
                case 3:
                    return CountOfMapEntries;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodMethodILToNativeMapArgs> m_target;
        #endregion
    }
    public sealed class MethodTailCallFailedArgs : TraceEvent
    {
        public string MethodBeingCompiledNamespace { get { return GetUnicodeStringAt(0); } }
        public string MethodBeingCompiledName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string MethodBeingCompiledNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string CallerNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string CallerName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string CallerNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public string CalleeNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }
        public string CalleeName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))); } }
        public string CalleeNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))))); } }
        public bool TailPrefix { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))) != 0; } }
        public string FailReason { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)); } }

        #region Private
        internal MethodTailCallFailedArgs(Action<MethodTailCallFailedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodTailCallFailedArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodBeingCompiledNamespace", MethodBeingCompiledNamespace);
             XmlAttrib(sb, "MethodBeingCompiledName", MethodBeingCompiledName);
             XmlAttrib(sb, "MethodBeingCompiledNameSignature", MethodBeingCompiledNameSignature);
             XmlAttrib(sb, "CallerNamespace", CallerNamespace);
             XmlAttrib(sb, "CallerName", CallerName);
             XmlAttrib(sb, "CallerNameSignature", CallerNameSignature);
             XmlAttrib(sb, "CalleeNamespace", CalleeNamespace);
             XmlAttrib(sb, "CalleeName", CalleeName);
             XmlAttrib(sb, "CalleeNameSignature", CalleeNameSignature);
             XmlAttrib(sb, "TailPrefix", TailPrefix);
             XmlAttrib(sb, "FailReason", FailReason);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodBeingCompiledNamespace", "MethodBeingCompiledName", "MethodBeingCompiledNameSignature", "CallerNamespace", "CallerName", "CallerNameSignature", "CalleeNamespace", "CalleeName", "CalleeNameSignature", "TailPrefix", "FailReason", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodBeingCompiledNamespace;
                case 1:
                    return MethodBeingCompiledName;
                case 2:
                    return MethodBeingCompiledNameSignature;
                case 3:
                    return CallerNamespace;
                case 4:
                    return CallerName;
                case 5:
                    return CallerNameSignature;
                case 6:
                    return CalleeNamespace;
                case 7:
                    return CalleeName;
                case 8:
                    return CalleeNameSignature;
                case 9:
                    return TailPrefix;
                case 10:
                    return FailReason;
                case 11:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodTailCallFailedArgs> m_target;
        #endregion
    }
    public sealed class MethodTailCallSucceededArgs : TraceEvent
    {
        public string MethodBeingCompiledNamespace { get { return GetUnicodeStringAt(0); } }
        public string MethodBeingCompiledName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string MethodBeingCompiledNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string CallerNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string CallerName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string CallerNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public string CalleeNamespace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }
        public string CalleeName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))); } }
        public string CalleeNameSignature { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))))); } }
        public bool TailPrefix { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))) != 0; } }
        public TailCallType TailCallType { get { return (TailCallType)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+4); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+8); } }

        #region Private
        internal MethodTailCallSucceededArgs(Action<MethodTailCallSucceededArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+10));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))))))+10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MethodTailCallSucceededArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MethodBeingCompiledNamespace", MethodBeingCompiledNamespace);
             XmlAttrib(sb, "MethodBeingCompiledName", MethodBeingCompiledName);
             XmlAttrib(sb, "MethodBeingCompiledNameSignature", MethodBeingCompiledNameSignature);
             XmlAttrib(sb, "CallerNamespace", CallerNamespace);
             XmlAttrib(sb, "CallerName", CallerName);
             XmlAttrib(sb, "CallerNameSignature", CallerNameSignature);
             XmlAttrib(sb, "CalleeNamespace", CalleeNamespace);
             XmlAttrib(sb, "CalleeName", CalleeName);
             XmlAttrib(sb, "CalleeNameSignature", CalleeNameSignature);
             XmlAttrib(sb, "TailPrefix", TailPrefix);
             XmlAttrib(sb, "TailCallType", TailCallType);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MethodBeingCompiledNamespace", "MethodBeingCompiledName", "MethodBeingCompiledNameSignature", "CallerNamespace", "CallerName", "CallerNameSignature", "CalleeNamespace", "CalleeName", "CalleeNameSignature", "TailPrefix", "TailCallType", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MethodBeingCompiledNamespace;
                case 1:
                    return MethodBeingCompiledName;
                case 2:
                    return MethodBeingCompiledNameSignature;
                case 3:
                    return CallerNamespace;
                case 4:
                    return CallerName;
                case 5:
                    return CallerNameSignature;
                case 6:
                    return CalleeNamespace;
                case 7:
                    return CalleeName;
                case 8:
                    return CalleeNameSignature;
                case 9:
                    return TailPrefix;
                case 10:
                    return TailCallType;
                case 11:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodTailCallSucceededArgs> m_target;
        #endregion
    }
    public sealed class RuntimeStartArgs : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public int Sku { get { return GetInt16At(2); } }
        public int BclMajorVersion { get { return GetInt16At(4); } }
        public int BclMinorVersion { get { return GetInt16At(6); } }
        public int BclBuildNumber { get { return GetInt16At(8); } }
        public int BclQfeNumber { get { return GetInt16At(10); } }
        public int VMMajorVersion { get { return GetInt16At(12); } }
        public int VMMinorVersion { get { return GetInt16At(14); } }
        public int VMBuildNumber { get { return GetInt16At(16); } }
        public int VMQfeNumber { get { return GetInt16At(18); } }
        public int StartupFlags { get { return GetInt32At(20); } }
        public StartupMode StartupMode { get { return (StartupMode)GetByteAt(24); } }
        public string CommandLine { get { return GetUnicodeStringAt(25); } }
        public Guid ComObjectGuid { get { return GetGuidAt(SkipUnicodeString(25)); } }
        public string RuntimeDllPath { get { return GetUnicodeStringAt(SkipUnicodeString(25)+16); } }

        #region Private
        internal RuntimeStartArgs(Action<RuntimeStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(25)+16)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(25)+16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RuntimeStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             XmlAttrib(sb, "Sku", Sku);
             XmlAttrib(sb, "BclMajorVersion", BclMajorVersion);
             XmlAttrib(sb, "BclMinorVersion", BclMinorVersion);
             XmlAttrib(sb, "BclBuildNumber", BclBuildNumber);
             XmlAttrib(sb, "BclQfeNumber", BclQfeNumber);
             XmlAttrib(sb, "VMMajorVersion", VMMajorVersion);
             XmlAttrib(sb, "VMMinorVersion", VMMinorVersion);
             XmlAttrib(sb, "VMBuildNumber", VMBuildNumber);
             XmlAttrib(sb, "VMQfeNumber", VMQfeNumber);
             XmlAttrib(sb, "StartupFlags", StartupFlags);
             XmlAttrib(sb, "StartupMode", StartupMode);
             XmlAttrib(sb, "CommandLine", CommandLine);
             XmlAttrib(sb, "ComObjectGuid", ComObjectGuid);
             XmlAttrib(sb, "RuntimeDllPath", RuntimeDllPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "Sku", "BclMajorVersion", "BclMinorVersion", "BclBuildNumber", "BclQfeNumber", "VMMajorVersion", "VMMinorVersion", "VMBuildNumber", "VMQfeNumber", "StartupFlags", "StartupMode", "CommandLine", "ComObjectGuid", "RuntimeDllPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return Sku;
                case 2:
                    return BclMajorVersion;
                case 3:
                    return BclMinorVersion;
                case 4:
                    return BclBuildNumber;
                case 5:
                    return BclQfeNumber;
                case 6:
                    return VMMajorVersion;
                case 7:
                    return VMMinorVersion;
                case 8:
                    return VMBuildNumber;
                case 9:
                    return VMQfeNumber;
                case 10:
                    return StartupFlags;
                case 11:
                    return StartupMode;
                case 12:
                    return CommandLine;
                case 13:
                    return ComObjectGuid;
                case 14:
                    return RuntimeDllPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RuntimeStartArgs> m_target;
        #endregion
    }
    public sealed class StrongNameVerificationStartArgs : TraceEvent
    {
        public int VerificationFlags { get { return GetInt32At(0); } }
        public int ErrorCode { get { return GetInt32At(4); } }
        public string FullyQualifiedAssemblyName { get { return GetUnicodeStringAt(8); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(SkipUnicodeString(8)); return 0; } }

        #region Private
        internal StrongNameVerificationStartArgs(Action<StrongNameVerificationStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(8)+2));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(8)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<StrongNameVerificationStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VerificationFlags", VerificationFlags);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "FullyQualifiedAssemblyName", FullyQualifiedAssemblyName);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VerificationFlags", "ErrorCode", "FullyQualifiedAssemblyName", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VerificationFlags;
                case 1:
                    return ErrorCode;
                case 2:
                    return FullyQualifiedAssemblyName;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<StrongNameVerificationStartArgs> m_target;
        #endregion
    }
    public sealed class ThreadCreatingArgs : TraceEvent
    {
        public Address ID { get { return GetAddressAt(0); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(4, 1)); } }

        #region Private
        internal ThreadCreatingArgs(Action<ThreadCreatingArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(6, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(6, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadCreatingArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ID", ID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ID;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadCreatingArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolEnqueueArgs : TraceEvent
    {
        public Address WorkID { get { return GetAddressAt(0); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(4, 1)); } }

        #region Private
        internal ThreadPoolEnqueueArgs(Action<ThreadPoolEnqueueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(6, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(6, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolEnqueueArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "WorkID", WorkID);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WorkID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WorkID;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolEnqueueArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolIODequeueArgs : TraceEvent
    {
        public Address NativeOverlapped { get { return GetAddressAt(0); } }
        public Address Overlapped { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(8, 2)); } }

        #region Private
        internal ThreadPoolIODequeueArgs(Action<ThreadPoolIODequeueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(10, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(10, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolIODequeueArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "NativeOverlapped", NativeOverlapped);
             XmlAttribHex(sb, "Overlapped", Overlapped);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NativeOverlapped", "Overlapped", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NativeOverlapped;
                case 1:
                    return Overlapped;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolIODequeueArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolIOEnqueueArgs : TraceEvent
    {
        public Address NativeOverlapped { get { return GetAddressAt(0); } }
        public Address Overlapped { get { return GetAddressAt(HostOffset(4, 1)); } }
        public bool MultiDequeues { get { return GetInt32At(HostOffset(8, 2)) != 0; } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(12, 2)); } }

        #region Private
        internal ThreadPoolIOEnqueueArgs(Action<ThreadPoolIOEnqueueArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(14, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(14, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolIOEnqueueArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "NativeOverlapped", NativeOverlapped);
             XmlAttribHex(sb, "Overlapped", Overlapped);
             XmlAttrib(sb, "MultiDequeues", MultiDequeues);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NativeOverlapped", "Overlapped", "MultiDequeues", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NativeOverlapped;
                case 1:
                    return Overlapped;
                case 2:
                    return MultiDequeues;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolIOEnqueueArgs> m_target;
        #endregion
    }
    public sealed class ThreadpoolSuspensionV2StartArgs : TraceEvent
    {
        public int ClrThreadID { get { return GetInt32At(0); } }
        public int CpuUtilization { get { return GetInt32At(4); } }

        #region Private
        internal ThreadpoolSuspensionV2StartArgs(Action<ThreadpoolSuspensionV2StartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadpoolSuspensionV2StartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClrThreadID", ClrThreadID);
             XmlAttrib(sb, "CpuUtilization", CpuUtilization);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrThreadID", "CpuUtilization"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrThreadID;
                case 1:
                    return CpuUtilization;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadpoolSuspensionV2StartArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolWorkerThreadAdjustmentArgs : TraceEvent
    {
        public double AverageThroughput { get { return GetDoubleAt(0); } }
        public int NewWorkerThreadCount { get { return GetInt32At(8); } }
        public int Reason { get { return GetInt32At(12); } }
        public int ClrInstanceID { get { return GetInt16At(16); } }

        #region Private
        internal ThreadPoolWorkerThreadAdjustmentArgs(Action<ThreadPoolWorkerThreadAdjustmentArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolWorkerThreadAdjustmentArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AverageThroughput", AverageThroughput);
             XmlAttrib(sb, "NewWorkerThreadCount", NewWorkerThreadCount);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AverageThroughput", "NewWorkerThreadCount", "Reason", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AverageThroughput;
                case 1:
                    return NewWorkerThreadCount;
                case 2:
                    return Reason;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkerThreadAdjustmentArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolWorkerThreadAdjustmentSampleArgs : TraceEvent
    {
        public double Throughput { get { return GetDoubleAt(0); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }

        #region Private
        internal ThreadPoolWorkerThreadAdjustmentSampleArgs(Action<ThreadPoolWorkerThreadAdjustmentSampleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolWorkerThreadAdjustmentSampleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Throughput", Throughput);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Throughput", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Throughput;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkerThreadAdjustmentSampleArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolWorkerThreadAdjustmentStatsArgs : TraceEvent
    {
        public double Duration { get { return GetDoubleAt(0); } }
        public double Throughput { get { return GetDoubleAt(8); } }
        public double ThreadWave { get { return GetDoubleAt(16); } }
        public double ThroughputWave { get { return GetDoubleAt(24); } }
        public double ThroughputErrorEstimate { get { return GetDoubleAt(32); } }
        public double AverageThroughputErrorEstimate { get { return GetDoubleAt(40); } }
        public double ThroughputRatio { get { return GetDoubleAt(48); } }
        public double Confidence { get { return GetDoubleAt(56); } }
        public double NewControlSetting { get { return GetDoubleAt(64); } }
        public int NewThreadWaveMagnitude { get { return GetInt16At(72); } }
        public int ClrInstanceID { get { return GetInt16At(74); } }

        #region Private
        internal ThreadPoolWorkerThreadAdjustmentStatsArgs(Action<ThreadPoolWorkerThreadAdjustmentStatsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 76));
            Debug.Assert(!(Version > 0 && EventDataLength < 76));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolWorkerThreadAdjustmentStatsArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Duration", Duration);
             XmlAttrib(sb, "Throughput", Throughput);
             XmlAttrib(sb, "ThreadWave", ThreadWave);
             XmlAttrib(sb, "ThroughputWave", ThroughputWave);
             XmlAttrib(sb, "ThroughputErrorEstimate", ThroughputErrorEstimate);
             XmlAttrib(sb, "AverageThroughputErrorEstimate", AverageThroughputErrorEstimate);
             XmlAttrib(sb, "ThroughputRatio", ThroughputRatio);
             XmlAttrib(sb, "Confidence", Confidence);
             XmlAttrib(sb, "NewControlSetting", NewControlSetting);
             XmlAttrib(sb, "NewThreadWaveMagnitude", NewThreadWaveMagnitude);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Duration", "Throughput", "ThreadWave", "ThroughputWave", "ThroughputErrorEstimate", "AverageThroughputErrorEstimate", "ThroughputRatio", "Confidence", "NewControlSetting", "NewThreadWaveMagnitude", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Duration;
                case 1:
                    return Throughput;
                case 2:
                    return ThreadWave;
                case 3:
                    return ThroughputWave;
                case 4:
                    return ThroughputErrorEstimate;
                case 5:
                    return AverageThroughputErrorEstimate;
                case 6:
                    return ThroughputRatio;
                case 7:
                    return Confidence;
                case 8:
                    return NewControlSetting;
                case 9:
                    return NewThreadWaveMagnitude;
                case 10:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkerThreadAdjustmentStatsArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolWorkerThreadStartArgs : TraceEvent
    {
        public int ActiveWorkerThreadCount { get { return GetInt32At(0); } }
        public int RetiredWorkerThreadCount { get { return GetInt32At(4); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }

        #region Private
        internal ThreadPoolWorkerThreadStartArgs(Action<ThreadPoolWorkerThreadStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolWorkerThreadStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ActiveWorkerThreadCount", ActiveWorkerThreadCount);
             XmlAttrib(sb, "RetiredWorkerThreadCount", RetiredWorkerThreadCount);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ActiveWorkerThreadCount", "RetiredWorkerThreadCount", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ActiveWorkerThreadCount;
                case 1:
                    return RetiredWorkerThreadCount;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkerThreadStartArgs> m_target;
        #endregion
    }
    public sealed class ThreadPoolWorkingThreadCountStartArgs : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }

        #region Private
        internal ThreadPoolWorkingThreadCountStartArgs(Action<ThreadPoolWorkingThreadCountStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadPoolWorkingThreadCountStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkingThreadCountStartArgs> m_target;
        #endregion
    }
    public sealed class WorkerThreadCreationV2StartArgs : TraceEvent
    {
        public int WorkerThreadCount { get { return GetInt32At(0); } }
        public int RetiredWorkerThreads { get { return GetInt32At(4); } }

        #region Private
        internal WorkerThreadCreationV2StartArgs(Action<WorkerThreadCreationV2StartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WorkerThreadCreationV2StartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WorkerThreadCount", WorkerThreadCount);
             XmlAttrib(sb, "RetiredWorkerThreads", RetiredWorkerThreads);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WorkerThreadCount", "RetiredWorkerThreads"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WorkerThreadCount;
                case 1:
                    return RetiredWorkerThreads;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WorkerThreadCreationV2StartArgs> m_target;
        #endregion
    }
    [Flags]
    public enum AppDomainFlags
    {
        Default = 0x1,
        Executable = 0x2,
        Shared = 0x4,
    }
    [Flags]
    public enum AssemblyFlags
    {
        DomainNeutral = 0x1,
        Dynamic = 0x2,
        Native = 0x4,
        Collectible = 0x8,
    }
    public enum ContentionFlags
    {
        Managed = 0x0,
        Native = 0x1,
    }
    [Flags]
    public enum ExceptionThrownFlags
    {
        HasInnerException = 0x1,
        Nested = 0x2,
        ReThrown = 0x4,
        CorruptedState = 0x8,
        CLSCompliant = 0x10,
    }
    public enum GCAllocationKind
    {
        Small = 0x0,
        Large = 0x1,
    }
    public enum GCReason
    {
        AllocSmall = 0x0,
        Induced = 0x1,
        LowMemory = 0x2,
        Empty = 0x3,
        AllocLarge = 0x4,
        OutOfSpaceSmallObjectHeap = 0x5,
        OutOfSpaceLargeObjectHeap = 0x6,
        InducedNoForce = 0x7,
        Stress = 0x8,
        InducedLowMemory = 0x9,
    }
    public enum GCSegmentType
    {
        SmallObjectHeap = 0x0,
        LargeObjectHeap = 0x1,
        ReadOnlyHeap = 0x2,
    }
    public enum GCType
    {
        NonConcurrentGC = 0x0,
        BackgroundGC = 0x1,
        ForegroundGC = 0x2,
    }
    [Flags]
    public enum MethodFlags
    {
        Dynamic = 0x1,
        Generic = 0x2,
        HasSharedGenericCode = 0x4,
        Jitted = 0x8,
    }
    [Flags]
    public enum ModuleFlags
    {
        DomainNeutral = 0x1,
        Native = 0x2,
        Dynamic = 0x4,
        Manifest = 0x8,
    }
    [Flags]
    public enum ModuleRangeType
    {
        ColdRange = 0x4,
    }
    [Flags]
    public enum StartupMode
    {
        ManagedExe = 0x1,
        HostedClr = 0x2,
        IjwDll = 0x4,
        ComActivated = 0x8,
        Other = 0x10,
    }
    public enum TailCallType
    {
        OptimizedTailCall = 0x0,
        RecursiveLoop = 0x1,
        HelperAssistedTailCall = 0x2,
    }
    [Flags]
    public enum ThreadFlags
    {
        GCSpecial = 0x1,
        Finalizer = 0x2,
        ThreadPoolWorker = 0x4,
    }
}
