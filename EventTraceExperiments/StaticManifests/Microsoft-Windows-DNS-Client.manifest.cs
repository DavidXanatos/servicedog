using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsDNSClient;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftWindowsDNSClientTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-DNS-Client";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x1c95126e), unchecked((short) 0x7eea), unchecked((short) 0x49a9), 0xa3, 0xfe, 0xa3, 0x78, 0xb0, 0x3d, 0xdb, 0x4d);
        public enum Keywords : long
        {
            Utgenericevent = 0x100,
            Utdnsautologkeyword = 0x10000000,
            Utsendpath = 0x100000000,
            Utreceivepath = 0x200000000,
            Utl3connectpath = 0x400000000,
            Utl2connectpath = 0x800000000,
            Utclosepath = 0x1000000000,
            Utauthentication = 0x2000000000,
            Utconfiguration = 0x4000000000,
            Utglobal = 0x8000000000,
            Keyword200000000000 = 0x200000000000,
            Keyword400000000000 = 0x400000000000,
        };

        public MicrosoftWindowsDNSClientTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<DnsAllServersTimeoutArgs> DnsAllServersTimeout
        {
            add
            {
                source.RegisterEventTemplate(DnsAllServersTimeoutTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsAllServersTimeoutSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsAllServersTimeoutSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1014, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsAuthoritativeResponse
        {
            add
            {
                source.RegisterEventTemplate(DnsAuthoritativeResponseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1017, ProviderGuid);
            }
        }
        public event Action<DnsContextUpdateArgs> DnsContextUpdate
        {
            add
            {
                source.RegisterEventTemplate(DnsContextUpdateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60007, ProviderGuid);
            }
        }
        public event Action<DnsGenericErrorArgs> DnsGenericError
        {
            add
            {
                source.RegisterEventTemplate(DnsGenericErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8001, ProviderGuid);
            }
        }
        public event Action<DnsGenericErrorArgs> DnsGenericError8002
        {
            add
            {
                source.RegisterEventTemplate(DnsGenericError8002Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8002, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsHostFileError
        {
            add
            {
                source.RegisterEventTemplate(DnsHostFileErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsHostFileErrorSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsHostFileErrorSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
            }
        }
        public event Action<DnsInterfaceInfoArgs> DnsInterfaceInfo
        {
            add
            {
                source.RegisterEventTemplate(DnsInterfaceInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60103, ProviderGuid);
            }
        }
        public event Action<DnsLinkLocalArgs> DnsLinkLocal
        {
            add
            {
                source.RegisterEventTemplate(DnsLinkLocalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1018, ProviderGuid);
            }
        }
        public event Action<DnsMatchPolicyInfoArgs> DnsMatchPolicyInfo
        {
            add
            {
                source.RegisterEventTemplate(DnsMatchPolicyInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1021, ProviderGuid);
            }
        }
        public event Action<DnsMatchPolicyInfo1028Args> DnsMatchPolicyInfo1028
        {
            add
            {
                source.RegisterEventTemplate(DnsMatchPolicyInfo1028Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1028, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsMissingPrimarySuffix
        {
            add
            {
                source.RegisterEventTemplate(DnsMissingPrimarySuffixTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1007, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsMissingPrimarySuffixSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsMissingPrimarySuffixSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1008, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsNameError
        {
            add
            {
                source.RegisterEventTemplate(DnsNameErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1016, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsNetError
        {
            add
            {
                source.RegisterEventTemplate(DnsNetErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60004, ProviderGuid);
            }
        }
        public event Action<DnsNetWarningArgs> DnsNetWarning
        {
            add
            {
                source.RegisterEventTemplate(DnsNetWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60005, ProviderGuid);
            }
        }
        public event Action<DnsNonMatchingSuffixArgs> DnsNonMatchingSuffix
        {
            add
            {
                source.RegisterEventTemplate(DnsNonMatchingSuffixTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1009, ProviderGuid);
            }
        }
        public event Action<DnsNonMatchingSuffixArgs> DnsNonMatchingSuffixSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsNonMatchingSuffixSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1010, ProviderGuid);
            }
        }
        public event Action<DnsNoServerConfigV4Args> DnsNoServerConfigV4
        {
            add
            {
                source.RegisterEventTemplate(DnsNoServerConfigV4Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1000, ProviderGuid);
            }
        }
        public event Action<DnsNoServerConfigV4Args> DnsNoServerConfigV6
        {
            add
            {
                source.RegisterEventTemplate(DnsNoServerConfigV6Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1019, ProviderGuid);
            }
        }
        public event Action<DnsPolicySystemReadErrorArgs> DnsPolicyReadError
        {
            add
            {
                source.RegisterEventTemplate(DnsPolicyReadErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60008, ProviderGuid);
            }
        }
        public event Action<DnsPolicySystemReadErrorArgs> DnsPolicySystemReadError
        {
            add
            {
                source.RegisterEventTemplate(DnsPolicySystemReadErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1023, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsQueryBadXid
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryBadXidTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1024, ProviderGuid);
            }
        }
        public event Action<DnsQueryInvalidQuestionArgs> DnsQueryInvalidQuestion
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryInvalidQuestionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1026, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsQueryInvalidServerIp
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryInvalidServerIpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1025, ProviderGuid);
            }
        }
        public event Action<DnsReadPolicyTableArgs> DnsReadPolicyTable
        {
            add
            {
                source.RegisterEventTemplate(DnsReadPolicyTableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1020, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistrationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8003, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8004
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8004Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8004, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8005
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8005Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8005, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8006
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8006Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8006, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8007
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8007Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8007, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8008
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8008Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8008, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8009
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8009Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8009, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8010
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8010Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8010, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8011
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8011Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8011, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8012
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8012Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8012, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8013
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8013Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8013, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8014
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8014Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8014, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8015
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8015Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8015, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8016
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8016Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8016, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8017
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8017Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8017, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8018
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8018Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8018, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8019
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8019Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8019, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8020
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8020Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8020, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8021
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8021Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8021, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8022
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8022Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8022, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8023
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8023Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8023, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8024
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8024Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8024, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8025
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8025Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8025, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8026
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8026Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8026, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8027
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8027Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8027, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8028
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8028Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8028, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8029
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8029Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8029, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8030
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8030Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8030, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8031
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8031Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8031, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8032
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8032Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8032, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8033
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8033Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8033, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8034
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8034Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8034, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8035
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8035Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8035, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8036
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8036Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8036, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8037
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8037Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8037, ProviderGuid);
            }
        }
        public event Action<DnsRegistrationArgs> DnsRegistration8038
        {
            add
            {
                source.RegisterEventTemplate(DnsRegistration8038Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8038, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> DnsSecureNoFallback
        {
            add
            {
                source.RegisterEventTemplate(DnsSecureNoFallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1022, ProviderGuid);
            }
        }
        public event Action<DnsServerForInterfaceArgs> DnsServerForInterface
        {
            add
            {
                source.RegisterEventTemplate(DnsServerForInterfaceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
            }
        }
        public event Action<DnsServerQueryChangeArgs> DnsServerQueryChange
        {
            add
            {
                source.RegisterEventTemplate(DnsServerQueryChangeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsServerTimeout
        {
            add
            {
                source.RegisterEventTemplate(DnsServerTimeoutTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationFailure
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationFailureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1005, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationSuccess
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationSuccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
            }
        }
        public event Action<DnsStateTransitionArgs> DnsStateTransition
        {
            add
            {
                source.RegisterEventTemplate(DnsStateTransitionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60006, ProviderGuid);
            }
        }
        public event Action<DnsV4TupleArgs> DnsV4Tuple
        {
            add
            {
                source.RegisterEventTemplate(DnsV4TupleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60101, ProviderGuid);
            }
        }
        public event Action<DnsV6TupleArgs> DnsV6Tuple
        {
            add
            {
                source.RegisterEventTemplate(DnsV6TupleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60102, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> task_0
        {
            add
            {
                source.RegisterEventTemplate(task_0Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1027, ProviderGuid);
            }
        }
        public event Action<task_03000Args> task_03000
        {
            add
            {
                source.RegisterEventTemplate(task_03000Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3000, ProviderGuid);
            }
        }
        public event Action<task_03001Args> task_03001
        {
            add
            {
                source.RegisterEventTemplate(task_03001Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3001, ProviderGuid);
            }
        }
        public event Action<task_03000Args> task_03002
        {
            add
            {
                source.RegisterEventTemplate(task_03002Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3002, ProviderGuid);
            }
        }
        public event Action<task_03003Args> task_03003
        {
            add
            {
                source.RegisterEventTemplate(task_03003Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3003, ProviderGuid);
            }
        }
        public event Action<task_03000Args> task_03004
        {
            add
            {
                source.RegisterEventTemplate(task_03004Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3004, ProviderGuid);
            }
        }
        public event Action<task_03003Args> task_03005
        {
            add
            {
                source.RegisterEventTemplate(task_03005Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3005, ProviderGuid);
            }
        }
        public event Action<task_03006Args> task_03006
        {
            add
            {
                source.RegisterEventTemplate(task_03006Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3006, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> task_03007
        {
            add
            {
                source.RegisterEventTemplate(task_03007Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3007, ProviderGuid);
            }
        }
        public event Action<task_03008Args> task_03008
        {
            add
            {
                source.RegisterEventTemplate(task_03008Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3008, ProviderGuid);
            }
        }
        public event Action<task_03009Args> task_03009
        {
            add
            {
                source.RegisterEventTemplate(task_03009Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3009, ProviderGuid);
            }
        }
        public event Action<task_03010Args> task_03010
        {
            add
            {
                source.RegisterEventTemplate(task_03010Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3010, ProviderGuid);
            }
        }
        public event Action<task_03011Args> task_03011
        {
            add
            {
                source.RegisterEventTemplate(task_03011Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3011, ProviderGuid);
            }
        }
        public event Action<task_03012Args> task_03012
        {
            add
            {
                source.RegisterEventTemplate(task_03012Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3012, ProviderGuid);
            }
        }
        public event Action<task_03013Args> task_03013
        {
            add
            {
                source.RegisterEventTemplate(task_03013Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3013, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> task_03014
        {
            add
            {
                source.RegisterEventTemplate(task_03014Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3014, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> task_03015
        {
            add
            {
                source.RegisterEventTemplate(task_03015Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3015, ProviderGuid);
            }
        }
        public event Action<task_03016Args> task_03016
        {
            add
            {
                source.RegisterEventTemplate(task_03016Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3016, ProviderGuid);
            }
        }
        public event Action<task_03018Args> task_03018
        {
            add
            {
                source.RegisterEventTemplate(task_03018Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3018, ProviderGuid);
            }
        }
        public event Action<task_03019Args> task_03019
        {
            add
            {
                source.RegisterEventTemplate(task_03019Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3019, ProviderGuid);
            }
        }
        public event Action<task_03020Args> task_03020
        {
            add
            {
                source.RegisterEventTemplate(task_03020Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3020, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private DnsAllServersTimeoutArgs DnsAllServersTimeoutTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1013, 1013, "DnsAllServersTimeout", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsAllServersTimeoutSystemTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1014, 1014, "DnsAllServersTimeoutSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsAuthoritativeResponseTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1017, 1017, "DnsAuthoritativeResponse", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsContextUpdateArgs DnsContextUpdateTemplate(Action<DnsContextUpdateArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsContextUpdateArgs(action, 60007, 60007, "DnsContextUpdate", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsGenericErrorArgs DnsGenericErrorTemplate(Action<DnsGenericErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsGenericErrorArgs(action, 8001, 1029, "DnsGenericError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsGenericErrorArgs DnsGenericError8002Template(Action<DnsGenericErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsGenericErrorArgs(action, 8002, 1029, "DnsGenericError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMissingPrimarySuffixArgs DnsHostFileErrorTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1011, 1011, "DnsHostFileError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMissingPrimarySuffixArgs DnsHostFileErrorSystemTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1012, 1012, "DnsHostFileErrorSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsInterfaceInfoArgs DnsInterfaceInfoTemplate(Action<DnsInterfaceInfoArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsInterfaceInfoArgs(action, 60103, 60103, "DnsInterfaceInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsLinkLocalArgs DnsLinkLocalTemplate(Action<DnsLinkLocalArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsLinkLocalArgs(action, 1018, 1018, "DnsLinkLocal", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMatchPolicyInfoArgs DnsMatchPolicyInfoTemplate(Action<DnsMatchPolicyInfoArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMatchPolicyInfoArgs(action, 1021, 1021, "DnsMatchPolicyInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMatchPolicyInfo1028Args DnsMatchPolicyInfo1028Template(Action<DnsMatchPolicyInfo1028Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMatchPolicyInfo1028Args(action, 1028, 1021, "DnsMatchPolicyInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMissingPrimarySuffixArgs DnsMissingPrimarySuffixTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1007, 1007, "DnsMissingPrimarySuffix", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMissingPrimarySuffixArgs DnsMissingPrimarySuffixSystemTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1008, 1008, "DnsMissingPrimarySuffixSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsNameErrorTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1016, 1016, "DnsNameError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsMissingPrimarySuffixArgs DnsNetErrorTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 60004, 60004, "DnsNetError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsNetWarningArgs DnsNetWarningTemplate(Action<DnsNetWarningArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNetWarningArgs(action, 60005, 60005, "DnsNetWarning", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsNonMatchingSuffixArgs DnsNonMatchingSuffixTemplate(Action<DnsNonMatchingSuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNonMatchingSuffixArgs(action, 1009, 1009, "DnsNonMatchingSuffix", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsNonMatchingSuffixArgs DnsNonMatchingSuffixSystemTemplate(Action<DnsNonMatchingSuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNonMatchingSuffixArgs(action, 1010, 1010, "DnsNonMatchingSuffixSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsNoServerConfigV4Args DnsNoServerConfigV4Template(Action<DnsNoServerConfigV4Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNoServerConfigV4Args(action, 1000, 1000, "DnsNoServerConfigV4", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsNoServerConfigV4Args DnsNoServerConfigV6Template(Action<DnsNoServerConfigV4Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNoServerConfigV4Args(action, 1019, 1019, "DnsNoServerConfigV6", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsPolicySystemReadErrorArgs DnsPolicyReadErrorTemplate(Action<DnsPolicySystemReadErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsPolicySystemReadErrorArgs(action, 60008, 60008, "DnsPolicyReadError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsPolicySystemReadErrorArgs DnsPolicySystemReadErrorTemplate(Action<DnsPolicySystemReadErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsPolicySystemReadErrorArgs(action, 1023, 1023, "DnsPolicySystemReadError", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsQueryBadXidTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1024, 1024, "DnsQueryBadXid", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsQueryInvalidQuestionArgs DnsQueryInvalidQuestionTemplate(Action<DnsQueryInvalidQuestionArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsQueryInvalidQuestionArgs(action, 1026, 1026, "DnsQueryInvalidQuestion", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsQueryInvalidServerIpTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1025, 1025, "DnsQueryInvalidServerIp", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsReadPolicyTableArgs DnsReadPolicyTableTemplate(Action<DnsReadPolicyTableArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsReadPolicyTableArgs(action, 1020, 1020, "DnsReadPolicyTable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistrationTemplate(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8003, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8004Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8004, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8005Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8005, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8006Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8006, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8007Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8007, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8008Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8008, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8009Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8009, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8010Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8010, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8011Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8011, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8012Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8012, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8013Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8013, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8014Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8014, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8015Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8015, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8016Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8016, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8017Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8017, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8018Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8018, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8019Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8019, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8020Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8020, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8021Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8021, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8022Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8022, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8023Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8023, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8024Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8024, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8025Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8025, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8026Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8026, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8027Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8027, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8028Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8028, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8029Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8029, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8030Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8030, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8031Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8031, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8032Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8032, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8033Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8033, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8034Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8034, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8035Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8035, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8036Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8036, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8037Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8037, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsRegistrationArgs DnsRegistration8038Template(Action<DnsRegistrationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsRegistrationArgs(action, 8038, 1028, "DnsRegistration", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsSecureNoFallbackArgs DnsSecureNoFallbackTemplate(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 1022, 1022, "DnsSecureNoFallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsServerForInterfaceArgs DnsServerForInterfaceTemplate(Action<DnsServerForInterfaceArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerForInterfaceArgs(action, 1001, 1001, "DnsServerForInterface", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsServerQueryChangeArgs DnsServerQueryChangeTemplate(Action<DnsServerQueryChangeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerQueryChangeArgs(action, 1002, 1002, "DnsServerQueryChange", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsAllServersTimeoutArgs DnsServerTimeoutTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1015, 1015, "DnsServerTimeout", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationFailureTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1005, 1005, "DnsServerValidationFailure", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationSuccessTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1003, 1003, "DnsServerValidationSuccess", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsStateTransitionArgs DnsStateTransitionTemplate(Action<DnsStateTransitionArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsStateTransitionArgs(action, 60006, 60006, "DnsStateTransition", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsV4TupleArgs DnsV4TupleTemplate(Action<DnsV4TupleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsV4TupleArgs(action, 60101, 60101, "DnsV4Tuple", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsV6TupleArgs DnsV6TupleTemplate(Action<DnsV6TupleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsV6TupleArgs(action, 60102, 60102, "DnsV6Tuple", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsSecureNoFallbackArgs task_0Template(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 1027, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03000Args task_03000Template(Action<task_03000Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03000Args(action, 3000, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03001Args task_03001Template(Action<task_03001Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03001Args(action, 3001, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03000Args task_03002Template(Action<task_03000Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03000Args(action, 3002, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03003Args task_03003Template(Action<task_03003Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03003Args(action, 3003, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03000Args task_03004Template(Action<task_03000Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03000Args(action, 3004, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03003Args task_03005Template(Action<task_03003Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03003Args(action, 3005, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03006Args task_03006Template(Action<task_03006Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03006Args(action, 3006, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsSecureNoFallbackArgs task_03007Template(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 3007, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03008Args task_03008Template(Action<task_03008Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03008Args(action, 3008, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03009Args task_03009Template(Action<task_03009Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03009Args(action, 3009, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03010Args task_03010Template(Action<task_03010Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03010Args(action, 3010, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03011Args task_03011Template(Action<task_03011Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03011Args(action, 3011, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03012Args task_03012Template(Action<task_03012Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03012Args(action, 3012, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03013Args task_03013Template(Action<task_03013Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03013Args(action, 3013, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsSecureNoFallbackArgs task_03014Template(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 3014, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DnsSecureNoFallbackArgs task_03015Template(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 3015, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03016Args task_03016Template(Action<task_03016Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03016Args(action, 3016, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03018Args task_03018Template(Action<task_03018Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03018Args(action, 3018, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03019Args task_03019Template(Action<task_03019Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03019Args(action, 3019, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private task_03020Args task_03020Template(Action<task_03020Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03020Args(action, 3020, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[93];
                templates[0] = DnsNoServerConfigV4Template(null);
                templates[1] = DnsServerForInterfaceTemplate(null);
                templates[2] = DnsServerQueryChangeTemplate(null);
                templates[3] = DnsServerValidationSuccessTemplate(null);
                templates[4] = DnsServerValidationFailureTemplate(null);
                templates[5] = DnsMissingPrimarySuffixTemplate(null);
                templates[6] = DnsMissingPrimarySuffixSystemTemplate(null);
                templates[7] = DnsNonMatchingSuffixTemplate(null);
                templates[8] = DnsNonMatchingSuffixSystemTemplate(null);
                templates[9] = DnsHostFileErrorTemplate(null);
                templates[10] = DnsHostFileErrorSystemTemplate(null);
                templates[11] = DnsAllServersTimeoutTemplate(null);
                templates[12] = DnsAllServersTimeoutSystemTemplate(null);
                templates[13] = DnsServerTimeoutTemplate(null);
                templates[14] = DnsNameErrorTemplate(null);
                templates[15] = DnsAuthoritativeResponseTemplate(null);
                templates[16] = DnsLinkLocalTemplate(null);
                templates[17] = DnsNoServerConfigV6Template(null);
                templates[18] = DnsReadPolicyTableTemplate(null);
                templates[19] = DnsMatchPolicyInfoTemplate(null);
                templates[20] = DnsSecureNoFallbackTemplate(null);
                templates[21] = DnsPolicySystemReadErrorTemplate(null);
                templates[22] = DnsQueryBadXidTemplate(null);
                templates[23] = DnsQueryInvalidServerIpTemplate(null);
                templates[24] = DnsQueryInvalidQuestionTemplate(null);
                templates[25] = task_0Template(null);
                templates[26] = DnsMatchPolicyInfoTemplate(null);
                templates[27] = task_0Template(null);
                templates[28] = task_0Template(null);
                templates[29] = task_0Template(null);
                templates[30] = task_0Template(null);
                templates[31] = task_0Template(null);
                templates[32] = task_0Template(null);
                templates[33] = task_0Template(null);
                templates[34] = task_0Template(null);
                templates[35] = task_0Template(null);
                templates[36] = task_0Template(null);
                templates[37] = task_0Template(null);
                templates[38] = task_0Template(null);
                templates[39] = task_0Template(null);
                templates[40] = task_0Template(null);
                templates[41] = task_0Template(null);
                templates[42] = task_0Template(null);
                templates[43] = task_0Template(null);
                templates[44] = task_0Template(null);
                templates[45] = task_0Template(null);
                templates[46] = task_0Template(null);
                templates[47] = DnsGenericErrorTemplate(null);
                templates[48] = DnsGenericErrorTemplate(null);
                templates[49] = DnsRegistrationTemplate(null);
                templates[50] = DnsRegistrationTemplate(null);
                templates[51] = DnsRegistrationTemplate(null);
                templates[52] = DnsRegistrationTemplate(null);
                templates[53] = DnsRegistrationTemplate(null);
                templates[54] = DnsRegistrationTemplate(null);
                templates[55] = DnsRegistrationTemplate(null);
                templates[56] = DnsRegistrationTemplate(null);
                templates[57] = DnsRegistrationTemplate(null);
                templates[58] = DnsRegistrationTemplate(null);
                templates[59] = DnsRegistrationTemplate(null);
                templates[60] = DnsRegistrationTemplate(null);
                templates[61] = DnsRegistrationTemplate(null);
                templates[62] = DnsRegistrationTemplate(null);
                templates[63] = DnsRegistrationTemplate(null);
                templates[64] = DnsRegistrationTemplate(null);
                templates[65] = DnsRegistrationTemplate(null);
                templates[66] = DnsRegistrationTemplate(null);
                templates[67] = DnsRegistrationTemplate(null);
                templates[68] = DnsRegistrationTemplate(null);
                templates[69] = DnsRegistrationTemplate(null);
                templates[70] = DnsRegistrationTemplate(null);
                templates[71] = DnsRegistrationTemplate(null);
                templates[72] = DnsRegistrationTemplate(null);
                templates[73] = DnsRegistrationTemplate(null);
                templates[74] = DnsRegistrationTemplate(null);
                templates[75] = DnsRegistrationTemplate(null);
                templates[76] = DnsRegistrationTemplate(null);
                templates[77] = DnsRegistrationTemplate(null);
                templates[78] = DnsRegistrationTemplate(null);
                templates[79] = DnsRegistrationTemplate(null);
                templates[80] = DnsRegistrationTemplate(null);
                templates[81] = DnsRegistrationTemplate(null);
                templates[82] = DnsRegistrationTemplate(null);
                templates[83] = DnsRegistrationTemplate(null);
                templates[84] = DnsRegistrationTemplate(null);
                templates[85] = DnsNetErrorTemplate(null);
                templates[86] = DnsNetWarningTemplate(null);
                templates[87] = DnsStateTransitionTemplate(null);
                templates[88] = DnsContextUpdateTemplate(null);
                templates[89] = DnsPolicyReadErrorTemplate(null);
                templates[90] = DnsV4TupleTemplate(null);
                templates[91] = DnsV6TupleTemplate(null);
                templates[92] = DnsInterfaceInfoTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsDNSClient
{
    public sealed class DnsAllServersTimeoutArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0)+4, AddressLength); } }

        #region Private
        internal DnsAllServersTimeoutArgs(Action<DnsAllServersTimeoutArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsAllServersTimeoutArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsAllServersTimeoutArgs> m_target;
        #endregion
    }
    public sealed class DnsContextUpdateArgs : TraceEvent
    {
        public int Context { get { return GetInt32At(0); } }
        public int UpdateReasonCode { get { return GetInt32At(4); } }

        #region Private
        internal DnsContextUpdateArgs(Action<DnsContextUpdateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsContextUpdateArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Context", Context);
             XmlAttrib(sb, "UpdateReasonCode", UpdateReasonCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Context", "UpdateReasonCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Context;
                case 1:
                    return UpdateReasonCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsContextUpdateArgs> m_target;
        #endregion
    }
    public sealed class DnsGenericErrorArgs : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal DnsGenericErrorArgs(Action<DnsGenericErrorArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsGenericErrorArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsGenericErrorArgs> m_target;
        #endregion
    }
    public sealed class DnsMissingPrimarySuffixArgs : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public int Context { get { return GetInt32At(8); } }

        #region Private
        internal DnsMissingPrimarySuffixArgs(Action<DnsMissingPrimarySuffixArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsMissingPrimarySuffixArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "Context", Context);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode", "Location", "Context"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                case 1:
                    return Location;
                case 2:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsMissingPrimarySuffixArgs> m_target;
        #endregion
    }
    public sealed class DnsInterfaceInfoArgs : TraceEvent
    {
        public Guid IfGuid { get { return GetGuidAt(0); } }
        public int IfIndex { get { return GetInt32At(16); } }
        public long IfLuid { get { return GetInt64At(20); } }
        public int ReferenceContext { get { return GetInt32At(28); } }

        #region Private
        internal DnsInterfaceInfoArgs(Action<DnsInterfaceInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsInterfaceInfoArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IfGuid", IfGuid);
             XmlAttrib(sb, "IfIndex", IfIndex);
             XmlAttrib(sb, "IfLuid", IfLuid);
             XmlAttrib(sb, "ReferenceContext", ReferenceContext);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IfGuid", "IfIndex", "IfLuid", "ReferenceContext"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IfGuid;
                case 1:
                    return IfIndex;
                case 2:
                    return IfLuid;
                case 3:
                    return ReferenceContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsInterfaceInfoArgs> m_target;
        #endregion
    }
    public sealed class DnsLinkLocalArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0)+4, AddressLength); } }
        public int DnsAddressLength { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public byte[] DnsAddress { get { return GetByteArrayAt(SkipUnicodeString(0)+8, DnsAddressLength); } }

        #region Private
        internal DnsLinkLocalArgs(Action<DnsLinkLocalArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsLinkLocalArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "AddressLength", AddressLength);
             XmlAttrib(sb, "DnsAddressLength", DnsAddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "AddressLength", "Address", "DnsAddressLength", "DnsAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return AddressLength;
                case 2:
                    return DnsAddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsLinkLocalArgs> m_target;
        #endregion
    }
    public sealed class DnsMatchPolicyInfoArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public string KeyName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int DnsSecValidationRequired { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int DnsQueryOverIPSec { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public int DnsEncryption { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public string DirectAccessServerList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))+12); } }
        public int ProxyType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)); } }
        public string ProxyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4); } }

        #region Private
        internal DnsMatchPolicyInfoArgs(Action<DnsMatchPolicyInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsMatchPolicyInfoArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "KeyName", KeyName);
             XmlAttrib(sb, "DnsSecValidationRequired", DnsSecValidationRequired);
             XmlAttrib(sb, "DnsQueryOverIPSec", DnsQueryOverIPSec);
             XmlAttrib(sb, "DnsEncryption", DnsEncryption);
             XmlAttrib(sb, "DirectAccessServerList", DirectAccessServerList);
             XmlAttrib(sb, "ProxyType", ProxyType);
             XmlAttrib(sb, "ProxyName", ProxyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "KeyName", "DnsSecValidationRequired", "DnsQueryOverIPSec", "DnsEncryption", "DirectAccessServerList", "ProxyType", "ProxyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return KeyName;
                case 2:
                    return DnsSecValidationRequired;
                case 3:
                    return DnsQueryOverIPSec;
                case 4:
                    return DnsEncryption;
                case 5:
                    return DirectAccessServerList;
                case 6:
                    return ProxyType;
                case 7:
                    return ProxyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsMatchPolicyInfoArgs> m_target;
        #endregion
    }
    public sealed class DnsMatchPolicyInfo1028Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public string KeyName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int DnsSecValidationRequired { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int DnsQueryOverIPSec { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public int DnsEncryption { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public string DirectAccessServerList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))+12); } }
        public int ProxyType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)); } }
        public string ProxyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4); } }
        public string GenericServerList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4)); } }
        public int IdnConfig { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4))); } }

        #region Private
        internal DnsMatchPolicyInfo1028Args(Action<DnsMatchPolicyInfo1028Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))+12)+4))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsMatchPolicyInfo1028Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "KeyName", KeyName);
             XmlAttrib(sb, "DnsSecValidationRequired", DnsSecValidationRequired);
             XmlAttrib(sb, "DnsQueryOverIPSec", DnsQueryOverIPSec);
             XmlAttrib(sb, "DnsEncryption", DnsEncryption);
             XmlAttrib(sb, "DirectAccessServerList", DirectAccessServerList);
             XmlAttrib(sb, "ProxyType", ProxyType);
             XmlAttrib(sb, "ProxyName", ProxyName);
             XmlAttrib(sb, "GenericServerList", GenericServerList);
             XmlAttrib(sb, "IdnConfig", IdnConfig);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "KeyName", "DnsSecValidationRequired", "DnsQueryOverIPSec", "DnsEncryption", "DirectAccessServerList", "ProxyType", "ProxyName", "GenericServerList", "IdnConfig"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return KeyName;
                case 2:
                    return DnsSecValidationRequired;
                case 3:
                    return DnsQueryOverIPSec;
                case 4:
                    return DnsEncryption;
                case 5:
                    return DirectAccessServerList;
                case 6:
                    return ProxyType;
                case 7:
                    return ProxyName;
                case 8:
                    return GenericServerList;
                case 9:
                    return IdnConfig;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsMatchPolicyInfo1028Args> m_target;
        #endregion
    }
    public sealed class DnsNetWarningArgs : TraceEvent
    {
        public int WarningCode { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public int Context { get { return GetInt32At(8); } }

        #region Private
        internal DnsNetWarningArgs(Action<DnsNetWarningArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNetWarningArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WarningCode", WarningCode);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "Context", Context);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WarningCode", "Location", "Context"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WarningCode;
                case 1:
                    return Location;
                case 2:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNetWarningArgs> m_target;
        #endregion
    }
    public sealed class DnsNonMatchingSuffixArgs : TraceEvent
    {
        public string DnsSuffix { get { return GetUnicodeStringAt(0); } }
        public string AdSuffix { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal DnsNonMatchingSuffixArgs(Action<DnsNonMatchingSuffixArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNonMatchingSuffixArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DnsSuffix", DnsSuffix);
             XmlAttrib(sb, "AdSuffix", AdSuffix);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DnsSuffix", "AdSuffix"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DnsSuffix;
                case 1:
                    return AdSuffix;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNonMatchingSuffixArgs> m_target;
        #endregion
    }
    public sealed class DnsNoServerConfigV4Args : TraceEvent
    {
        public int Location { get { return GetInt32At(0); } }
        public int Context { get { return GetInt32At(4); } }

        #region Private
        internal DnsNoServerConfigV4Args(Action<DnsNoServerConfigV4Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNoServerConfigV4Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Location", Location);
             XmlAttrib(sb, "Context", Context);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location", "Context"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                case 1:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNoServerConfigV4Args> m_target;
        #endregion
    }
    public sealed class DnsPolicySystemReadErrorArgs : TraceEvent
    {
        public string RuleName { get { return GetUnicodeStringAt(0); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal DnsPolicySystemReadErrorArgs(Action<DnsPolicySystemReadErrorArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsPolicySystemReadErrorArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RuleName", RuleName);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RuleName", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RuleName;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsPolicySystemReadErrorArgs> m_target;
        #endregion
    }
    public sealed class DnsQueryInvalidQuestionArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public string ResponseQuestion { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(SkipUnicodeString(0))+4, AddressLength); } }

        #region Private
        internal DnsQueryInvalidQuestionArgs(Action<DnsQueryInvalidQuestionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsQueryInvalidQuestionArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "ResponseQuestion", ResponseQuestion);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "ResponseQuestion", "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return ResponseQuestion;
                case 2:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsQueryInvalidQuestionArgs> m_target;
        #endregion
    }
    public sealed class DnsReadPolicyTableArgs : TraceEvent
    {
        public string KeyName { get { return GetUnicodeStringAt(0); } }
        public int DnsSecValidationRequired { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int DnsQueryOverIPSec { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int DnsEncryption { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        public string DirectAccessServerList { get { return GetUnicodeStringAt(SkipUnicodeString(0)+12); } }
        public int RemoteIPSEC { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)); } }
        public int RemoteEncryption { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)+4); } }
        public int ProxyType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)+8); } }
        public string ProxyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+12)+12); } }

        #region Private
        internal DnsReadPolicyTableArgs(Action<DnsReadPolicyTableArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+12)+12)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+12)+12)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsReadPolicyTableArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "KeyName", KeyName);
             XmlAttrib(sb, "DnsSecValidationRequired", DnsSecValidationRequired);
             XmlAttrib(sb, "DnsQueryOverIPSec", DnsQueryOverIPSec);
             XmlAttrib(sb, "DnsEncryption", DnsEncryption);
             XmlAttrib(sb, "DirectAccessServerList", DirectAccessServerList);
             XmlAttrib(sb, "RemoteIPSEC", RemoteIPSEC);
             XmlAttrib(sb, "RemoteEncryption", RemoteEncryption);
             XmlAttrib(sb, "ProxyType", ProxyType);
             XmlAttrib(sb, "ProxyName", ProxyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "KeyName", "DnsSecValidationRequired", "DnsQueryOverIPSec", "DnsEncryption", "DirectAccessServerList", "RemoteIPSEC", "RemoteEncryption", "ProxyType", "ProxyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return KeyName;
                case 1:
                    return DnsSecValidationRequired;
                case 2:
                    return DnsQueryOverIPSec;
                case 3:
                    return DnsEncryption;
                case 4:
                    return DirectAccessServerList;
                case 5:
                    return RemoteIPSEC;
                case 6:
                    return RemoteEncryption;
                case 7:
                    return ProxyType;
                case 8:
                    return ProxyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsReadPolicyTableArgs> m_target;
        #endregion
    }
    public sealed class DnsRegistrationArgs : TraceEvent
    {
        public string AdapterName { get { return GetUnicodeStringAt(0); } }
        public string HostName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string AdapterSuffixName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string DnsServerList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string SentUpdateServer { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string Ipaddress { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }

        #region Private
        internal DnsRegistrationArgs(Action<DnsRegistrationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsRegistrationArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AdapterName", AdapterName);
             XmlAttrib(sb, "HostName", HostName);
             XmlAttrib(sb, "AdapterSuffixName", AdapterSuffixName);
             XmlAttrib(sb, "DnsServerList", DnsServerList);
             XmlAttrib(sb, "SentUpdateServer", SentUpdateServer);
             XmlAttrib(sb, "Ipaddress", Ipaddress);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AdapterName", "HostName", "AdapterSuffixName", "DnsServerList", "SentUpdateServer", "Ipaddress", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AdapterName;
                case 1:
                    return HostName;
                case 2:
                    return AdapterSuffixName;
                case 3:
                    return DnsServerList;
                case 4:
                    return SentUpdateServer;
                case 5:
                    return Ipaddress;
                case 6:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsRegistrationArgs> m_target;
        #endregion
    }
    public sealed class DnsSecureNoFallbackArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal DnsSecureNoFallbackArgs(Action<DnsSecureNoFallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsSecureNoFallbackArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsSecureNoFallbackArgs> m_target;
        #endregion
    }
    public sealed class DnsServerForInterfaceArgs : TraceEvent
    {
        public string Interface { get { return GetUnicodeStringAt(0); } }
        public int TotalServerCount { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Index { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public DnsIpType DynamicAddress { get { return (DnsIpType)GetByteAt(SkipUnicodeString(0)+8); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)+9); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0)+13, AddressLength); } }

        #region Private
        internal DnsServerForInterfaceArgs(Action<DnsServerForInterfaceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+13));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerForInterfaceArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Interface", Interface);
             XmlAttrib(sb, "TotalServerCount", TotalServerCount);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "DynamicAddress", DynamicAddress);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Interface", "TotalServerCount", "Index", "DynamicAddress", "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Interface;
                case 1:
                    return TotalServerCount;
                case 2:
                    return Index;
                case 3:
                    return DynamicAddress;
                case 4:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerForInterfaceArgs> m_target;
        #endregion
    }
    public sealed class DnsServerQueryChangeArgs : TraceEvent
    {
        public string Interface { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0)+4, AddressLength); } }

        #region Private
        internal DnsServerQueryChangeArgs(Action<DnsServerQueryChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerQueryChangeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Interface", Interface);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Interface", "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Interface;
                case 1:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerQueryChangeArgs> m_target;
        #endregion
    }
    public sealed class DnsServerValidationSuccessArgs : TraceEvent
    {
        public int AddressLength { get { return GetInt32At(0); } }
        public byte[] Address { get { return GetByteArrayAt(4, AddressLength); } }

        #region Private
        internal DnsServerValidationSuccessArgs(Action<DnsServerValidationSuccessArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (AddressLength*1)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (AddressLength*1)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerValidationSuccessArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerValidationSuccessArgs> m_target;
        #endregion
    }
    public sealed class DnsStateTransitionArgs : TraceEvent
    {
        public int NextState { get { return GetByteAt(0); } }
        public int Context { get { return GetInt32At(1); } }

        #region Private
        internal DnsStateTransitionArgs(Action<DnsStateTransitionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsStateTransitionArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NextState", NextState);
             XmlAttrib(sb, "Context", Context);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NextState", "Context"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NextState;
                case 1:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsStateTransitionArgs> m_target;
        #endregion
    }
    public sealed class DnsV4TupleArgs : TraceEvent
    {
        public int SourceAddress { get { return GetInt32At(0); } }
        public int SourcePort { get { return GetInt32At(4); } }
        public int DestinationAddress { get { return GetInt32At(8); } }
        public int DestinationPort { get { return GetInt32At(12); } }
        public int Protocol { get { return GetInt32At(16); } }
        public int ReferenceContext { get { return GetInt32At(20); } }

        #region Private
        internal DnsV4TupleArgs(Action<DnsV4TupleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsV4TupleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceAddress", SourceAddress);
             XmlAttrib(sb, "SourcePort", SourcePort);
             XmlAttrib(sb, "DestinationAddress", DestinationAddress);
             XmlAttrib(sb, "DestinationPort", DestinationPort);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "ReferenceContext", ReferenceContext);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceAddress", "SourcePort", "DestinationAddress", "DestinationPort", "Protocol", "ReferenceContext"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceAddress;
                case 1:
                    return SourcePort;
                case 2:
                    return DestinationAddress;
                case 3:
                    return DestinationPort;
                case 4:
                    return Protocol;
                case 5:
                    return ReferenceContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsV4TupleArgs> m_target;
        #endregion
    }
    public sealed class DnsV6TupleArgs : TraceEvent
    {
        public byte[] SourceAddress { get { return GetByteArrayAt(0, AddressLength); } }
        public int SourcePort { get { return GetInt32At(0+ (AddressLength*1)); } }
        public byte[] DestinationAddress { get { return GetByteArrayAt(0+ (AddressLength*1)+4, AddressLength); } }
        public int DestinationPort { get { return GetInt32At(0+ (AddressLength*1)+ (AddressLength*1)+4); } }
        public int Protocol { get { return GetInt32At(0+ (AddressLength*1)+ (AddressLength*1)+8); } }
        public int ReferenceContext { get { return GetInt32At(0+ (AddressLength*1)+ (AddressLength*1)+12); } }
        public int AddressLength { get { return GetInt32At(0+ (AddressLength*1)+ (AddressLength*1)+16); } }
        public byte[] Address { get { return GetByteArrayAt(0+ (AddressLength*1)+ (AddressLength*1)+20, AddressLength); } }

        #region Private
        internal DnsV6TupleArgs(Action<DnsV6TupleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (AddressLength*1)+ (AddressLength*1)+ (AddressLength*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (AddressLength*1)+ (AddressLength*1)+ (AddressLength*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsV6TupleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourcePort", SourcePort);
             XmlAttrib(sb, "DestinationPort", DestinationPort);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "ReferenceContext", ReferenceContext);
             XmlAttrib(sb, "AddressLength", AddressLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceAddress", "SourcePort", "DestinationAddress", "DestinationPort", "Protocol", "ReferenceContext", "AddressLength", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourcePort;
                case 1:
                    return DestinationPort;
                case 2:
                    return Protocol;
                case 3:
                    return ReferenceContext;
                case 4:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsV6TupleArgs> m_target;
        #endregion
    }
    public sealed class task_03000Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long QueryOptions { get { return GetInt64At(SkipUnicodeString(0)+4); } }

        #region Private
        internal task_03000Args(Action<task_03000Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03000Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "QueryOptions", QueryOptions);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "QueryOptions"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return QueryOptions;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03000Args> m_target;
        #endregion
    }
    public sealed class task_03001Args : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal task_03001Args(Action<task_03001Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03001Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03001Args> m_target;
        #endregion
    }
    public sealed class task_03003Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal task_03003Args(Action<task_03003Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03003Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03003Args> m_target;
        #endregion
    }
    public sealed class task_03006Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long QueryOptions { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public string ServerList { get { return GetUnicodeStringAt(SkipUnicodeString(0)+12); } }
        public int IsNetworkQuery { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)); } }
        public int NetworkQueryIndex { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)+4); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)+8); } }
        public int IsAsyncQuery { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+12)+12); } }

        #region Private
        internal task_03006Args(Action<task_03006Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+12)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+12)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03006Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "QueryOptions", QueryOptions);
             XmlAttrib(sb, "ServerList", ServerList);
             XmlAttrib(sb, "IsNetworkQuery", IsNetworkQuery);
             XmlAttrib(sb, "NetworkQueryIndex", NetworkQueryIndex);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "IsAsyncQuery", IsAsyncQuery);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "QueryOptions", "ServerList", "IsNetworkQuery", "NetworkQueryIndex", "InterfaceIndex", "IsAsyncQuery"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return QueryOptions;
                case 3:
                    return ServerList;
                case 4:
                    return IsNetworkQuery;
                case 5:
                    return NetworkQueryIndex;
                case 6:
                    return InterfaceIndex;
                case 7:
                    return IsAsyncQuery;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03006Args> m_target;
        #endregion
    }
    public sealed class task_03008Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long QueryOptions { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public int QueryStatus { get { return GetInt32At(SkipUnicodeString(0)+12); } }
        public string QueryResults { get { return GetUnicodeStringAt(SkipUnicodeString(0)+16); } }

        #region Private
        internal task_03008Args(Action<task_03008Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+16)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03008Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "QueryOptions", QueryOptions);
             XmlAttrib(sb, "QueryStatus", QueryStatus);
             XmlAttrib(sb, "QueryResults", QueryResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "QueryOptions", "QueryStatus", "QueryResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return QueryOptions;
                case 3:
                    return QueryStatus;
                case 4:
                    return QueryResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03008Args> m_target;
        #endregion
    }
    public sealed class task_03009Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int IsParallelNetworkQuery { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int NetworkIndex { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int InterfaceCount { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        public string AdapterName { get { return GetUnicodeStringAt(SkipUnicodeString(0)+12); } }
        public string LocalAddress { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+12)); } }
        public string DNSServerAddress { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+12))); } }

        #region Private
        internal task_03009Args(Action<task_03009Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+12)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+12)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03009Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "IsParallelNetworkQuery", IsParallelNetworkQuery);
             XmlAttrib(sb, "NetworkIndex", NetworkIndex);
             XmlAttrib(sb, "InterfaceCount", InterfaceCount);
             XmlAttrib(sb, "AdapterName", AdapterName);
             XmlAttrib(sb, "LocalAddress", LocalAddress);
             XmlAttrib(sb, "DNSServerAddress", DNSServerAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "IsParallelNetworkQuery", "NetworkIndex", "InterfaceCount", "AdapterName", "LocalAddress", "DNSServerAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return IsParallelNetworkQuery;
                case 2:
                    return NetworkIndex;
                case 3:
                    return InterfaceCount;
                case 4:
                    return AdapterName;
                case 5:
                    return LocalAddress;
                case 6:
                    return DNSServerAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03009Args> m_target;
        #endregion
    }
    public sealed class task_03010Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string DnsServerIpAddress { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal task_03010Args(Action<task_03010Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03010Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "DnsServerIpAddress", DnsServerIpAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "DnsServerIpAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return DnsServerIpAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03010Args> m_target;
        #endregion
    }
    public sealed class task_03011Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string DnsServerIpAddress { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }
        public int ResponseStatus { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+4)); } }

        #region Private
        internal task_03011Args(Action<task_03011Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03011Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "DnsServerIpAddress", DnsServerIpAddress);
             XmlAttrib(sb, "ResponseStatus", ResponseStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "DnsServerIpAddress", "ResponseStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return DnsServerIpAddress;
                case 3:
                    return ResponseStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03011Args> m_target;
        #endregion
    }
    public sealed class task_03012Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int NetworkIndex { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int InterfaceCount { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public string AdapterName { get { return GetUnicodeStringAt(SkipUnicodeString(0)+8); } }
        public string LocalAddress { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+8)); } }

        #region Private
        internal task_03012Args(Action<task_03012Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+8))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03012Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "NetworkIndex", NetworkIndex);
             XmlAttrib(sb, "InterfaceCount", InterfaceCount);
             XmlAttrib(sb, "AdapterName", AdapterName);
             XmlAttrib(sb, "LocalAddress", LocalAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "NetworkIndex", "InterfaceCount", "AdapterName", "LocalAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return NetworkIndex;
                case 2:
                    return InterfaceCount;
                case 3:
                    return AdapterName;
                case 4:
                    return LocalAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03012Args> m_target;
        #endregion
    }
    public sealed class task_03013Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string QueryResults { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal task_03013Args(Action<task_03013Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03013Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "QueryResults", QueryResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "Status", "QueryResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return Status;
                case 2:
                    return QueryResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03013Args> m_target;
        #endregion
    }
    public sealed class task_03016Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long QueryOptions { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(0)+12); } }

        #region Private
        internal task_03016Args(Action<task_03016Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03016Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "QueryOptions", QueryOptions);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "QueryOptions", "InterfaceIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return QueryOptions;
                case 3:
                    return InterfaceIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03016Args> m_target;
        #endregion
    }
    public sealed class task_03018Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long QueryOptions { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+12); } }
        public string QueryResults { get { return GetUnicodeStringAt(SkipUnicodeString(0)+16); } }

        #region Private
        internal task_03018Args(Action<task_03018Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+16)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03018Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "QueryOptions", QueryOptions);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "QueryResults", QueryResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "QueryOptions", "Status", "QueryResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return QueryOptions;
                case 3:
                    return Status;
                case 4:
                    return QueryResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03018Args> m_target;
        #endregion
    }
    public sealed class task_03019Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int NetworkIndex { get { return GetInt32At(SkipUnicodeString(0)+8); } }

        #region Private
        internal task_03019Args(Action<task_03019Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03019Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "NetworkIndex", NetworkIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "InterfaceIndex", "NetworkIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return InterfaceIndex;
                case 3:
                    return NetworkIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03019Args> m_target;
        #endregion
    }
    public sealed class task_03020Args : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int QueryType { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int NetworkIndex { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int InterfaceIndex { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+12); } }
        public string QueryResults { get { return GetUnicodeStringAt(SkipUnicodeString(0)+16); } }

        #region Private
        internal task_03020Args(Action<task_03020Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+16)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03020Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QueryName", QueryName);
             XmlAttrib(sb, "QueryType", QueryType);
             XmlAttrib(sb, "NetworkIndex", NetworkIndex);
             XmlAttrib(sb, "InterfaceIndex", InterfaceIndex);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "QueryResults", QueryResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "QueryType", "NetworkIndex", "InterfaceIndex", "Status", "QueryResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return QueryType;
                case 2:
                    return NetworkIndex;
                case 3:
                    return InterfaceIndex;
                case 4:
                    return Status;
                case 5:
                    return QueryResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03020Args> m_target;
        #endregion
    }
    public enum DnsIpType
    {
        estático = 0x0,
        dinâmico = 0x1,
    }
}
