using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Servicedog.Manifests.Afd
{
    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class WinsockAfdParser : TraceEventParser
    {
        public static string ProviderName = "Microsoft-Windows-Winsock-AFD";
        public static Guid ProviderGuid = new Guid(unchecked((int)0xe53c6823), unchecked((short)0x7bb8), unchecked((short)0x44bb), 0x90, 0xdc, 0x3f, 0x86, 0x09, 0x0d, 0x48, 0xa6);
        public enum Keywords : long
        {
            AfdKwDatagram = 0x1,
            AfdKwStream = 0x2,
            AfdKwSourceWinsock = 0x4,
            AfdKwSourceTransport = 0x8,
            AfdKwFastpath = 0x10,
            AfdKwBuffered = 0x20,
            AfdKwRio = 0x40,
            Keyword10000000000 = 0x10000000000,
        };

        public WinsockAfdParser(TraceEventSource source) : base(source) { }

        public event Action<AfdAbortAbortedArgs> AfdAbort
        {
            add
            {
                source.RegisterEventTemplate(AfdAbortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1032, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdAccept
        {
            add
            {
                source.RegisterEventTemplate(AfdAcceptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1023, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdAcceptEx
        {
            add
            {
                source.RegisterEventTemplate(AfdAcceptExTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1026, ProviderGuid);
            }
        }
        public event Action<AfdAcceptWithAddressConnectedArgs> AfdAcceptExWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdAcceptExWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1027, ProviderGuid);
            }
        }
        public event Action<AfdAcceptWithAddressConnectedArgs> AfdAcceptWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdAcceptWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1024, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdBind
        {
            add
            {
                source.RegisterEventTemplate(AfdBindTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1029, ProviderGuid);
            }
        }
        public event Action<AfdBindWithAddressConnectedArgs> AfdBindWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdBindWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1030, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdCleanup
        {
            add
            {
                source.RegisterEventTemplate(AfdCleanupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdClose
        {
            add
            {
                source.RegisterEventTemplate(AfdCloseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdConnect
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1017, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdConnectEx
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectExTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1020, ProviderGuid);
            }
        }
        public event Action<AfdConnectWithAddressConnectedArgs> AfdConnectExWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectExWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1021, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdConnectIndication
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectIndicationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3000, ProviderGuid);
            }
        }
        public event Action<AfdConnectIndicationWithAddressArgs> AfdConnectIndicationWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectIndicationWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3001, ProviderGuid);
            }
        }
        public event Action<AfdConnectWithAddressConnectedArgs> AfdConnectWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdConnectWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1018, ProviderGuid);
            }
        }
        public event Action<AfdCreateOpenArgs> AfdCreate
        {
            add
            {
                source.RegisterEventTemplate(AfdCreateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1000, ProviderGuid);
            }
        }
        public event Action<AfdDatagramDropWithAddressConnectedArgs> AfdDatagramDropWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdDatagramDropWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1033, ProviderGuid);
            }
        }
        public event Action<AfdDataIndicationArgs> AfdDataIndication
        {
            add
            {
                source.RegisterEventTemplate(AfdDataIndicationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3003, ProviderGuid);
            }
        }
        public event Action<AfdDataIndicationWithAddressArgs> AfdDataIndicationWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdDataIndicationWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3004, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdDisconnect
        {
            add
            {
                source.RegisterEventTemplate(AfdDisconnectTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3006, ProviderGuid);
            }
        }
        public event Action<AfdListenArgs> AfdListen
        {
            add
            {
                source.RegisterEventTemplate(AfdListenTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1037, ProviderGuid);
            }
        }
        public event Action<AfdOptionArgs> AfdOption
        {
            add
            {
                source.RegisterEventTemplate(AfdOptionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1035, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdReceive
        {
            add
            {
                source.RegisterEventTemplate(AfdReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1004, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdReceiveFrom
        {
            add
            {
                source.RegisterEventTemplate(AfdReceiveFromTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1006, ProviderGuid);
            }
        }
        public event Action<AfdSendToWithAddressConnectedArgs> AfdReceiveFromWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdReceiveFromWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1009, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdReceiveMessage
        {
            add
            {
                source.RegisterEventTemplate(AfdReceiveMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
            }
        }
        public event Action<AfdSendToWithAddressConnectedArgs> AfdReceiveMessageWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdReceiveMessageWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
            }
        }
        public event Action<AfdRioCleanupBufferFreedArgs> AfdRioCleanupBuffer
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCleanupBufferTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4012, ProviderGuid);
            }
        }
        public event Action<AfdRioCleanupCqFreedArgs> AfdRioCleanupCq
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCleanupCqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4004, ProviderGuid);
            }
        }
        public event Action<AfdRioCleanupRegistrationDomainClosedArgs> AfdRioCleanupRegistrationDomain
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCleanupRegistrationDomainTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4001, ProviderGuid);
            }
        }
        public event Action<AfdRioCleanupRioStateFreedArgs> AfdRioCleanupRioState
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCleanupRioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4008, ProviderGuid);
            }
        }
        public event Action<AfdRioCloseRioStateClosedArgs> AfdRioCloseRioState
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCloseRioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4007, ProviderGuid);
            }
        }
        public event Action<AfdRioCreateCqOpenArgs> AfdRioCreateCq
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCreateCqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4002, ProviderGuid);
            }
        }
        public event Action<AfdRioCreateRegistrationDomainOpenArgs> AfdRioCreateRegistrationDomain
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCreateRegistrationDomainTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4000, ProviderGuid);
            }
        }
        public event Action<AfdRioCreateRqPairOpenArgs> AfdRioCreateRqPair
        {
            add
            {
                source.RegisterEventTemplate(AfdRioCreateRqPairTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4006, ProviderGuid);
            }
        }
        public event Action<AfdRioDeregisterBufferClosedArgs> AfdRioDeregisterBuffer
        {
            add
            {
                source.RegisterEventTemplate(AfdRioDeregisterBufferTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4011, ProviderGuid);
            }
        }
        public event Action<AfdRioDestroyCqClosedArgs> AfdRioDestroyCq
        {
            add
            {
                source.RegisterEventTemplate(AfdRioDestroyCqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4003, ProviderGuid);
            }
        }
        public event Action<AfdRioRangeCheckArgs> AfdRioRangeCheck
        {
            add
            {
                source.RegisterEventTemplate(AfdRioRangeCheckTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4014, ProviderGuid);
            }
        }
        public event Action<AfdRioRegisterBufferOpenArgs> AfdRioRegisterBuffer
        {
            add
            {
                source.RegisterEventTemplate(AfdRioRegisterBufferTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4010, ProviderGuid);
            }
        }
        public event Action<AfdRioResizeCqModifiedArgs> AfdRioResizeCq
        {
            add
            {
                source.RegisterEventTemplate(AfdRioResizeCqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4005, ProviderGuid);
            }
        }
        public event Action<AfdRioResizeRqPairModifiedArgs> AfdRioResizeRqPair
        {
            add
            {
                source.RegisterEventTemplate(AfdRioResizeRqPairTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4009, ProviderGuid);
            }
        }
        public event Action<AfdRioSendReceiveArgs> AfdRioSendReceive
        {
            add
            {
                source.RegisterEventTemplate(AfdRioSendReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4015, ProviderGuid);
            }
        }
        public event Action<AfdRioValidateBufferIdArgs> AfdRioValidateBufferId
        {
            add
            {
                source.RegisterEventTemplate(AfdRioValidateBufferIdTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4013, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdSend
        {
            add
            {
                source.RegisterEventTemplate(AfdSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
            }
        }
        public event Action<AfdSendBackLogArgs> AfdSendBackLog
        {
            add
            {
                source.RegisterEventTemplate(AfdSendBackLogTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3007, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdSendMessage
        {
            add
            {
                source.RegisterEventTemplate(AfdSendMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
            }
        }
        public event Action<AfdSendToWithAddressConnectedArgs> AfdSendMessageWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdSendMessageWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
            }
        }
        public event Action<AfdSendConnectedArgs> AfdSendTo
        {
            add
            {
                source.RegisterEventTemplate(AfdSendToTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1005, ProviderGuid);
            }
        }
        public event Action<AfdSendToWithAddressConnectedArgs> AfdSendToWithAddress
        {
            add
            {
                source.RegisterEventTemplate(AfdSendToWithAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1007, ProviderGuid);
            }
        }
        public event Action<AfdCloseClosedArgs> AfdWaitForListen
        {
            add
            {
                source.RegisterEventTemplate(AfdWaitForListenTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1036, ProviderGuid);
            }
        }
        public event Action<task_0Args> task_0
        {
            add
            {
                source.RegisterEventTemplate(task_0Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_010
        {
            add
            {
                source.RegisterEventTemplate(task_010Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_011
        {
            add
            {
                source.RegisterEventTemplate(task_011Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_012
        {
            add
            {
                source.RegisterEventTemplate(task_012Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_013
        {
            add
            {
                source.RegisterEventTemplate(task_013Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_014
        {
            add
            {
                source.RegisterEventTemplate(task_014Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<task_02Args> task_015
        {
            add
            {
                source.RegisterEventTemplate(task_015Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<task_03Args> task_016
        {
            add
            {
                source.RegisterEventTemplate(task_016Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_017
        {
            add
            {
                source.RegisterEventTemplate(task_017Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<task_018Args> task_018
        {
            add
            {
                source.RegisterEventTemplate(task_018Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<task_018Args> task_019
        {
            add
            {
                source.RegisterEventTemplate(task_019Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<task_02Args> task_02
        {
            add
            {
                source.RegisterEventTemplate(task_02Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<task_018Args> task_020
        {
            add
            {
                source.RegisterEventTemplate(task_020Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<task_021Args> task_021
        {
            add
            {
                source.RegisterEventTemplate(task_021Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<task_022Args> task_022
        {
            add
            {
                source.RegisterEventTemplate(task_022Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<task_023Args> task_023
        {
            add
            {
                source.RegisterEventTemplate(task_023Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<task_023Args> task_024
        {
            add
            {
                source.RegisterEventTemplate(task_024Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<task_023Args> task_025
        {
            add
            {
                source.RegisterEventTemplate(task_025Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<task_026Args> task_026
        {
            add
            {
                source.RegisterEventTemplate(task_026Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<task_027Args> task_027
        {
            add
            {
                source.RegisterEventTemplate(task_027Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<task_023Args> task_028
        {
            add
            {
                source.RegisterEventTemplate(task_028Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<task_029Args> task_029
        {
            add
            {
                source.RegisterEventTemplate(task_029Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<task_03Args> task_03
        {
            add
            {
                source.RegisterEventTemplate(task_03Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<task_030Args> task_030
        {
            add
            {
                source.RegisterEventTemplate(task_030Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_031
        {
            add
            {
                source.RegisterEventTemplate(task_031Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<task_032Args> task_032
        {
            add
            {
                source.RegisterEventTemplate(task_032Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<task_033Args> task_033
        {
            add
            {
                source.RegisterEventTemplate(task_033Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<task_034Args> task_034
        {
            add
            {
                source.RegisterEventTemplate(task_034Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<task_035Args> task_035
        {
            add
            {
                source.RegisterEventTemplate(task_035Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<task_036Args> task_036
        {
            add
            {
                source.RegisterEventTemplate(task_036Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<task_037Args> task_037
        {
            add
            {
                source.RegisterEventTemplate(task_037Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<task_038Args> task_038
        {
            add
            {
                source.RegisterEventTemplate(task_038Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<task_039Args> task_039
        {
            add
            {
                source.RegisterEventTemplate(task_039Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<task_04Args> task_04
        {
            add
            {
                source.RegisterEventTemplate(task_04Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_040
        {
            add
            {
                source.RegisterEventTemplate(task_040Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<task_041Args> task_041
        {
            add
            {
                source.RegisterEventTemplate(task_041Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<task_05Args> task_05
        {
            add
            {
                source.RegisterEventTemplate(task_05Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_06
        {
            add
            {
                source.RegisterEventTemplate(task_06Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<task_07Args> task_07
        {
            add
            {
                source.RegisterEventTemplate(task_07Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<task_07Args> task_08
        {
            add
            {
                source.RegisterEventTemplate(task_08Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<task_06Args> task_09
        {
            add
            {
                source.RegisterEventTemplate(task_09Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AfdAbortAbortedArgs AfdAbortTemplate(Action<AfdAbortAbortedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdAbortAbortedArgs(action, 1032, 1032, "AfdAbort", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdAcceptTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1023, 1023, "AfdAccept", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdAcceptExTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1026, 1026, "AfdAcceptEx", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdAcceptWithAddressConnectedArgs AfdAcceptExWithAddressTemplate(Action<AfdAcceptWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdAcceptWithAddressConnectedArgs(action, 1027, 1027, "AfdAcceptExWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdAcceptWithAddressConnectedArgs AfdAcceptWithAddressTemplate(Action<AfdAcceptWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdAcceptWithAddressConnectedArgs(action, 1024, 1024, "AfdAcceptWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdBindTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1029, 1029, "AfdBind", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdBindWithAddressConnectedArgs AfdBindWithAddressTemplate(Action<AfdBindWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdBindWithAddressConnectedArgs(action, 1030, 1030, "AfdBindWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdCleanupTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1002, 1002, "AfdCleanup", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdCloseTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1001, 1001, "AfdClose", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdConnectTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1017, 1017, "AfdConnect", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdConnectExTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1020, 1020, "AfdConnectEx", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdConnectWithAddressConnectedArgs AfdConnectExWithAddressTemplate(Action<AfdConnectWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdConnectWithAddressConnectedArgs(action, 1021, 1021, "AfdConnectExWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdConnectIndicationTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 3000, 3000, "AfdConnectIndication", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdConnectIndicationWithAddressArgs AfdConnectIndicationWithAddressTemplate(Action<AfdConnectIndicationWithAddressArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdConnectIndicationWithAddressArgs(action, 3001, 3001, "AfdConnectIndicationWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdConnectWithAddressConnectedArgs AfdConnectWithAddressTemplate(Action<AfdConnectWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdConnectWithAddressConnectedArgs(action, 1018, 1018, "AfdConnectWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCreateOpenArgs AfdCreateTemplate(Action<AfdCreateOpenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCreateOpenArgs(action, 1000, 1000, "AfdCreate", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdDatagramDropWithAddressConnectedArgs AfdDatagramDropWithAddressTemplate(Action<AfdDatagramDropWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdDatagramDropWithAddressConnectedArgs(action, 1033, 1033, "AfdDatagramDropWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdDataIndicationArgs AfdDataIndicationTemplate(Action<AfdDataIndicationArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdDataIndicationArgs(action, 3003, 3003, "AfdDataIndication", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdDataIndicationWithAddressArgs AfdDataIndicationWithAddressTemplate(Action<AfdDataIndicationWithAddressArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdDataIndicationWithAddressArgs(action, 3004, 3004, "AfdDataIndicationWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdDisconnectTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 3006, 3006, "AfdDisconnect", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdListenArgs AfdListenTemplate(Action<AfdListenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdListenArgs(action, 1037, 1037, "AfdListen", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdOptionArgs AfdOptionTemplate(Action<AfdOptionArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdOptionArgs(action, 1035, 1035, "AfdOption", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdReceiveTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1004, 1004, "AfdReceive", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdReceiveFromTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1006, 1006, "AfdReceiveFrom", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendToWithAddressConnectedArgs AfdReceiveFromWithAddressTemplate(Action<AfdSendToWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendToWithAddressConnectedArgs(action, 1009, 1009, "AfdReceiveFromWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdReceiveMessageTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1012, 1012, "AfdReceiveMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendToWithAddressConnectedArgs AfdReceiveMessageWithAddressTemplate(Action<AfdSendToWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendToWithAddressConnectedArgs(action, 1015, 1015, "AfdReceiveMessageWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCleanupBufferFreedArgs AfdRioCleanupBufferTemplate(Action<AfdRioCleanupBufferFreedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCleanupBufferFreedArgs(action, 4012, 4012, "AfdRioCleanupBuffer", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCleanupCqFreedArgs AfdRioCleanupCqTemplate(Action<AfdRioCleanupCqFreedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCleanupCqFreedArgs(action, 4004, 4004, "AfdRioCleanupCq", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCleanupRegistrationDomainClosedArgs AfdRioCleanupRegistrationDomainTemplate(Action<AfdRioCleanupRegistrationDomainClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCleanupRegistrationDomainClosedArgs(action, 4001, 4001, "AfdRioCleanupRegistrationDomain", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCleanupRioStateFreedArgs AfdRioCleanupRioStateTemplate(Action<AfdRioCleanupRioStateFreedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCleanupRioStateFreedArgs(action, 4008, 4008, "AfdRioCleanupRioState", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCloseRioStateClosedArgs AfdRioCloseRioStateTemplate(Action<AfdRioCloseRioStateClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCloseRioStateClosedArgs(action, 4007, 4007, "AfdRioCloseRioState", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCreateCqOpenArgs AfdRioCreateCqTemplate(Action<AfdRioCreateCqOpenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCreateCqOpenArgs(action, 4002, 4002, "AfdRioCreateCq", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCreateRegistrationDomainOpenArgs AfdRioCreateRegistrationDomainTemplate(Action<AfdRioCreateRegistrationDomainOpenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCreateRegistrationDomainOpenArgs(action, 4000, 4000, "AfdRioCreateRegistrationDomain", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioCreateRqPairOpenArgs AfdRioCreateRqPairTemplate(Action<AfdRioCreateRqPairOpenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioCreateRqPairOpenArgs(action, 4006, 4006, "AfdRioCreateRqPair", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioDeregisterBufferClosedArgs AfdRioDeregisterBufferTemplate(Action<AfdRioDeregisterBufferClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioDeregisterBufferClosedArgs(action, 4011, 4011, "AfdRioDeregisterBuffer", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioDestroyCqClosedArgs AfdRioDestroyCqTemplate(Action<AfdRioDestroyCqClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioDestroyCqClosedArgs(action, 4003, 4003, "AfdRioDestroyCq", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioRangeCheckArgs AfdRioRangeCheckTemplate(Action<AfdRioRangeCheckArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioRangeCheckArgs(action, 4014, 4014, "AfdRioRangeCheck", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioRegisterBufferOpenArgs AfdRioRegisterBufferTemplate(Action<AfdRioRegisterBufferOpenArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioRegisterBufferOpenArgs(action, 4010, 4010, "AfdRioRegisterBuffer", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioResizeCqModifiedArgs AfdRioResizeCqTemplate(Action<AfdRioResizeCqModifiedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioResizeCqModifiedArgs(action, 4005, 4005, "AfdRioResizeCq", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioResizeRqPairModifiedArgs AfdRioResizeRqPairTemplate(Action<AfdRioResizeRqPairModifiedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioResizeRqPairModifiedArgs(action, 4009, 4009, "AfdRioResizeRqPair", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioSendReceiveArgs AfdRioSendReceiveTemplate(Action<AfdRioSendReceiveArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioSendReceiveArgs(action, 4015, 4015, "AfdRioSendReceive", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdRioValidateBufferIdArgs AfdRioValidateBufferIdTemplate(Action<AfdRioValidateBufferIdArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdRioValidateBufferIdArgs(action, 4013, 4013, "AfdRioValidateBufferId", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdSendTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1003, 1003, "AfdSend", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendBackLogArgs AfdSendBackLogTemplate(Action<AfdSendBackLogArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendBackLogArgs(action, 3007, 3007, "AfdSendBackLog", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdSendMessageTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1011, 1011, "AfdSendMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendToWithAddressConnectedArgs AfdSendMessageWithAddressTemplate(Action<AfdSendToWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendToWithAddressConnectedArgs(action, 1013, 1013, "AfdSendMessageWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendConnectedArgs AfdSendToTemplate(Action<AfdSendConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendConnectedArgs(action, 1005, 1005, "AfdSendTo", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdSendToWithAddressConnectedArgs AfdSendToWithAddressTemplate(Action<AfdSendToWithAddressConnectedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdSendToWithAddressConnectedArgs(action, 1007, 1007, "AfdSendToWithAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private AfdCloseClosedArgs AfdWaitForListenTemplate(Action<AfdCloseClosedArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AfdCloseClosedArgs(action, 1036, 1036, "AfdWaitForListen", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_0Args task_0Template(Action<task_0Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_0Args(action, 1, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_010Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 10, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_011Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 11, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_012Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 12, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_013Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 13, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_014Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 14, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_02Args task_015Template(Action<task_02Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_02Args(action, 15, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_03Args task_016Template(Action<task_03Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03Args(action, 16, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_017Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 17, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_018Args task_018Template(Action<task_018Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_018Args(action, 18, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_018Args task_019Template(Action<task_018Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_018Args(action, 19, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_02Args task_02Template(Action<task_02Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_02Args(action, 2, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_018Args task_020Template(Action<task_018Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_018Args(action, 20, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_021Args task_021Template(Action<task_021Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_021Args(action, 21, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_022Args task_022Template(Action<task_022Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_022Args(action, 22, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_023Args task_023Template(Action<task_023Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_023Args(action, 23, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_023Args task_024Template(Action<task_023Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_023Args(action, 24, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_023Args task_025Template(Action<task_023Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_023Args(action, 25, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_026Args task_026Template(Action<task_026Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_026Args(action, 26, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_027Args task_027Template(Action<task_027Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_027Args(action, 27, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_023Args task_028Template(Action<task_023Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_023Args(action, 28, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_029Args task_029Template(Action<task_029Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_029Args(action, 29, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_03Args task_03Template(Action<task_03Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_03Args(action, 3, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_030Args task_030Template(Action<task_030Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_030Args(action, 30, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_031Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 31, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_032Args task_032Template(Action<task_032Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_032Args(action, 32, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_033Args task_033Template(Action<task_033Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_033Args(action, 33, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_034Args task_034Template(Action<task_034Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_034Args(action, 34, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_035Args task_035Template(Action<task_035Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_035Args(action, 35, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_036Args task_036Template(Action<task_036Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_036Args(action, 36, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_037Args task_037Template(Action<task_037Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_037Args(action, 37, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_038Args task_038Template(Action<task_038Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_038Args(action, 38, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_039Args task_039Template(Action<task_039Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_039Args(action, 39, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_04Args task_04Template(Action<task_04Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_04Args(action, 4, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_040Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 40, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_041Args task_041Template(Action<task_041Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_041Args(action, 41, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_05Args task_05Template(Action<task_05Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_05Args(action, 5, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_06Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 6, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_07Args task_07Template(Action<task_07Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_07Args(action, 7, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_07Args task_08Template(Action<task_07Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_07Args(action, 8, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private task_06Args task_09Template(Action<task_06Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new task_06Args(action, 9, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[91];
                templates[0] = task_0Template(null);
                templates[1] = task_0Template(null);
                templates[2] = task_0Template(null);
                templates[3] = task_0Template(null);
                templates[4] = task_0Template(null);
                templates[5] = task_0Template(null);
                templates[6] = task_0Template(null);
                templates[7] = task_0Template(null);
                templates[8] = task_0Template(null);
                templates[9] = task_0Template(null);
                templates[10] = task_0Template(null);
                templates[11] = task_0Template(null);
                templates[12] = task_0Template(null);
                templates[13] = task_0Template(null);
                templates[14] = task_0Template(null);
                templates[15] = task_0Template(null);
                templates[16] = task_0Template(null);
                templates[17] = task_0Template(null);
                templates[18] = task_0Template(null);
                templates[19] = task_0Template(null);
                templates[20] = task_0Template(null);
                templates[21] = task_0Template(null);
                templates[22] = task_0Template(null);
                templates[23] = task_0Template(null);
                templates[24] = task_0Template(null);
                templates[25] = task_0Template(null);
                templates[26] = task_0Template(null);
                templates[27] = task_0Template(null);
                templates[28] = task_0Template(null);
                templates[29] = task_0Template(null);
                templates[30] = task_0Template(null);
                templates[31] = task_0Template(null);
                templates[32] = task_0Template(null);
                templates[33] = task_0Template(null);
                templates[34] = task_0Template(null);
                templates[35] = task_0Template(null);
                templates[36] = task_0Template(null);
                templates[37] = task_0Template(null);
                templates[38] = task_0Template(null);
                templates[39] = task_0Template(null);
                templates[40] = task_0Template(null);
                templates[41] = AfdCreateTemplate(null);
                templates[42] = AfdCloseTemplate(null);
                templates[43] = AfdCleanupTemplate(null);
                templates[44] = AfdSendTemplate(null);
                templates[45] = AfdReceiveTemplate(null);
                templates[46] = AfdSendToTemplate(null);
                templates[47] = AfdReceiveFromTemplate(null);
                templates[48] = AfdSendToWithAddressTemplate(null);
                templates[49] = AfdReceiveFromWithAddressTemplate(null);
                templates[50] = AfdSendMessageTemplate(null);
                templates[51] = AfdReceiveMessageTemplate(null);
                templates[52] = AfdSendMessageWithAddressTemplate(null);
                templates[53] = AfdReceiveMessageWithAddressTemplate(null);
                templates[54] = AfdConnectTemplate(null);
                templates[55] = AfdConnectWithAddressTemplate(null);
                templates[56] = AfdConnectExTemplate(null);
                templates[57] = AfdConnectExWithAddressTemplate(null);
                templates[58] = AfdAcceptTemplate(null);
                templates[59] = AfdAcceptWithAddressTemplate(null);
                templates[60] = AfdAcceptExTemplate(null);
                templates[61] = AfdAcceptExWithAddressTemplate(null);
                templates[62] = AfdBindTemplate(null);
                templates[63] = AfdBindWithAddressTemplate(null);
                templates[64] = AfdAbortTemplate(null);
                templates[65] = AfdDatagramDropWithAddressTemplate(null);
                templates[66] = AfdOptionTemplate(null);
                templates[67] = AfdWaitForListenTemplate(null);
                templates[68] = AfdListenTemplate(null);
                templates[69] = AfdConnectIndicationTemplate(null);
                templates[70] = AfdConnectIndicationWithAddressTemplate(null);
                templates[71] = AfdDataIndicationTemplate(null);
                templates[72] = AfdDataIndicationWithAddressTemplate(null);
                templates[73] = AfdDisconnectTemplate(null);
                templates[74] = AfdSendBackLogTemplate(null);
                templates[75] = AfdRioCreateRegistrationDomainTemplate(null);
                templates[76] = AfdRioCleanupRegistrationDomainTemplate(null);
                templates[77] = AfdRioCreateCqTemplate(null);
                templates[78] = AfdRioDestroyCqTemplate(null);
                templates[79] = AfdRioCleanupCqTemplate(null);
                templates[80] = AfdRioResizeCqTemplate(null);
                templates[81] = AfdRioCreateRqPairTemplate(null);
                templates[82] = AfdRioCloseRioStateTemplate(null);
                templates[83] = AfdRioCleanupRioStateTemplate(null);
                templates[84] = AfdRioResizeRqPairTemplate(null);
                templates[85] = AfdRioRegisterBufferTemplate(null);
                templates[86] = AfdRioDeregisterBufferTemplate(null);
                templates[87] = AfdRioCleanupBufferTemplate(null);
                templates[88] = AfdRioValidateBufferIdTemplate(null);
                templates[89] = AfdRioRangeCheckTemplate(null);
                templates[90] = AfdRioSendReceiveTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }

    public sealed class AfdAbortAbortedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int Reason { get { return GetInt32At(HostOffset(16, 2)); } }

        #region Private
        internal AfdAbortAbortedArgs(Action<AfdAbortAbortedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdAbortAbortedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdAbortAbortedArgs> m_target;
        #endregion
    }
    public sealed class AfdCloseClosedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int Status { get { return GetInt32At(HostOffset(16, 2)); } }

        #region Private
        internal AfdCloseClosedArgs(Action<AfdCloseClosedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdCloseClosedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdCloseClosedArgs> m_target;
        #endregion
    }
    public sealed class AfdAcceptWithAddressConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int Status { get { return GetInt32At(HostOffset(24, 3)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(28, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(32, 3), AddressLen); } }
        public Address AcceptEndpoint { get { return GetAddressAt(HostOffset(0 + (AddressLen * 1) + 32, 3)); } }
        public int CurrentBacklog { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 36, 4)); } }

        #region Private
        internal AfdAcceptWithAddressConnectedArgs(Action<AfdAcceptWithAddressConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 40, 4)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 40, 4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdAcceptWithAddressConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            XmlAttribHex(sb, "AcceptEndpoint", AcceptEndpoint);
            XmlAttrib(sb, "CurrentBacklog", CurrentBacklog);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Buffer", "BufferLength", "Status", "AddressLen", "Address", "AcceptEndpoint", "CurrentBacklog" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return Status;
                case 7:
                    return AddressLen;
                case 8:
                    return AcceptEndpoint;
                case 9:
                    return CurrentBacklog;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdAcceptWithAddressConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdBindWithAddressConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int Status { get { return GetInt32At(HostOffset(16, 2)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(20, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(24, 2), AddressLen); } }

        #region Private
        internal AfdBindWithAddressConnectedArgs(Action<AfdBindWithAddressConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 24, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 24, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdBindWithAddressConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Status", "AddressLen", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Status;
                case 5:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdBindWithAddressConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdConnectWithAddressConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int Status { get { return GetInt32At(HostOffset(24, 3)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(28, 3)); }}

        #region Private
        internal AfdConnectWithAddressConnectedArgs(Action<AfdConnectWithAddressConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 32, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 32, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdConnectWithAddressConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Buffer", "BufferLength", "Status", "AddressLen", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return Status;
                case 7:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdConnectWithAddressConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdConnectIndicationWithAddressArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int Status { get { return GetInt32At(HostOffset(16, 2)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(20, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(24, 2), AddressLen); } }
        public int CurrentBacklog { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 24, 2)); } }

        #region Private
        internal AfdConnectIndicationWithAddressArgs(Action<AfdConnectIndicationWithAddressArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 28, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 28, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdConnectIndicationWithAddressArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            XmlAttrib(sb, "CurrentBacklog", CurrentBacklog);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Status", "AddressLen", "Address", "CurrentBacklog" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Status;
                case 5:
                    return AddressLen;
                case 6:
                    return CurrentBacklog;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdConnectIndicationWithAddressArgs> m_target;
        #endregion
    }
    public sealed class AfdCreateOpenArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int AddressFamily { get { return GetInt32At(HostOffset(16, 2)); } }
        public int SocketType { get { return GetInt32At(HostOffset(20, 2)); } }
        public int Protocol { get { return GetInt32At(HostOffset(24, 2)); } }
        public Address ProcessId { get { return GetAddressAt(HostOffset(28, 2)); } }
        public int Status { get { return GetInt32At(HostOffset(32, 3)); } }

        #region Private
        internal AfdCreateOpenArgs(Action<AfdCreateOpenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(36, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(36, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdCreateOpenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "AddressFamily", AddressFamily);
            XmlAttrib(sb, "SocketType", SocketType);
            XmlAttrib(sb, "Protocol", Protocol);
            XmlAttribHex(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "AddressFamily", "SocketType", "Protocol", "ProcessId", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return AddressFamily;
                case 5:
                    return SocketType;
                case 6:
                    return Protocol;
                case 7:
                    return ProcessId;
                case 8:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdCreateOpenArgs> m_target;
        #endregion
    }
    public sealed class AfdDatagramDropWithAddressConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(24, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(28, 3), AddressLen); } }
        public AFD_DGRAM_DROP Reason { get { return (AFD_DGRAM_DROP)GetInt32At(HostOffset(0 + (AddressLen * 1) + 28, 3)); } }

        #region Private
        internal AfdDatagramDropWithAddressConnectedArgs(Action<AfdDatagramDropWithAddressConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 32, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 32, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdDatagramDropWithAddressConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "AddressLen", AddressLen);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Buffer", "BufferLength", "AddressLen", "Address", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return AddressLen;
                case 7:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdDatagramDropWithAddressConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdDataIndicationArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }

        #region Private
        internal AfdDataIndicationArgs(Action<AfdDataIndicationArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdDataIndicationArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Buffer", "BufferLength" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdDataIndicationArgs> m_target;
        #endregion
    }
    public sealed class AfdDataIndicationWithAddressArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(24, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(28, 3), AddressLen); } }

        #region Private
        internal AfdDataIndicationWithAddressArgs(Action<AfdDataIndicationWithAddressArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 28, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 28, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdDataIndicationWithAddressArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Buffer", "BufferLength", "AddressLen", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdDataIndicationWithAddressArgs> m_target;
        #endregion
    }
    public sealed class AfdListenArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int Backlog { get { return GetInt32At(HostOffset(16, 2)); } }
        public int Status { get { return GetInt32At(HostOffset(20, 2)); } }

        #region Private
        internal AfdListenArgs(Action<AfdListenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdListenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Backlog", Backlog);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Backlog", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Backlog;
                case 5:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdListenArgs> m_target;
        #endregion
    }
    public sealed class AfdOptionArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public AFD_OPTION Option { get { return (AFD_OPTION)GetInt32At(HostOffset(16, 2)); } }
        public int Value { get { return GetInt32At(HostOffset(20, 2)); } }
        public int Status { get { return GetInt32At(HostOffset(24, 2)); } }

        #region Private
        internal AfdOptionArgs(Action<AfdOptionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(28, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(28, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdOptionArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Option", Option);
            XmlAttrib(sb, "Value", Value);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "Option", "Value", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return Option;
                case 5:
                    return Value;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdOptionArgs> m_target;
        #endregion
    }
    public sealed class AfdSendConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int BufferCount { get { return GetInt32At(HostOffset(16, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(20, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(24, 3)); } }
        public int Status { get { return GetInt32At(HostOffset(28, 3)); } }

        #region Private
        internal AfdSendConnectedArgs(Action<AfdSendConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(32, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(32, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdSendConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "BufferCount", "Buffer", "BufferLength", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return BufferCount;
                case 5:
                    return Buffer;
                case 6:
                    return BufferLength;
                case 7:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdSendConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdSendToWithAddressConnectedArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int BufferCount { get { return GetInt32At(HostOffset(16, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(20, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(24, 3)); } }
        public int Status { get { return GetInt32At(HostOffset(28, 3)); } }
        public int AddressLen { get { return GetInt32At(HostOffset(32, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(36, 3), AddressLen); } }

        #region Private
        internal AfdSendToWithAddressConnectedArgs(Action<AfdSendToWithAddressConnectedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 36, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 36, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdSendToWithAddressConnectedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "BufferCount", "Buffer", "BufferLength", "Status", "AddressLen", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return BufferCount;
                case 5:
                    return Buffer;
                case 6:
                    return BufferLength;
                case 7:
                    return Status;
                case 8:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdSendToWithAddressConnectedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCleanupBufferFreedArgs : TraceEvent
    {
        public Address Buffer { get { return GetAddressAt(0); } }

        #region Private
        internal AfdRioCleanupBufferFreedArgs(Action<AfdRioCleanupBufferFreedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCleanupBufferFreedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Buffer", Buffer);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Buffer" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCleanupBufferFreedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCleanupCqFreedArgs : TraceEvent
    {
        public Address Cq { get { return GetAddressAt(0); } }

        #region Private
        internal AfdRioCleanupCqFreedArgs(Action<AfdRioCleanupCqFreedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCleanupCqFreedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Cq", Cq);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Cq" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Cq;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCleanupCqFreedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCleanupRegistrationDomainClosedArgs : TraceEvent
    {
        public Address RegistrationDomain { get { return GetAddressAt(0); } }

        #region Private
        internal AfdRioCleanupRegistrationDomainClosedArgs(Action<AfdRioCleanupRegistrationDomainClosedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCleanupRegistrationDomainClosedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RegistrationDomain" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RegistrationDomain;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCleanupRegistrationDomainClosedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCleanupRioStateFreedArgs : TraceEvent
    {
        public Address RioState { get { return GetAddressAt(0); } }

        #region Private
        internal AfdRioCleanupRioStateFreedArgs(Action<AfdRioCleanupRioStateFreedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCleanupRioStateFreedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RioState", RioState);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RioState" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RioState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCleanupRioStateFreedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCloseRioStateClosedArgs : TraceEvent
    {
        public Address RioState { get { return GetAddressAt(0); } }
        public int ReceiveQueueStart { get { return GetInt32At(HostOffset(4, 1)); } }
        public int ReceiveQueueEnd { get { return GetInt32At(HostOffset(8, 1)); } }
        public int SendQueueStart { get { return GetInt32At(HostOffset(12, 1)); } }
        public int SendQueueEnd { get { return GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal AfdRioCloseRioStateClosedArgs(Action<AfdRioCloseRioStateClosedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCloseRioStateClosedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttrib(sb, "ReceiveQueueStart", ReceiveQueueStart);
            XmlAttrib(sb, "ReceiveQueueEnd", ReceiveQueueEnd);
            XmlAttrib(sb, "SendQueueStart", SendQueueStart);
            XmlAttrib(sb, "SendQueueEnd", SendQueueEnd);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RioState", "ReceiveQueueStart", "ReceiveQueueEnd", "SendQueueStart", "SendQueueEnd" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RioState;
                case 1:
                    return ReceiveQueueStart;
                case 2:
                    return ReceiveQueueEnd;
                case 3:
                    return SendQueueStart;
                case 4:
                    return SendQueueEnd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCloseRioStateClosedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCreateCqOpenArgs : TraceEvent
    {
        public Address Cq { get { return GetAddressAt(0); } }
        public Address RegistrationDomain { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int EntryCount { get { return GetInt32At(HostOffset(8, 2)); } }
        public Address UserAddress { get { return GetAddressAt(HostOffset(12, 2)); } }
        public Address SystemAddress { get { return GetAddressAt(HostOffset(16, 3)); } }
        public int BufferSize { get { return GetInt32At(HostOffset(20, 4)); } }
        public int CqIndex { get { return GetInt32At(HostOffset(24, 4)); } }
        public RIO_NOTIFICATION_TYPE NotificationType { get { return (RIO_NOTIFICATION_TYPE)GetInt32At(HostOffset(28, 4)); } }
        public Address NotificationHandle { get { return GetAddressAt(HostOffset(32, 4)); } }
        public Address NotificationObject { get { return GetAddressAt(HostOffset(36, 5)); } }
        public Address NotificationContext1 { get { return GetAddressAt(HostOffset(40, 6)); } }
        public Address NotificationContext2 { get { return GetAddressAt(HostOffset(44, 7)); } }
        public int Status { get { return GetInt32At(HostOffset(48, 8)); } }

        #region Private
        internal AfdRioCreateCqOpenArgs(Action<AfdRioCreateCqOpenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(52, 8)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(52, 8)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCreateCqOpenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Cq", Cq);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttrib(sb, "EntryCount", EntryCount);
            XmlAttribHex(sb, "UserAddress", UserAddress);
            XmlAttribHex(sb, "SystemAddress", SystemAddress);
            XmlAttrib(sb, "BufferSize", BufferSize);
            XmlAttrib(sb, "CqIndex", CqIndex);
            XmlAttrib(sb, "NotificationType", NotificationType);
            XmlAttribHex(sb, "NotificationHandle", NotificationHandle);
            XmlAttribHex(sb, "NotificationObject", NotificationObject);
            XmlAttribHex(sb, "NotificationContext1", NotificationContext1);
            XmlAttribHex(sb, "NotificationContext2", NotificationContext2);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Cq", "RegistrationDomain", "EntryCount", "UserAddress", "SystemAddress", "BufferSize", "CqIndex", "NotificationType", "NotificationHandle", "NotificationObject", "NotificationContext1", "NotificationContext2", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Cq;
                case 1:
                    return RegistrationDomain;
                case 2:
                    return EntryCount;
                case 3:
                    return UserAddress;
                case 4:
                    return SystemAddress;
                case 5:
                    return BufferSize;
                case 6:
                    return CqIndex;
                case 7:
                    return NotificationType;
                case 8:
                    return NotificationHandle;
                case 9:
                    return NotificationObject;
                case 10:
                    return NotificationContext1;
                case 11:
                    return NotificationContext2;
                case 12:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCreateCqOpenArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCreateRegistrationDomainOpenArgs : TraceEvent
    {
        public Address RegistrationDomain { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal AfdRioCreateRegistrationDomainOpenArgs(Action<AfdRioCreateRegistrationDomainOpenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCreateRegistrationDomainOpenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RegistrationDomain", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RegistrationDomain;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCreateRegistrationDomainOpenArgs> m_target;
        #endregion
    }
    public sealed class AfdRioCreateRqPairOpenArgs : TraceEvent
    {
        public Address Endpoint { get { return GetAddressAt(0); } }
        public Address RioState { get { return GetAddressAt(HostOffset(4, 1)); } }
        public Address RegistrationDomain { get { return GetAddressAt(HostOffset(8, 2)); } }
        public int SendEntryCount { get { return GetInt32At(HostOffset(12, 3)); } }
        public Address SendUserAddress { get { return GetAddressAt(HostOffset(16, 3)); } }
        public Address SendSystemAddress { get { return GetAddressAt(HostOffset(20, 4)); } }
        public int SendBufferSize { get { return GetInt32At(HostOffset(24, 5)); } }
        public int ReceiveEntryCount { get { return GetInt32At(HostOffset(28, 5)); } }
        public Address ReceiveUserAddress { get { return GetAddressAt(HostOffset(32, 5)); } }
        public Address ReceiveSystemAddress { get { return GetAddressAt(HostOffset(36, 6)); } }
        public int ReceiveBufferSize { get { return GetInt32At(HostOffset(40, 7)); } }
        public int SendCqIndex { get { return GetInt32At(HostOffset(44, 7)); } }
        public int ReceiveCqIndex { get { return GetInt32At(HostOffset(48, 7)); } }
        public int Status { get { return GetInt32At(HostOffset(52, 7)); } }

        #region Private
        internal AfdRioCreateRqPairOpenArgs(Action<AfdRioCreateRqPairOpenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(56, 7)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(56, 7)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioCreateRqPairOpenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttrib(sb, "SendEntryCount", SendEntryCount);
            XmlAttribHex(sb, "SendUserAddress", SendUserAddress);
            XmlAttribHex(sb, "SendSystemAddress", SendSystemAddress);
            XmlAttrib(sb, "SendBufferSize", SendBufferSize);
            XmlAttrib(sb, "ReceiveEntryCount", ReceiveEntryCount);
            XmlAttribHex(sb, "ReceiveUserAddress", ReceiveUserAddress);
            XmlAttribHex(sb, "ReceiveSystemAddress", ReceiveSystemAddress);
            XmlAttrib(sb, "ReceiveBufferSize", ReceiveBufferSize);
            XmlAttrib(sb, "SendCqIndex", SendCqIndex);
            XmlAttrib(sb, "ReceiveCqIndex", ReceiveCqIndex);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Endpoint", "RioState", "RegistrationDomain", "SendEntryCount", "SendUserAddress", "SendSystemAddress", "SendBufferSize", "ReceiveEntryCount", "ReceiveUserAddress", "ReceiveSystemAddress", "ReceiveBufferSize", "SendCqIndex", "ReceiveCqIndex", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Endpoint;
                case 1:
                    return RioState;
                case 2:
                    return RegistrationDomain;
                case 3:
                    return SendEntryCount;
                case 4:
                    return SendUserAddress;
                case 5:
                    return SendSystemAddress;
                case 6:
                    return SendBufferSize;
                case 7:
                    return ReceiveEntryCount;
                case 8:
                    return ReceiveUserAddress;
                case 9:
                    return ReceiveSystemAddress;
                case 10:
                    return ReceiveBufferSize;
                case 11:
                    return SendCqIndex;
                case 12:
                    return ReceiveCqIndex;
                case 13:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioCreateRqPairOpenArgs> m_target;
        #endregion
    }
    public sealed class AfdRioDeregisterBufferClosedArgs : TraceEvent
    {
        public Address Buffer { get { return GetAddressAt(0); } }
        public int References { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal AfdRioDeregisterBufferClosedArgs(Action<AfdRioDeregisterBufferClosedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioDeregisterBufferClosedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "References", References);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Buffer", "References" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Buffer;
                case 1:
                    return References;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioDeregisterBufferClosedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioDestroyCqClosedArgs : TraceEvent
    {
        public Address Cq { get { return GetAddressAt(0); } }
        public int Commit { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal AfdRioDestroyCqClosedArgs(Action<AfdRioDestroyCqClosedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioDestroyCqClosedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Cq", Cq);
            XmlAttrib(sb, "Commit", Commit);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Cq", "Commit" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Cq;
                case 1:
                    return Commit;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioDestroyCqClosedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioRangeCheckArgs : TraceEvent
    {
        public Address RegistrationDomain { get { return GetAddressAt(0); } }
        public Address RioState { get { return GetAddressAt(HostOffset(4, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(8, 2)); } }
        public int BufferOffset { get { return GetInt32At(HostOffset(12, 3)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(16, 3)); } }

        #region Private
        internal AfdRioRangeCheckArgs(Action<AfdRioRangeCheckArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioRangeCheckArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferOffset", BufferOffset);
            XmlAttrib(sb, "BufferLength", BufferLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RegistrationDomain", "RioState", "Buffer", "BufferOffset", "BufferLength" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RegistrationDomain;
                case 1:
                    return RioState;
                case 2:
                    return Buffer;
                case 3:
                    return BufferOffset;
                case 4:
                    return BufferLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioRangeCheckArgs> m_target;
        #endregion
    }
    public sealed class AfdRioRegisterBufferOpenArgs : TraceEvent
    {
        public Address Buffer { get { return GetAddressAt(0); } }
        public Address RegistrationDomain { get { return GetAddressAt(HostOffset(4, 1)); } }
        public Address UserAddress { get { return GetAddressAt(HostOffset(8, 2)); } }
        public Address SystemAddress { get { return GetAddressAt(HostOffset(12, 3)); } }
        public int BufferSize { get { return GetInt32At(HostOffset(16, 4)); } }
        public int BufferId { get { return GetInt32At(HostOffset(20, 4)); } }
        public int Status { get { return GetInt32At(HostOffset(24, 4)); } }

        #region Private
        internal AfdRioRegisterBufferOpenArgs(Action<AfdRioRegisterBufferOpenArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(28, 4)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(28, 4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioRegisterBufferOpenArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttribHex(sb, "UserAddress", UserAddress);
            XmlAttribHex(sb, "SystemAddress", SystemAddress);
            XmlAttrib(sb, "BufferSize", BufferSize);
            XmlAttrib(sb, "BufferId", BufferId);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Buffer", "RegistrationDomain", "UserAddress", "SystemAddress", "BufferSize", "BufferId", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Buffer;
                case 1:
                    return RegistrationDomain;
                case 2:
                    return UserAddress;
                case 3:
                    return SystemAddress;
                case 4:
                    return BufferSize;
                case 5:
                    return BufferId;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioRegisterBufferOpenArgs> m_target;
        #endregion
    }
    public sealed class AfdRioResizeCqModifiedArgs : TraceEvent
    {
        public Address Cq { get { return GetAddressAt(0); } }
        public int OriginalEntryCount { get { return GetInt32At(HostOffset(4, 1)); } }
        public int OriginalStart { get { return GetInt32At(HostOffset(8, 1)); } }
        public int OriginalEnd { get { return GetInt32At(HostOffset(12, 1)); } }
        public int Commit { get { return GetInt32At(HostOffset(16, 1)); } }
        public int RequestedEntryCount { get { return GetInt32At(HostOffset(20, 1)); } }
        public Address UserAddress { get { return GetAddressAt(HostOffset(24, 1)); } }
        public Address SystemAddress { get { return GetAddressAt(HostOffset(28, 2)); } }
        public int BufferSize { get { return GetInt32At(HostOffset(32, 3)); } }
        public int Status { get { return GetInt32At(HostOffset(36, 3)); } }

        #region Private
        internal AfdRioResizeCqModifiedArgs(Action<AfdRioResizeCqModifiedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(40, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(40, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioResizeCqModifiedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Cq", Cq);
            XmlAttrib(sb, "OriginalEntryCount", OriginalEntryCount);
            XmlAttrib(sb, "OriginalStart", OriginalStart);
            XmlAttrib(sb, "OriginalEnd", OriginalEnd);
            XmlAttrib(sb, "Commit", Commit);
            XmlAttrib(sb, "RequestedEntryCount", RequestedEntryCount);
            XmlAttribHex(sb, "UserAddress", UserAddress);
            XmlAttribHex(sb, "SystemAddress", SystemAddress);
            XmlAttrib(sb, "BufferSize", BufferSize);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Cq", "OriginalEntryCount", "OriginalStart", "OriginalEnd", "Commit", "RequestedEntryCount", "UserAddress", "SystemAddress", "BufferSize", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Cq;
                case 1:
                    return OriginalEntryCount;
                case 2:
                    return OriginalStart;
                case 3:
                    return OriginalEnd;
                case 4:
                    return Commit;
                case 5:
                    return RequestedEntryCount;
                case 6:
                    return UserAddress;
                case 7:
                    return SystemAddress;
                case 8:
                    return BufferSize;
                case 9:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioResizeCqModifiedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioResizeRqPairModifiedArgs : TraceEvent
    {
        public Address RioState { get { return GetAddressAt(0); } }
        public int OriginalSendEntryCount { get { return GetInt32At(HostOffset(4, 1)); } }
        public int OriginalSendQueueStart { get { return GetInt32At(HostOffset(8, 1)); } }
        public int OriginalSendQueueEnd { get { return GetInt32At(HostOffset(12, 1)); } }
        public int RequestedSendEntryCount { get { return GetInt32At(HostOffset(16, 1)); } }
        public Address SendUserAddress { get { return GetAddressAt(HostOffset(20, 1)); } }
        public Address SendSystemAddress { get { return GetAddressAt(HostOffset(24, 2)); } }
        public int SendBufferSize { get { return GetInt32At(HostOffset(28, 3)); } }
        public int OriginalReceiveEntryCount { get { return GetInt32At(HostOffset(32, 3)); } }
        public int OriginalReceiveQueueStart { get { return GetInt32At(HostOffset(36, 3)); } }
        public int OriginalReceiveQueueEnd { get { return GetInt32At(HostOffset(40, 3)); } }
        public int RequestedReceiveEntryCount { get { return GetInt32At(HostOffset(44, 3)); } }
        public Address ReceiveUserAddress { get { return GetAddressAt(HostOffset(48, 3)); } }
        public Address ReceiveSystemAddress { get { return GetAddressAt(HostOffset(52, 4)); } }
        public int ReceiveBufferSize { get { return GetInt32At(HostOffset(56, 5)); } }
        public int Status { get { return GetInt32At(HostOffset(60, 5)); } }

        #region Private
        internal AfdRioResizeRqPairModifiedArgs(Action<AfdRioResizeRqPairModifiedArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(64, 5)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(64, 5)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioResizeRqPairModifiedArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttrib(sb, "OriginalSendEntryCount", OriginalSendEntryCount);
            XmlAttrib(sb, "OriginalSendQueueStart", OriginalSendQueueStart);
            XmlAttrib(sb, "OriginalSendQueueEnd", OriginalSendQueueEnd);
            XmlAttrib(sb, "RequestedSendEntryCount", RequestedSendEntryCount);
            XmlAttribHex(sb, "SendUserAddress", SendUserAddress);
            XmlAttribHex(sb, "SendSystemAddress", SendSystemAddress);
            XmlAttrib(sb, "SendBufferSize", SendBufferSize);
            XmlAttrib(sb, "OriginalReceiveEntryCount", OriginalReceiveEntryCount);
            XmlAttrib(sb, "OriginalReceiveQueueStart", OriginalReceiveQueueStart);
            XmlAttrib(sb, "OriginalReceiveQueueEnd", OriginalReceiveQueueEnd);
            XmlAttrib(sb, "RequestedReceiveEntryCount", RequestedReceiveEntryCount);
            XmlAttribHex(sb, "ReceiveUserAddress", ReceiveUserAddress);
            XmlAttribHex(sb, "ReceiveSystemAddress", ReceiveSystemAddress);
            XmlAttrib(sb, "ReceiveBufferSize", ReceiveBufferSize);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RioState", "OriginalSendEntryCount", "OriginalSendQueueStart", "OriginalSendQueueEnd", "RequestedSendEntryCount", "SendUserAddress", "SendSystemAddress", "SendBufferSize", "OriginalReceiveEntryCount", "OriginalReceiveQueueStart", "OriginalReceiveQueueEnd", "RequestedReceiveEntryCount", "ReceiveUserAddress", "ReceiveSystemAddress", "ReceiveBufferSize", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RioState;
                case 1:
                    return OriginalSendEntryCount;
                case 2:
                    return OriginalSendQueueStart;
                case 3:
                    return OriginalSendQueueEnd;
                case 4:
                    return RequestedSendEntryCount;
                case 5:
                    return SendUserAddress;
                case 6:
                    return SendSystemAddress;
                case 7:
                    return SendBufferSize;
                case 8:
                    return OriginalReceiveEntryCount;
                case 9:
                    return OriginalReceiveQueueStart;
                case 10:
                    return OriginalReceiveQueueEnd;
                case 11:
                    return RequestedReceiveEntryCount;
                case 12:
                    return ReceiveUserAddress;
                case 13:
                    return ReceiveSystemAddress;
                case 14:
                    return ReceiveBufferSize;
                case 15:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioResizeRqPairModifiedArgs> m_target;
        #endregion
    }
    public sealed class AfdRioSendReceiveArgs : TraceEvent
    {
        public Address RioState { get { return GetAddressAt(0); } }
        public int BufferType { get { return GetInt32At(HostOffset(4, 1)); } }
        public int SpecifiedLength { get { return GetInt32At(HostOffset(8, 1)); } }
        public int RequiredLength { get { return GetInt32At(HostOffset(12, 1)); } }

        #region Private
        internal AfdRioSendReceiveArgs(Action<AfdRioSendReceiveArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioSendReceiveArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttrib(sb, "BufferType", BufferType);
            XmlAttrib(sb, "SpecifiedLength", SpecifiedLength);
            XmlAttrib(sb, "RequiredLength", RequiredLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RioState", "BufferType", "SpecifiedLength", "RequiredLength" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RioState;
                case 1:
                    return BufferType;
                case 2:
                    return SpecifiedLength;
                case 3:
                    return RequiredLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioSendReceiveArgs> m_target;
        #endregion
    }
    public sealed class AfdRioValidateBufferIdArgs : TraceEvent
    {
        public Address RegistrationDomain { get { return GetAddressAt(0); } }
        public Address RioState { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int BufferId { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal AfdRioValidateBufferIdArgs(Action<AfdRioValidateBufferIdArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdRioValidateBufferIdArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "RegistrationDomain", RegistrationDomain);
            XmlAttribHex(sb, "RioState", RioState);
            XmlAttrib(sb, "BufferId", BufferId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RegistrationDomain", "RioState", "BufferId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RegistrationDomain;
                case 1:
                    return RioState;
                case 2:
                    return BufferId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdRioValidateBufferIdArgs> m_target;
        #endregion
    }
    public sealed class AfdSendBackLogArgs : TraceEvent
    {
        public int EnterExit { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public Address Process { get { return GetAddressAt(8); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(12, 1)); } }
        public int SendBacklog { get { return GetInt32At(HostOffset(16, 2)); } }

        #region Private
        internal AfdSendBackLogArgs(Action<AfdSendBackLogArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AfdSendBackLogArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "EnterExit", EnterExit);
            XmlAttrib(sb, "Location", Location);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "SendBacklog", SendBacklog);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnterExit", "Location", "Process", "Endpoint", "SendBacklog" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnterExit;
                case 1:
                    return Location;
                case 2:
                    return Process;
                case 3:
                    return Endpoint;
                case 4:
                    return SendBacklog;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AfdSendBackLogArgs> m_target;
        #endregion
    }
    public sealed class task_0Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int AddressFamily { get { return GetInt32At(HostOffset(8, 2)); } }
        public WINSOCK_SocketType SocketType { get { return (WINSOCK_SocketType)GetInt32At(HostOffset(12, 2)); } }
        public int Protocol { get { return GetInt32At(HostOffset(16, 2)); } }
        public Address UserModePid { get { return GetAddressAt(HostOffset(20, 2)); } }

        #region Private
        internal task_0Args(Action<task_0Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_0Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "AddressFamily", AddressFamily);
            XmlAttrib(sb, "SocketType", SocketType);
            XmlAttrib(sb, "Protocol", Protocol);
            XmlAttribHex(sb, "UserModePid", UserModePid);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "AddressFamily", "SocketType", "Protocol", "UserModePid" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return AddressFamily;
                case 3:
                    return SocketType;
                case 4:
                    return Protocol;
                case 5:
                    return UserModePid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_0Args> m_target;
        #endregion
    }
    public sealed class task_06Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Error { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal task_06Args(Action<task_06Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_06Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Error", Error);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Error" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Error;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_06Args> m_target;
        #endregion
    }
    public sealed class task_02Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Address { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(12, 2)); } }
        public int Status { get { return GetInt32At(HostOffset(14, 2)); } }

        #region Private
        internal task_02Args(Action<task_02Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(18, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(18, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_02Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "Status", Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Address", "Port", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Address;
                case 3:
                    return Port;
                case 4:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_02Args> m_target;
        #endregion
    }
    public sealed class task_03Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Port { get { return GetInt16At(HostOffset(8, 2)); } }
        public int Status { get { return GetInt32At(HostOffset(10, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(14, 2), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 14, 2)); } }

        #region Private
        internal task_03Args(Action<task_03Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 18, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 18, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_03Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Port", "Status", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Port;
                case 3:
                    return Status;
                case 4:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_03Args> m_target;
        #endregion
    }
    public sealed class task_018Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public bool FastPath { get { return GetInt32At(HostOffset(8, 2)) != 0; } }
        public int BufferCount { get { return GetInt32At(HostOffset(12, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }

        #region Private
        internal task_018Args(Action<task_018Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_018Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "FastPath", FastPath);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "FastPath", "BufferCount", "Buffer", "BufferLength" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return FastPath;
                case 3:
                    return BufferCount;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_018Args> m_target;
        #endregion
    }
    public sealed class task_021Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public bool FastPath { get { return GetInt32At(HostOffset(8, 2)) != 0; } }
        public int BufferCount { get { return GetInt32At(HostOffset(12, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int Address { get { return GetInt32At(HostOffset(24, 3)); } }
        public int Port { get { return GetInt16At(HostOffset(28, 3)); } }

        #region Private
        internal task_021Args(Action<task_021Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(30, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(30, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_021Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "FastPath", FastPath);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "FastPath", "BufferCount", "Buffer", "BufferLength", "Address", "Port" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return FastPath;
                case 3:
                    return BufferCount;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return Address;
                case 7:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_021Args> m_target;
        #endregion
    }
    public sealed class task_022Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public bool FastPath { get { return GetInt32At(HostOffset(8, 2)) != 0; } }
        public int BufferCount { get { return GetInt32At(HostOffset(12, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(16, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(20, 3)); } }
        public int Port { get { return GetInt16At(HostOffset(24, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(26, 3), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 26, 3)); } }

        #region Private
        internal task_022Args(Action<task_022Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 30, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 30, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_022Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "FastPath", FastPath);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "FastPath", "BufferCount", "Buffer", "BufferLength", "Port", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return FastPath;
                case 3:
                    return BufferCount;
                case 4:
                    return Buffer;
                case 5:
                    return BufferLength;
                case 6:
                    return Port;
                case 7:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_022Args> m_target;
        #endregion
    }
    public sealed class task_023Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(8, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(12, 3)); } }

        #region Private
        internal task_023Args(Action<task_023Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_023Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Buffer", "BufferLength" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Buffer;
                case 3:
                    return BufferLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_023Args> m_target;
        #endregion
    }
    public sealed class task_026Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int BufferCount { get { return GetInt32At(HostOffset(8, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(12, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(16, 3)); } }
        public int Address { get { return GetInt32At(HostOffset(20, 3)); } }
        public int Port { get { return GetInt16At(HostOffset(24, 3)); } }

        #region Private
        internal task_026Args(Action<task_026Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(26, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(26, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_026Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "BufferCount", "Buffer", "BufferLength", "Address", "Port" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return BufferCount;
                case 3:
                    return Buffer;
                case 4:
                    return BufferLength;
                case 5:
                    return Address;
                case 6:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_026Args> m_target;
        #endregion
    }
    public sealed class task_027Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int BufferCount { get { return GetInt32At(HostOffset(8, 2)); } }
        public Address Buffer { get { return GetAddressAt(HostOffset(12, 2)); } }
        public int BufferLength { get { return GetInt32At(HostOffset(16, 3)); } }
        public int Port { get { return GetInt16At(HostOffset(20, 3)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(22, 3), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 22, 3)); } }

        #region Private
        internal task_027Args(Action<task_027Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 26, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 26, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_027Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "BufferCount", BufferCount);
            XmlAttribHex(sb, "Buffer", Buffer);
            XmlAttrib(sb, "BufferLength", BufferLength);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "BufferCount", "Buffer", "BufferLength", "Port", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return BufferCount;
                case 3:
                    return Buffer;
                case 4:
                    return BufferLength;
                case 5:
                    return Port;
                case 6:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_027Args> m_target;
        #endregion
    }
    public sealed class task_029Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Option { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Value { get { return GetInt32At(HostOffset(12, 2)); } }

        #region Private
        internal task_029Args(Action<task_029Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_029Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Option", Option);
            XmlAttrib(sb, "Value", Value);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Option", "Value" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Option;
                case 3:
                    return Value;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_029Args> m_target;
        #endregion
    }
    public sealed class task_030Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public int HandleCount { get { return GetInt32At(HostOffset(4, 1)); } }
        public int Timeout { get { return GetInt32At(HostOffset(8, 1)); } }

        #region Private
        internal task_030Args(Action<task_030Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_030Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttrib(sb, "HandleCount", HandleCount);
            XmlAttrib(sb, "Timeout", Timeout);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "HandleCount", "Timeout" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return HandleCount;
                case 2:
                    return Timeout;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_030Args> m_target;
        #endregion
    }
    public sealed class task_032Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int EventMask { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal task_032Args(Action<task_032Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_032Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "EventMask", EventMask);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "EventMask" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return EventMask;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_032Args> m_target;
        #endregion
    }
    public sealed class task_033Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int PacketSize { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Address { get { return GetInt32At(HostOffset(12, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(16, 2)); } }
        public int Reason { get { return GetInt32At(HostOffset(18, 2)); } }

        #region Private
        internal task_033Args(Action<task_033Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(22, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(22, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_033Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "PacketSize", PacketSize);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "PacketSize", "Address", "Port", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return PacketSize;
                case 3:
                    return Address;
                case 4:
                    return Port;
                case 5:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_033Args> m_target;
        #endregion
    }
    public sealed class task_034Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int PacketSize { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(12, 2)); } }
        public int Reason { get { return GetInt32At(HostOffset(14, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(18, 2), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 18, 2)); } }

        #region Private
        internal task_034Args(Action<task_034Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 22, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 22, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_034Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "PacketSize", PacketSize);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "Reason", Reason);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "PacketSize", "Port", "Reason", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return PacketSize;
                case 3:
                    return Port;
                case 4:
                    return Reason;
                case 5:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_034Args> m_target;
        #endregion
    }
    public sealed class task_035Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address ListenEndpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Address { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(12, 2)); } }

        #region Private
        internal task_035Args(Action<task_035Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(14, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(14, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_035Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "ListenEndpoint", ListenEndpoint);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "ListenEndpoint", "Address", "Port" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return ListenEndpoint;
                case 2:
                    return Address;
                case 3:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_035Args> m_target;
        #endregion
    }
    public sealed class task_036Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address ListenEndpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Port { get { return GetInt16At(HostOffset(8, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(10, 2), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 10, 2)); } }

        #region Private
        internal task_036Args(Action<task_036Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 14, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 14, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_036Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "ListenEndpoint", ListenEndpoint);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "ListenEndpoint", "Port", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return ListenEndpoint;
                case 2:
                    return Port;
                case 3:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_036Args> m_target;
        #endregion
    }
    public sealed class task_037Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int BytesIndicated { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal task_037Args(Action<task_037Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_037Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "BytesIndicated", BytesIndicated);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "BytesIndicated" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return BytesIndicated;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_037Args> m_target;
        #endregion
    }
    public sealed class task_038Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Address { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(12, 2)); } }
        public int BytesIndicated { get { return GetInt32At(HostOffset(14, 2)); } }

        #region Private
        internal task_038Args(Action<task_038Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(18, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(18, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_038Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "BytesIndicated", BytesIndicated);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Address", "Port", "BytesIndicated" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Address;
                case 3:
                    return Port;
                case 4:
                    return BytesIndicated;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_038Args> m_target;
        #endregion
    }
    public sealed class task_039Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Port { get { return GetInt16At(HostOffset(8, 2)); } }
        public int BytesIndicated { get { return GetInt32At(HostOffset(10, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(14, 2), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 14, 2)); } }

        #region Private
        internal task_039Args(Action<task_039Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 18, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 18, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_039Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "BytesIndicated", BytesIndicated);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Port", "BytesIndicated", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Port;
                case 3:
                    return BytesIndicated;
                case 4:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_039Args> m_target;
        #endregion
    }
    public sealed class task_04Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Address { get { return GetInt32At(HostOffset(8, 2)); } }
        public int Port { get { return GetInt16At(HostOffset(12, 2)); } }

        #region Private
        internal task_04Args(Action<task_04Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(14, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(14, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_04Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Address", Address);
            XmlAttrib(sb, "Port", Port);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Address", "Port" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Address;
                case 3:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_04Args> m_target;
        #endregion
    }
    public sealed class task_041Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }

        #region Private
        internal task_041Args(Action<task_041Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_041Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_041Args> m_target;
        #endregion
    }
    public sealed class task_05Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Port { get { return GetInt16At(HostOffset(8, 2)); } }
        public byte[] Address { get { return GetByteArrayAt(HostOffset(10, 2), AddressLen); } }
        public int AddressLen { get { return GetInt32At(HostOffset(0 + (AddressLen * 1) + 10, 2)); } }

        #region Private
        internal task_05Args(Action<task_05Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0 + (AddressLen * 1) + 14, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0 + (AddressLen * 1) + 14, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_05Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Port", Port);
            XmlAttrib(sb, "AddressLen", AddressLen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Port", "Address", "AddressLen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Port;
                case 3:
                    return AddressLen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_05Args> m_target;
        #endregion
    }
    public sealed class task_07Args : TraceEvent
    {
        public Address Process { get { return GetAddressAt(0); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(4, 1)); } }
        public int Reason { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal task_07Args(Action<task_07Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<task_07Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttribHex(sb, "Process", Process);
            XmlAttribHex(sb, "Endpoint", Endpoint);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Process", "Endpoint", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Process;
                case 1:
                    return Endpoint;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<task_07Args> m_target;
        #endregion
    }
    public enum AFD_DGRAM_DROP
    {
        DatagramSourceAddressDoesNotMatchConnectedAddress = 0x1,
        InsufficientLocalBufferSpace = 0x2,
        BufferAllocationFailed = 0x3,
        InsufficientLocalBufferSpaceCircularQueueingEnabled = 0x4,
        IndicatedDatagramTooLargeIntegerOverflow = 0x5,
    }
    public enum AFD_OPTION
    {
        SO_OOBINLINE = 0x1,
        FIONBIO = 0x2,
        SO_RCVBUF = 0x6,
        SO_SNDBUF = 0x7,
        SIO_ENABLE_CIRCULAR_QUEUEING = 0x9,
        SIO_UDP_CONNRESET = 0xb,
        AFD_IPV6_V6ONLY = 0xd,
        SIO_UDP_NETRESET = 0xf,
    }
    public enum RIO_NOTIFICATION_TYPE
    {
        None = 0x0,
        Event = 0x1,
        IOCP = 0x2,
    }
    public enum WINSOCK_SocketType
    {
        SOCK_STREAM = 0x1,
        SOCK_DGRAM = 0x2,
        SOCK_RAW = 0x3,
        SOCK_RDM = 0x4,
        SOCK_SEQPACKET = 0x5,
    }
}
