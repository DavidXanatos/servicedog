using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Servicedog.Manifests.Dns.Win2008
{

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class DnsWin2008Parser : TraceEventParser
    {
        public static string ProviderName = "Microsoft-Windows-DNS-Client";
        public static Guid ProviderGuid = new Guid(unchecked((int)0x1c95126e), unchecked((short)0x7eea), unchecked((short)0x49a9), 0xa3, 0xfe, 0xa3, 0x78, 0xb0, 0x3d, 0xdb, 0x4d);
        public enum Keywords : long
        {
            Utsendpath = 0x100000000,
            Utreceivepath = 0x200000000,
            Utl3connectpath = 0x400000000,
            Utl2connectpath = 0x800000000,
            Utclosepath = 0x1000000000,
            Utauthentication = 0x2000000000,
            Utconfiguration = 0x4000000000,
            Utglobal = 0x8000000000,
            Keyword200000000000 = 0x200000000000,
        };

        public DnsWin2008Parser(TraceEventSource source) : base(source) { }

        public event Action<DnsAllServersTimeoutArgs> DnsAllServersTimeout
        {
            add
            {
                source.RegisterEventTemplate(DnsAllServersTimeoutTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsAllServersTimeoutSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsAllServersTimeoutSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1014, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsAuthoritativeResponse
        {
            add
            {
                source.RegisterEventTemplate(DnsAuthoritativeResponseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1017, ProviderGuid);
            }
        }
        public event Action<DnsContextUpdateArgs> DnsContextUpdate
        {
            add
            {
                source.RegisterEventTemplate(DnsContextUpdateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60007, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsHostFileError
        {
            add
            {
                source.RegisterEventTemplate(DnsHostFileErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsHostFileErrorSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsHostFileErrorSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
            }
        }
        public event Action<DnsInterfaceInfoArgs> DnsInterfaceInfo
        {
            add
            {
                source.RegisterEventTemplate(DnsInterfaceInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60103, ProviderGuid);
            }
        }
        public event Action<DnsLinkLocalArgs> DnsLinkLocal
        {
            add
            {
                source.RegisterEventTemplate(DnsLinkLocalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1018, ProviderGuid);
            }
        }
        public event Action<DnsMatchPolicyInfoArgs> DnsMatchPolicyInfo
        {
            add
            {
                source.RegisterEventTemplate(DnsMatchPolicyInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1021, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsMissingPrimarySuffix
        {
            add
            {
                source.RegisterEventTemplate(DnsMissingPrimarySuffixTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1007, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsMissingPrimarySuffixSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsMissingPrimarySuffixSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1008, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsNameError
        {
            add
            {
                source.RegisterEventTemplate(DnsNameErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1016, ProviderGuid);
            }
        }
        public event Action<DnsMissingPrimarySuffixArgs> DnsNetError
        {
            add
            {
                source.RegisterEventTemplate(DnsNetErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60004, ProviderGuid);
            }
        }
        public event Action<DnsNetWarningArgs> DnsNetWarning
        {
            add
            {
                source.RegisterEventTemplate(DnsNetWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60005, ProviderGuid);
            }
        }
        public event Action<DnsNonMatchingSuffixArgs> DnsNonMatchingSuffix
        {
            add
            {
                source.RegisterEventTemplate(DnsNonMatchingSuffixTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1009, ProviderGuid);
            }
        }
        public event Action<DnsNonMatchingSuffixArgs> DnsNonMatchingSuffixSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsNonMatchingSuffixSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1010, ProviderGuid);
            }
        }
        public event Action<DnsNoServerConfigV4Args> DnsNoServerConfigV4
        {
            add
            {
                source.RegisterEventTemplate(DnsNoServerConfigV4Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1000, ProviderGuid);
            }
        }
        public event Action<DnsNoServerConfigV4Args> DnsNoServerConfigV6
        {
            add
            {
                source.RegisterEventTemplate(DnsNoServerConfigV6Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1019, ProviderGuid);
            }
        }
        public event Action<DnsPolicySystemReadErrorArgs> DnsPolicyReadError
        {
            add
            {
                source.RegisterEventTemplate(DnsPolicyReadErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60008, ProviderGuid);
            }
        }
        public event Action<DnsPolicySystemReadErrorArgs> DnsPolicySystemReadError
        {
            add
            {
                source.RegisterEventTemplate(DnsPolicySystemReadErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1023, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsQueryBadXid
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryBadXidTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1024, ProviderGuid);
            }
        }
        public event Action<DnsQueryInvalidQuestionArgs> DnsQueryInvalidQuestion
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryInvalidQuestionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1026, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsQueryInvalidServerIp
        {
            add
            {
                source.RegisterEventTemplate(DnsQueryInvalidServerIpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1025, ProviderGuid);
            }
        }
        public event Action<DnsReadPolicyTableArgs> DnsReadPolicyTable
        {
            add
            {
                source.RegisterEventTemplate(DnsReadPolicyTableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1020, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> DnsSecureNoFallback
        {
            add
            {
                source.RegisterEventTemplate(DnsSecureNoFallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1022, ProviderGuid);
            }
        }
        public event Action<DnsServerForInterfaceArgs> DnsServerForInterface
        {
            add
            {
                source.RegisterEventTemplate(DnsServerForInterfaceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
            }
        }
        public event Action<DnsServerQueryChangeArgs> DnsServerQueryChange
        {
            add
            {
                source.RegisterEventTemplate(DnsServerQueryChangeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
            }
        }
        public event Action<DnsAllServersTimeoutArgs> DnsServerTimeout
        {
            add
            {
                source.RegisterEventTemplate(DnsServerTimeoutTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationFailure
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationFailureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1005, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationFailureSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationFailureSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1006, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationSuccess
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationSuccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
            }
        }
        public event Action<DnsServerValidationSuccessArgs> DnsServerValidationSuccessSystem
        {
            add
            {
                source.RegisterEventTemplate(DnsServerValidationSuccessSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1004, ProviderGuid);
            }
        }
        public event Action<DnsStateTransitionArgs> DnsStateTransition
        {
            add
            {
                source.RegisterEventTemplate(DnsStateTransitionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60006, ProviderGuid);
            }
        }
        public event Action<DnsV4TupleArgs> DnsV4Tuple
        {
            add
            {
                source.RegisterEventTemplate(DnsV4TupleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60101, ProviderGuid);
            }
        }
        public event Action<DnsV6TupleArgs> DnsV6Tuple
        {
            add
            {
                source.RegisterEventTemplate(DnsV6TupleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60102, ProviderGuid);
            }
        }
        public event Action<DnsSecureNoFallbackArgs> task_0
        {
            add
            {
                source.RegisterEventTemplate(task_0Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1027, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private DnsAllServersTimeoutArgs DnsAllServersTimeoutTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1013, 1013, "DnsAllServersTimeout", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsAllServersTimeoutSystemTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1014, 1014, "DnsAllServersTimeoutSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsAuthoritativeResponseTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1017, 1017, "DnsAuthoritativeResponse", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsContextUpdateArgs DnsContextUpdateTemplate(Action<DnsContextUpdateArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsContextUpdateArgs(action, 60007, 60007, "DnsContextUpdate", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMissingPrimarySuffixArgs DnsHostFileErrorTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1011, 1011, "DnsHostFileError", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMissingPrimarySuffixArgs DnsHostFileErrorSystemTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1012, 1012, "DnsHostFileErrorSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsInterfaceInfoArgs DnsInterfaceInfoTemplate(Action<DnsInterfaceInfoArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsInterfaceInfoArgs(action, 60103, 60103, "DnsInterfaceInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsLinkLocalArgs DnsLinkLocalTemplate(Action<DnsLinkLocalArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsLinkLocalArgs(action, 1018, 1018, "DnsLinkLocal", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMatchPolicyInfoArgs DnsMatchPolicyInfoTemplate(Action<DnsMatchPolicyInfoArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMatchPolicyInfoArgs(action, 1021, 1021, "DnsMatchPolicyInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMissingPrimarySuffixArgs DnsMissingPrimarySuffixTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1007, 1007, "DnsMissingPrimarySuffix", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMissingPrimarySuffixArgs DnsMissingPrimarySuffixSystemTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 1008, 1008, "DnsMissingPrimarySuffixSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsNameErrorTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1016, 1016, "DnsNameError", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsMissingPrimarySuffixArgs DnsNetErrorTemplate(Action<DnsMissingPrimarySuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsMissingPrimarySuffixArgs(action, 60004, 60004, "DnsNetError", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsNetWarningArgs DnsNetWarningTemplate(Action<DnsNetWarningArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNetWarningArgs(action, 60005, 60005, "DnsNetWarning", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsNonMatchingSuffixArgs DnsNonMatchingSuffixTemplate(Action<DnsNonMatchingSuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNonMatchingSuffixArgs(action, 1009, 1009, "DnsNonMatchingSuffix", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsNonMatchingSuffixArgs DnsNonMatchingSuffixSystemTemplate(Action<DnsNonMatchingSuffixArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNonMatchingSuffixArgs(action, 1010, 1010, "DnsNonMatchingSuffixSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsNoServerConfigV4Args DnsNoServerConfigV4Template(Action<DnsNoServerConfigV4Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNoServerConfigV4Args(action, 1000, 1000, "DnsNoServerConfigV4", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsNoServerConfigV4Args DnsNoServerConfigV6Template(Action<DnsNoServerConfigV4Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsNoServerConfigV4Args(action, 1019, 1019, "DnsNoServerConfigV6", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsPolicySystemReadErrorArgs DnsPolicyReadErrorTemplate(Action<DnsPolicySystemReadErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsPolicySystemReadErrorArgs(action, 60008, 60008, "DnsPolicyReadError", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsPolicySystemReadErrorArgs DnsPolicySystemReadErrorTemplate(Action<DnsPolicySystemReadErrorArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsPolicySystemReadErrorArgs(action, 1023, 1023, "DnsPolicySystemReadError", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsQueryBadXidTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1024, 1024, "DnsQueryBadXid", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsQueryInvalidQuestionArgs DnsQueryInvalidQuestionTemplate(Action<DnsQueryInvalidQuestionArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsQueryInvalidQuestionArgs(action, 1026, 1026, "DnsQueryInvalidQuestion", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsQueryInvalidServerIpTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1025, 1025, "DnsQueryInvalidServerIp", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsReadPolicyTableArgs DnsReadPolicyTableTemplate(Action<DnsReadPolicyTableArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsReadPolicyTableArgs(action, 1020, 1020, "DnsReadPolicyTable", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsSecureNoFallbackArgs DnsSecureNoFallbackTemplate(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 1022, 1022, "DnsSecureNoFallback", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerForInterfaceArgs DnsServerForInterfaceTemplate(Action<DnsServerForInterfaceArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerForInterfaceArgs(action, 1001, 1001, "DnsServerForInterface", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerQueryChangeArgs DnsServerQueryChangeTemplate(Action<DnsServerQueryChangeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerQueryChangeArgs(action, 1002, 1002, "DnsServerQueryChange", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsAllServersTimeoutArgs DnsServerTimeoutTemplate(Action<DnsAllServersTimeoutArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsAllServersTimeoutArgs(action, 1015, 1015, "DnsServerTimeout", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationFailureTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1005, 1005, "DnsServerValidationFailure", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationFailureSystemTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1006, 1006, "DnsServerValidationFailureSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationSuccessTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1003, 1003, "DnsServerValidationSuccess", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsServerValidationSuccessArgs DnsServerValidationSuccessSystemTemplate(Action<DnsServerValidationSuccessArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsServerValidationSuccessArgs(action, 1004, 1004, "DnsServerValidationSuccessSystem", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsStateTransitionArgs DnsStateTransitionTemplate(Action<DnsStateTransitionArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsStateTransitionArgs(action, 60006, 60006, "DnsStateTransition", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsV4TupleArgs DnsV4TupleTemplate(Action<DnsV4TupleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsV4TupleArgs(action, 60101, 60101, "DnsV4Tuple", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsV6TupleArgs DnsV6TupleTemplate(Action<DnsV6TupleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsV6TupleArgs(action, 60102, 60102, "DnsV6Tuple", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private DnsSecureNoFallbackArgs task_0Template(Action<DnsSecureNoFallbackArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DnsSecureNoFallbackArgs(action, 1027, 0, "task_0", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[36];
                templates[0] = DnsNoServerConfigV4Template(null);
                templates[1] = DnsServerForInterfaceTemplate(null);
                templates[2] = DnsServerQueryChangeTemplate(null);
                templates[3] = DnsServerValidationSuccessTemplate(null);
                templates[4] = DnsServerValidationSuccessSystemTemplate(null);
                templates[5] = DnsServerValidationFailureTemplate(null);
                templates[6] = DnsServerValidationFailureSystemTemplate(null);
                templates[7] = DnsMissingPrimarySuffixTemplate(null);
                templates[8] = DnsMissingPrimarySuffixSystemTemplate(null);
                templates[9] = DnsNonMatchingSuffixTemplate(null);
                templates[10] = DnsNonMatchingSuffixSystemTemplate(null);
                templates[11] = DnsHostFileErrorTemplate(null);
                templates[12] = DnsHostFileErrorSystemTemplate(null);
                templates[13] = DnsAllServersTimeoutTemplate(null);
                templates[14] = DnsAllServersTimeoutSystemTemplate(null);
                templates[15] = DnsServerTimeoutTemplate(null);
                templates[16] = DnsNameErrorTemplate(null);
                templates[17] = DnsAuthoritativeResponseTemplate(null);
                templates[18] = DnsLinkLocalTemplate(null);
                templates[19] = DnsNoServerConfigV6Template(null);
                templates[20] = DnsReadPolicyTableTemplate(null);
                templates[21] = DnsMatchPolicyInfoTemplate(null);
                templates[22] = DnsSecureNoFallbackTemplate(null);
                templates[23] = DnsPolicySystemReadErrorTemplate(null);
                templates[24] = DnsQueryBadXidTemplate(null);
                templates[25] = DnsQueryInvalidServerIpTemplate(null);
                templates[26] = DnsQueryInvalidQuestionTemplate(null);
                templates[27] = task_0Template(null);
                templates[28] = DnsNetErrorTemplate(null);
                templates[29] = DnsNetWarningTemplate(null);
                templates[30] = DnsStateTransitionTemplate(null);
                templates[31] = DnsContextUpdateTemplate(null);
                templates[32] = DnsPolicyReadErrorTemplate(null);
                templates[33] = DnsV4TupleTemplate(null);
                templates[34] = DnsV6TupleTemplate(null);
                templates[35] = DnsInterfaceInfoTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }

    public sealed class DnsAllServersTimeoutArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0) + 4, AddressLength); } }

        #region Private
        internal DnsAllServersTimeoutArgs(Action<DnsAllServersTimeoutArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsAllServersTimeoutArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "QueryName", QueryName);
            XmlAttrib(sb, "AddressLength", AddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "AddressLength", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsAllServersTimeoutArgs> m_target;
        #endregion
    }
    public sealed class DnsContextUpdateArgs : TraceEvent
    {
        public int Context { get { return GetInt32At(0); } }
        public int UpdateReasonCode { get { return GetInt32At(4); } }

        #region Private
        internal DnsContextUpdateArgs(Action<DnsContextUpdateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsContextUpdateArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Context", Context);
            XmlAttrib(sb, "UpdateReasonCode", UpdateReasonCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Context", "UpdateReasonCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Context;
                case 1:
                    return UpdateReasonCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsContextUpdateArgs> m_target;
        #endregion
    }
    public sealed class DnsMissingPrimarySuffixArgs : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public int Context { get { return GetInt32At(8); } }

        #region Private
        internal DnsMissingPrimarySuffixArgs(Action<DnsMissingPrimarySuffixArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsMissingPrimarySuffixArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            XmlAttrib(sb, "Location", Location);
            XmlAttrib(sb, "Context", Context);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode", "Location", "Context" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                case 1:
                    return Location;
                case 2:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsMissingPrimarySuffixArgs> m_target;
        #endregion
    }
    public sealed class DnsInterfaceInfoArgs : TraceEvent
    {
        public Guid IfGuid { get { return GetGuidAt(0); } }
        public int IfIndex { get { return GetInt32At(16); } }
        public long IfLuid { get { return GetInt64At(20); } }
        public int ReferenceContext { get { return GetInt32At(28); } }

        #region Private
        internal DnsInterfaceInfoArgs(Action<DnsInterfaceInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsInterfaceInfoArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "IfGuid", IfGuid);
            XmlAttrib(sb, "IfIndex", IfIndex);
            XmlAttrib(sb, "IfLuid", IfLuid);
            XmlAttrib(sb, "ReferenceContext", ReferenceContext);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IfGuid", "IfIndex", "IfLuid", "ReferenceContext" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IfGuid;
                case 1:
                    return IfIndex;
                case 2:
                    return IfLuid;
                case 3:
                    return ReferenceContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsInterfaceInfoArgs> m_target;
        #endregion
    }
    public sealed class DnsLinkLocalArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0) + 4, AddressLength); } }
        public int DnsAddressLength { get { return GetInt32At(SkipUnicodeString(0) + 4); } }
        public byte[] DnsAddress { get { return GetByteArrayAt(SkipUnicodeString(0) + 8, DnsAddressLength); } }

        #region Private
        internal DnsLinkLocalArgs(Action<DnsLinkLocalArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsLinkLocalArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "QueryName", QueryName);
            XmlAttrib(sb, "AddressLength", AddressLength);
            XmlAttrib(sb, "DnsAddressLength", DnsAddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "AddressLength", "Address", "DnsAddressLength", "DnsAddress" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return AddressLength;
                case 2:
                    return DnsAddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsLinkLocalArgs> m_target;
        #endregion
    }
    public sealed class DnsMatchPolicyInfoArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public string KeyName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int DnsSecValidationRequired { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int DnsQueryOverIPSec { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)) + 4); } }
        public int DnsEncryption { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)) + 8); } }
        public string DirectAccessServerList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)) + 12); } }
        public int ProxyType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)) + 12)); } }
        public string ProxyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)) + 12) + 4); } }

        #region Private
        internal DnsMatchPolicyInfoArgs(Action<DnsMatchPolicyInfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)) + 12) + 4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)) + 12) + 4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsMatchPolicyInfoArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "QueryName", QueryName);
            XmlAttrib(sb, "KeyName", KeyName);
            XmlAttrib(sb, "DnsSecValidationRequired", DnsSecValidationRequired);
            XmlAttrib(sb, "DnsQueryOverIPSec", DnsQueryOverIPSec);
            XmlAttrib(sb, "DnsEncryption", DnsEncryption);
            XmlAttrib(sb, "DirectAccessServerList", DirectAccessServerList);
            XmlAttrib(sb, "ProxyType", ProxyType);
            XmlAttrib(sb, "ProxyName", ProxyName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "KeyName", "DnsSecValidationRequired", "DnsQueryOverIPSec", "DnsEncryption", "DirectAccessServerList", "ProxyType", "ProxyName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return KeyName;
                case 2:
                    return DnsSecValidationRequired;
                case 3:
                    return DnsQueryOverIPSec;
                case 4:
                    return DnsEncryption;
                case 5:
                    return DirectAccessServerList;
                case 6:
                    return ProxyType;
                case 7:
                    return ProxyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsMatchPolicyInfoArgs> m_target;
        #endregion
    }
    public sealed class DnsNetWarningArgs : TraceEvent
    {
        public int WarningCode { get { return GetInt32At(0); } }
        public int Location { get { return GetInt32At(4); } }
        public int Context { get { return GetInt32At(8); } }

        #region Private
        internal DnsNetWarningArgs(Action<DnsNetWarningArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNetWarningArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "WarningCode", WarningCode);
            XmlAttrib(sb, "Location", Location);
            XmlAttrib(sb, "Context", Context);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WarningCode", "Location", "Context" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WarningCode;
                case 1:
                    return Location;
                case 2:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNetWarningArgs> m_target;
        #endregion
    }
    public sealed class DnsNonMatchingSuffixArgs : TraceEvent
    {
        public string DnsSuffix { get { return GetUnicodeStringAt(0); } }
        public string AdSuffix { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal DnsNonMatchingSuffixArgs(Action<DnsNonMatchingSuffixArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNonMatchingSuffixArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "DnsSuffix", DnsSuffix);
            XmlAttrib(sb, "AdSuffix", AdSuffix);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DnsSuffix", "AdSuffix" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DnsSuffix;
                case 1:
                    return AdSuffix;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNonMatchingSuffixArgs> m_target;
        #endregion
    }
    public sealed class DnsNoServerConfigV4Args : TraceEvent
    {
        public int Location { get { return GetInt32At(0); } }
        public int Context { get { return GetInt32At(4); } }

        #region Private
        internal DnsNoServerConfigV4Args(Action<DnsNoServerConfigV4Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsNoServerConfigV4Args>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Location", Location);
            XmlAttrib(sb, "Context", Context);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location", "Context" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                case 1:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsNoServerConfigV4Args> m_target;
        #endregion
    }
    public sealed class DnsPolicySystemReadErrorArgs : TraceEvent
    {
        public string RuleName { get { return GetUnicodeStringAt(0); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal DnsPolicySystemReadErrorArgs(Action<DnsPolicySystemReadErrorArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsPolicySystemReadErrorArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "RuleName", RuleName);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RuleName", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RuleName;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsPolicySystemReadErrorArgs> m_target;
        #endregion
    }
    public sealed class DnsQueryInvalidQuestionArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }
        public string ResponseQuestion { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(SkipUnicodeString(0)) + 4, AddressLength); } }

        #region Private
        internal DnsQueryInvalidQuestionArgs(Action<DnsQueryInvalidQuestionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsQueryInvalidQuestionArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "QueryName", QueryName);
            XmlAttrib(sb, "ResponseQuestion", ResponseQuestion);
            XmlAttrib(sb, "AddressLength", AddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName", "ResponseQuestion", "AddressLength", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                case 1:
                    return ResponseQuestion;
                case 2:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsQueryInvalidQuestionArgs> m_target;
        #endregion
    }
    public sealed class DnsReadPolicyTableArgs : TraceEvent
    {
        public string KeyName { get { return GetUnicodeStringAt(0); } }
        public int DnsSecValidationRequired { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int DnsQueryOverIPSec { get { return GetInt32At(SkipUnicodeString(0) + 4); } }
        public int DnsEncryption { get { return GetInt32At(SkipUnicodeString(0) + 8); } }
        public string DirectAccessServerList { get { return GetUnicodeStringAt(SkipUnicodeString(0) + 12); } }
        public int RemoteIPSEC { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0) + 12)); } }
        public int RemoteEncryption { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0) + 12) + 4); } }
        public int ProxyType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0) + 12) + 8); } }
        public string ProxyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0) + 12) + 12); } }

        #region Private
        internal DnsReadPolicyTableArgs(Action<DnsReadPolicyTableArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0) + 12) + 12)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0) + 12) + 12)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsReadPolicyTableArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "KeyName", KeyName);
            XmlAttrib(sb, "DnsSecValidationRequired", DnsSecValidationRequired);
            XmlAttrib(sb, "DnsQueryOverIPSec", DnsQueryOverIPSec);
            XmlAttrib(sb, "DnsEncryption", DnsEncryption);
            XmlAttrib(sb, "DirectAccessServerList", DirectAccessServerList);
            XmlAttrib(sb, "RemoteIPSEC", RemoteIPSEC);
            XmlAttrib(sb, "RemoteEncryption", RemoteEncryption);
            XmlAttrib(sb, "ProxyType", ProxyType);
            XmlAttrib(sb, "ProxyName", ProxyName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "KeyName", "DnsSecValidationRequired", "DnsQueryOverIPSec", "DnsEncryption", "DirectAccessServerList", "RemoteIPSEC", "RemoteEncryption", "ProxyType", "ProxyName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return KeyName;
                case 1:
                    return DnsSecValidationRequired;
                case 2:
                    return DnsQueryOverIPSec;
                case 3:
                    return DnsEncryption;
                case 4:
                    return DirectAccessServerList;
                case 5:
                    return RemoteIPSEC;
                case 6:
                    return RemoteEncryption;
                case 7:
                    return ProxyType;
                case 8:
                    return ProxyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsReadPolicyTableArgs> m_target;
        #endregion
    }
    public sealed class DnsSecureNoFallbackArgs : TraceEvent
    {
        public string QueryName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal DnsSecureNoFallbackArgs(Action<DnsSecureNoFallbackArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsSecureNoFallbackArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "QueryName", QueryName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QueryName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QueryName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsSecureNoFallbackArgs> m_target;
        #endregion
    }
    public sealed class DnsServerForInterfaceArgs : TraceEvent
    {
        public string Interface { get { return GetUnicodeStringAt(0); } }
        public int TotalServerCount { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Index { get { return GetInt32At(SkipUnicodeString(0) + 4); } }
        public DnsIpType DynamicAddress { get { return (DnsIpType)GetByteAt(SkipUnicodeString(0) + 8); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0) + 9); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0) + 13, AddressLength); } }

        #region Private
        internal DnsServerForInterfaceArgs(Action<DnsServerForInterfaceArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 13));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerForInterfaceArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Interface", Interface);
            XmlAttrib(sb, "TotalServerCount", TotalServerCount);
            XmlAttrib(sb, "Index", Index);
            XmlAttrib(sb, "DynamicAddress", DynamicAddress);
            XmlAttrib(sb, "AddressLength", AddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Interface", "TotalServerCount", "Index", "DynamicAddress", "AddressLength", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Interface;
                case 1:
                    return TotalServerCount;
                case 2:
                    return Index;
                case 3:
                    return DynamicAddress;
                case 4:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerForInterfaceArgs> m_target;
        #endregion
    }
    public sealed class DnsServerQueryChangeArgs : TraceEvent
    {
        public string Interface { get { return GetUnicodeStringAt(0); } }
        public int AddressLength { get { return GetInt32At(SkipUnicodeString(0)); } }
        public byte[] Address { get { return GetByteArrayAt(SkipUnicodeString(0) + 4, AddressLength); } }

        #region Private
        internal DnsServerQueryChangeArgs(Action<DnsServerQueryChangeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerQueryChangeArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Interface", Interface);
            XmlAttrib(sb, "AddressLength", AddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Interface", "AddressLength", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Interface;
                case 1:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerQueryChangeArgs> m_target;
        #endregion
    }
    public sealed class DnsServerValidationSuccessArgs : TraceEvent
    {
        public int AddressLength { get { return GetInt32At(0); } }
        public byte[] Address { get { return GetByteArrayAt(4, AddressLength); } }

        #region Private
        internal DnsServerValidationSuccessArgs(Action<DnsServerValidationSuccessArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0 + (AddressLength * 1) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 0 + (AddressLength * 1) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsServerValidationSuccessArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "AddressLength", AddressLength);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AddressLength", "Address" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AddressLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsServerValidationSuccessArgs> m_target;
        #endregion
    }
    public sealed class DnsStateTransitionArgs : TraceEvent
    {
        public utOpcode NextState { get { return (utOpcode)GetByteAt(0); } }
        public int Context { get { return GetInt32At(1); } }

        #region Private
        internal DnsStateTransitionArgs(Action<DnsStateTransitionArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsStateTransitionArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "NextState", NextState);
            XmlAttrib(sb, "Context", Context);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NextState", "Context" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NextState;
                case 1:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsStateTransitionArgs> m_target;
        #endregion
    }
    public sealed class DnsV4TupleArgs : TraceEvent
    {
        public int SourceAddress { get { return GetInt32At(0); } }
        public int SourcePort { get { return GetInt32At(4); } }
        public int DestinationAddress { get { return GetInt32At(8); } }
        public int DestinationPort { get { return GetInt32At(12); } }
        public int Protocol { get { return GetInt32At(16); } }
        public int ReferenceContext { get { return GetInt32At(20); } }

        #region Private
        internal DnsV4TupleArgs(Action<DnsV4TupleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsV4TupleArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "SourceAddress", SourceAddress);
            XmlAttrib(sb, "SourcePort", SourcePort);
            XmlAttrib(sb, "DestinationAddress", DestinationAddress);
            XmlAttrib(sb, "DestinationPort", DestinationPort);
            XmlAttrib(sb, "Protocol", Protocol);
            XmlAttrib(sb, "ReferenceContext", ReferenceContext);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceAddress", "SourcePort", "DestinationAddress", "DestinationPort", "Protocol", "ReferenceContext" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceAddress;
                case 1:
                    return SourcePort;
                case 2:
                    return DestinationAddress;
                case 3:
                    return DestinationPort;
                case 4:
                    return Protocol;
                case 5:
                    return ReferenceContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsV4TupleArgs> m_target;
        #endregion
    }
    public sealed class DnsV6TupleArgs : TraceEvent
    {
        public byte[] SourceAddress { get { return GetByteArrayAt(0, AddressLength); } }
        public int SourcePort { get { return GetInt32At(1); } }
        public byte[] DestinationAddress { get { return GetByteArrayAt(0 + (AddressLength * 1) + 4, AddressLength); } }
        public int DestinationPort { get { return GetInt32At(6); } }
        public int Protocol { get { return GetInt32At(10); } }
        public int ReferenceContext { get { return GetInt32At(14); } }
        public int AddressLength { get { return GetInt32At(0 + (AddressLength * 1) + (AddressLength * 1) + 16); } }



        #region Private
        internal DnsV6TupleArgs(Action<DnsV6TupleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DnsV6TupleArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "SourceAddress", SourceAddress);
            XmlAttrib(sb, "SourcePort", SourcePort);
            XmlAttrib(sb, "DestinationAddress", DestinationAddress);
            XmlAttrib(sb, "DestinationPort", DestinationPort);
            XmlAttrib(sb, "Protocol", Protocol);
            XmlAttrib(sb, "ReferenceContext", ReferenceContext);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceAddress", "SourcePort", "DestinationAddress", "DestinationPort", "Protocol", "ReferenceContext" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceAddress;
                case 1:
                    return SourcePort;
                case 2:
                    return DestinationAddress;
                case 3:
                    return DestinationPort;
                case 4:
                    return Protocol;
                case 5:
                    return ReferenceContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DnsV6TupleArgs> m_target;
        #endregion
    }
    public enum DnsIpType
    {
        staticIp = 0x0,
        dynamicIp = 0x1,
    }
    public enum utOpcode
    {
        StartState = 0xb4,
        EndState = 0xb5,
        ClosedState = 0xb6,
        OpenState = 0xb7,
        ConnectState = 0xb8,
        ListenState = 0xb9,
        AssociationState = 0xba,
        AuthenticationState = 0xbb,
        EstablishedState = 0xbc,
    }
}
